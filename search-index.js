var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",1,[[["acautomaton"]],["fullacautomaton"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",2,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",2,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",2,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",2,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",2,N],[10,"pattern","","Returns the pattern indexed at `i`.",2,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",3,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",3,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",3,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",3,[[["self"]],["usize"]]],[11,"new","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",4,[[["self"]],["fullacautomaton"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"next_state","","",1,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",1,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",1,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",1,N],[11,"patterns","","",1,N],[11,"pattern","","",1,[[["self"],["usize"]],["p"]]],[11,"next_state","","",4,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",4,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",4,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",4,N],[11,"patterns","","",4,N],[11,"pattern","","",4,[[["self"],["usize"]],["p"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"clone","","",0,[[["self"]],["match"]]],[11,"clone","","",1,[[["self"]],["fullacautomaton"]]],[11,"clone","","",4,[[["self"]],["acautomaton"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"next","","",5,[[["self"]],["option",["match"]]]],[11,"next","","",7,[[["self"]],["option",["result"]]]],[11,"next","","",6,[[["self"]],["option",["match"]]]],[11,"next","","",8,[[["self"]],["option",["result"]]]],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",4,[[["t"]],["acautomaton"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Matches"],[3,"MatchesOverlapping"],[3,"StreamMatches"],[3,"StreamMatchesOverlapping"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",N,N],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",N,N],[12,"foreground","","The style's foreground colour, if it has one.",0,N],[12,"background","","The style's background colour, if it has one.",0,N],[12,"is_bold","","Whether this style is bold.",0,N],[12,"is_dimmed","","Whether this style is dimmed.",0,N],[12,"is_italic","","Whether this style is italic.",0,N],[12,"is_underline","","Whether this style is underlined.",0,N],[12,"is_blink","","Whether this style is blinking.",0,N],[12,"is_reverse","","Whether this style has reverse colours.",0,N],[12,"is_hidden","","Whether this style is hidden.",0,N],[12,"is_strikethrough","","Whether this style is struckthrough.",0,N],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",N,N],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",N,N],[12,"0","","",1,N],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",N,N],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",N,N],[11,"prefix","","The prefix for this style.",0,[[["self"]],["prefix"]]],[11,"infix","","The infix between this style and another.",0,[[["self"],["style"]],["infix"]]],[11,"suffix","","The suffix for this style.",0,[[["self"]],["suffix"]]],[11,"prefix","","The prefix for this colour.",2,[[["self"]],["prefix"]]],[11,"infix","","The infix between this colour and another.",2,[[["self"],["colour"]],["infix"]]],[11,"suffix","","The suffix for this colour.",2,[[["self"]],["suffix"]]],[11,"new","","Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",0,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",0,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",0,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",0,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",0,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,[[["self"]],["bool"]]],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,[[["self"]],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",2,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",2,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",2,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",2,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",2,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",2,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,[[["self"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",2,[[["self"],["colour"]],["style"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,[[["self"],["i"]],["ansigenericstring"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,[[["self"],["i"]],["ansigenericstring"]]],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",N,N],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",N,N],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",N,N],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",3,[[["self"]],["prefix"]]],[11,"clone","","",4,[[["self"]],["infix"]]],[11,"clone","","",5,[[["self"]],["suffix"]]],[11,"clone","","",0,[[["self"]],["style"]]],[11,"clone","","",2,[[["self"]],["colour"]]],[11,"clone","","",6,[[["self"]],["ansigenericstring"]]],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,[[["colour"]],["style"]]],[11,"from","","",6,[[["i"]],["ansigenericstring"]]],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,[[],["style"]]],[11,"eq","","",0,[[["self"],["style"]],["bool"]]],[11,"ne","","",0,[[["self"],["style"]],["bool"]]],[11,"eq","","",2,[[["self"],["colour"]],["bool"]]],[11,"ne","","",2,[[["self"],["colour"]],["bool"]]],[11,"eq","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"ne","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deref","","",6,[[["self"]],["s"]]],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",9,[[["self"],["w"]],["result"]]],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,[[["self"],["w"]],["result"]]]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIStrings"],[6,"ANSIByteString"],[6,"ANSIByteStrings"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["stream"]]]],"paths":[[4,"Stream"]]};
searchIndex["base64"]={"doc":"","items":[[5,"encode","base64","",N,N],[5,"decode","","",N,[[["string"]],["vec",["u8"]]]]],"paths":[]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono 0.2.25","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",0,N],[13,"Tue","","Tuesday.",0,N],[13,"Wed","","Wednesday.",0,N],[13,"Thu","","Thursday.",0,N],[13,"Fri","","Friday.",0,N],[13,"Sat","","Saturday.",0,N],[13,"Sun","","Sunday.",0,N],[0,"duration","","ISO 8601 duration.",N,N],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",N,N],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,N],[13,"Single","","Given local time representation has a single unique result.",1,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,N],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",N,N],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[11,"today","","Returns a `Date` which corresponds to the current date.",2,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,[[],["datetime",["utc"]]]],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",N,N],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,[[["i32"]],["option",["fixedoffset"]]]],[0,"local","chrono::offset","The local (system) time zone.",N,N],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",N,N],[11,"today","","Returns a `Date` which corresponds to the current date.",4,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,[[],["datetime",["local"]]]],[8,"Offset","chrono::offset","The offset from the local time to UTC.",N,N],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",5,[[["self"]],["duration"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",6,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,[[["self"],["naivedatetime"]],["datetime"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",N,N],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,[[["self"]],["option",["naivedate"]]]],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",7,[[["self"],["duration"]],["option",["naivedate"]]]],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",7,[[["self"],["duration"]],["option",["naivedate"]]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"time","chrono::naive","ISO 8601 time without timezone.",N,N],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",N,N],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",N,N],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"from_num_seconds_from_unix_epoch","","Deprecated: Same to `NaiveDateTime::from_timestamp`.",9,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_num_seconds_from_unix_epoch_opt","","Deprecated: Same to `NaiveDateTime::from_timestamp_opt`.",9,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",9,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",9,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,[[["self"]],["u32"]]],[11,"num_seconds_from_unix_epoch","","Deprecated: Same to `NaiveDateTime::timestamp`.",9,[[["self"]],["i64"]]],[11,"checked_add","","Adds given `Duration` to the current date and time.",9,[[["self"],["duration"]],["option",["naivedatetime"]]]],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",9,[[["self"],["duration"]],["option",["naivedatetime"]]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",9,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"date","chrono","ISO 8601 calendar date with time zone.",N,N],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",N,N],[17,"MIN","","The minimum possible `Date`.",N,N],[17,"MAX","","The maximum possible `Date`.",N,N],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",10,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",10,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",10,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",10,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",10,N],[11,"timezone","","Retrieves an associated time zone.",10,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,[[["self"],["tz2"]],["date"]]],[11,"checked_add","","Adds given `Duration` to the current date.",10,[[["self"],["duration"]],["option",["date"]]]],[11,"checked_sub","","Subtracts given `Duration` from the current date.",10,[[["self"],["duration"]],["option",["date"]]]],[11,"naive_utc","","Returns a view to the naive UTC date.",10,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",10,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",10,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"datetime","chrono","ISO 8601 date and time with time zone.",N,N],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",N,N],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,N],[11,"date","","Retrieves a date component.",11,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,[[["self"]],["u32"]]],[11,"num_seconds_from_unix_epoch","","Deprecated: Same to `DateTime::timestamp`.",11,[[["self"]],["i64"]]],[11,"offset","","Retrieves an associated offset from UTC.",11,N],[11,"timezone","","Retrieves an associated time zone.",11,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add","","Adds given `Duration` to the current date and time.",11,[[["self"],["duration"]],["option",["datetime"]]]],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",11,[[["self"],["duration"]],["option",["datetime"]]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",11,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,[[["self"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"format","chrono","Formatting utilities for date and time.",N,N],[3,"ParseError","chrono::format","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",12,N],[13,"Zero","","Zero (`0`) padding.",12,N],[13,"Space","","Space padding.",12,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,N],[13,"Month","","Month (FW=PW=2).",13,N],[13,"Day","","Day of the month (FW=PW=2).",13,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,N],[13,"Ordinal","","Day of the year (FW=PW=3).",13,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",13,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",14,N],[13,"LongMonthName","","Full month names.",14,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,N],[13,"LongWeekdayName","","Full day of the week names.",14,N],[13,"LowerAmPm","","AM/PM.",14,N],[13,"UpperAmPm","","AM/PM.",14,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,N],[13,"TimezoneName","","Timezone name.",14,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",15,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,N],[13,"Fixed","","Fixed-format item.",15,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",N,N],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",16,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,N],[12,"isoyear","","Year in the ISO week date.",16,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,N],[12,"month","","Month (1--12).",16,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,N],[12,"weekday","","Day of the week.",16,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,N],[12,"minute","","Minute number (0--59).",16,N],[12,"second","","Second number (0--60, accounting for leap seconds).",16,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,N],[12,"offset","","Offset from the local time to UTC, in seconds.",16,N],[11,"new","","Returns the initial value of parsed parts.",16,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",16,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,[[["str"]],["strftimeitems"]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",18,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",18,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[8,"Datelike","chrono","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",19,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",19,N],[10,"month","","Returns the month number starting from 1.",19,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",19,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",19,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",19,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",19,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",19,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",19,[[["self"]],["weekday"]]],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",19,N],[10,"with_year","","Makes a new value with the year number changed.",19,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",19,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",19,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",19,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",19,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",19,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",19,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",19,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",20,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",20,N],[10,"minute","","Returns the minute number from 0 to 59.",20,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",20,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",20,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",20,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",20,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",20,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",20,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",20,[[["self"]],["u32"]]],[11,"succ","","The next day in the week.",0,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",0,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,[[["self"]],["u32"]]],[11,"from","chrono::duration","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","chrono","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","chrono::offset","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","chrono::offset::utc","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","chrono::offset::fixed","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","chrono::offset::local","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","chrono::naive::date","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","chrono::naive::time","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","chrono::naive::datetime","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","chrono::date","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","chrono::datetime","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","chrono::format","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","chrono::format::parsed","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","chrono::format::strftime","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"clone","chrono::duration","",21,[[["self"]],["duration"]]],[11,"partial_cmp","","",21,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["duration"]],["bool"]]],[11,"le","","",21,[[["self"],["duration"]],["bool"]]],[11,"gt","","",21,[[["self"],["duration"]],["bool"]]],[11,"ge","","",21,[[["self"],["duration"]],["bool"]]],[11,"div","","",21,[[["self"],["i32"]],["duration"]]],[11,"cmp","","",21,[[["self"],["duration"]],["ordering"]]],[11,"add","","",21,[[["self"],["duration"]],["duration"]]],[11,"neg","","",21,[[["self"]],["duration"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","",21,[[["self"],["duration"]],["duration"]]],[11,"mul","","",21,[[["self"],["i32"]],["duration"]]],[11,"eq","","",21,[[["self"],["duration"]],["bool"]]],[11,"ne","","",21,[[["self"],["duration"]],["bool"]]],[11,"local_minus_utc","chrono::offset::utc","",2,[[["self"]],["duration"]]],[11,"local_minus_utc","chrono::offset::fixed","",3,[[["self"]],["duration"]]],[11,"from_offset","chrono::offset::utc","",2,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",2,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",2,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",2,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",2,[[["self"],["naivedatetime"]],["utc"]]],[11,"from_offset","chrono::offset::fixed","",3,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_offset","chrono::offset::local","",4,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",4,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[11,"year","chrono::naive::date","Returns the year number in the calendar date.",7,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",7,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",7,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",7,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",7,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",7,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",7,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",7,[[["self"]],["weekday"]]],[11,"isoweekdate","","",7,N],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"year","chrono::naive::datetime","Returns the year number in the calendar date.",9,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",9,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",9,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",9,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",9,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",9,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",9,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",9,[[["self"]],["weekday"]]],[11,"isoweekdate","","",9,N],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"year","chrono::date","",10,[[["self"]],["i32"]]],[11,"month","","",10,[[["self"]],["u32"]]],[11,"month0","","",10,[[["self"]],["u32"]]],[11,"day","","",10,[[["self"]],["u32"]]],[11,"day0","","",10,[[["self"]],["u32"]]],[11,"ordinal","","",10,[[["self"]],["u32"]]],[11,"ordinal0","","",10,[[["self"]],["u32"]]],[11,"weekday","","",10,[[["self"]],["weekday"]]],[11,"isoweekdate","","",10,N],[11,"with_year","","",10,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",10,[[["self"],["u32"]],["option",["date"]]]],[11,"year","chrono::datetime","",11,[[["self"]],["i32"]]],[11,"month","","",11,[[["self"]],["u32"]]],[11,"month0","","",11,[[["self"]],["u32"]]],[11,"day","","",11,[[["self"]],["u32"]]],[11,"day0","","",11,[[["self"]],["u32"]]],[11,"ordinal","","",11,[[["self"]],["u32"]]],[11,"ordinal0","","",11,[[["self"]],["u32"]]],[11,"weekday","","",11,[[["self"]],["weekday"]]],[11,"isoweekdate","","",11,N],[11,"with_year","","",11,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","chrono::naive::time","Returns the hour number from 0 to 23.",8,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",8,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",8,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,[[["self"]],["u32"]]],[11,"hour","chrono::naive::datetime","Returns the hour number from 0 to 23.",9,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",9,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",9,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","chrono::datetime","",11,[[["self"]],["u32"]]],[11,"minute","","",11,[[["self"]],["u32"]]],[11,"second","","",11,[[["self"]],["u32"]]],[11,"nanosecond","","",11,[[["self"]],["u32"]]],[11,"with_hour","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",11,[[["self"],["u32"]],["option",["datetime"]]]],[11,"clone","chrono::offset","",1,[[["self"]],["localresult"]]],[11,"clone","chrono::offset::utc","",2,[[["self"]],["utc"]]],[11,"clone","chrono::offset::fixed","",3,[[["self"]],["fixedoffset"]]],[11,"clone","chrono::offset::local","",4,[[["self"]],["local"]]],[11,"clone","chrono::naive::date","",7,[[["self"]],["naivedate"]]],[11,"clone","chrono::naive::time","",8,[[["self"]],["naivetime"]]],[11,"clone","chrono::naive::datetime","",9,[[["self"]],["naivedatetime"]]],[11,"clone","chrono::date","",10,[[["self"]],["date"]]],[11,"clone","chrono::datetime","",11,[[["self"]],["datetime"]]],[11,"clone","chrono::format","",12,[[["self"]],["pad"]]],[11,"clone","","",13,[[["self"]],["numeric"]]],[11,"clone","","",14,[[["self"]],["fixed"]]],[11,"clone","","",15,[[["self"]],["item"]]],[11,"clone","","",22,[[["self"]],["parseerror"]]],[11,"clone","chrono::format::parsed","",16,[[["self"]],["parsed"]]],[11,"clone","chrono::format::strftime","",17,[[["self"]],["strftimeitems"]]],[11,"clone","chrono","",0,[[["self"]],["weekday"]]],[11,"next","chrono::format::strftime","",17,[[["self"]],["option",["item"]]]],[11,"partial_cmp","chrono::naive::date","",7,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",7,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",7,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",7,[[["self"],["naivedate"]],["bool"]]],[11,"partial_cmp","chrono::naive::time","",8,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",8,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",8,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",8,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","chrono::naive::datetime","",9,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","chrono::date","",10,[[["self"],["date"]],["option",["ordering"]]]],[11,"partial_cmp","chrono::datetime","",11,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"eq","chrono::offset","",1,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["localresult"]],["bool"]]],[11,"eq","chrono::offset::utc","",2,[[["self"],["utc"]],["bool"]]],[11,"eq","chrono::offset::fixed","",3,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",3,[[["self"],["fixedoffset"]],["bool"]]],[11,"eq","chrono::naive::date","",7,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",7,[[["self"],["naivedate"]],["bool"]]],[11,"eq","chrono::naive::time","",8,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",8,[[["self"],["naivetime"]],["bool"]]],[11,"eq","chrono::naive::datetime","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",9,[[["self"],["naivedatetime"]],["bool"]]],[11,"eq","chrono::date","",10,[[["self"],["date"]],["bool"]]],[11,"eq","chrono::datetime","",11,[[["self"],["datetime"]],["bool"]]],[11,"eq","chrono::format","",12,[[["self"],["pad"]],["bool"]]],[11,"eq","","",13,[[["self"],["numeric"]],["bool"]]],[11,"eq","","",14,[[["self"],["fixed"]],["bool"]]],[11,"eq","","",15,[[["self"],["item"]],["bool"]]],[11,"ne","","",15,[[["self"],["item"]],["bool"]]],[11,"eq","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"eq","chrono::format::parsed","",16,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",16,[[["self"],["parsed"]],["bool"]]],[11,"eq","chrono","",0,[[["self"],["weekday"]],["bool"]]],[11,"cmp","chrono::naive::date","",7,[[["self"],["naivedate"]],["ordering"]]],[11,"cmp","chrono::naive::time","",8,[[["self"],["naivetime"]],["ordering"]]],[11,"cmp","chrono::naive::datetime","",9,[[["self"],["naivedatetime"]],["ordering"]]],[11,"cmp","chrono::date","",10,[[["self"],["date"]],["ordering"]]],[11,"cmp","chrono::datetime","",11,[[["self"],["datetime"]],["ordering"]]],[11,"hash","chrono::naive::date","",7,[[["self"],["h"]]]],[11,"hash","chrono::naive::time","",8,[[["self"],["h"]]]],[11,"hash","chrono::naive::datetime","",9,[[["self"],["h"]]]],[11,"hash","chrono::date","",10,[[["self"],["h"]]]],[11,"hash","chrono::datetime","",11,[[["self"],["h"]]]],[11,"fmt","chrono::offset::utc","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::offset::fixed","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::date","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::time","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::datetime","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::date","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::datetime","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::offset","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::offset::utc","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::offset::fixed","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::date","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::time","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive::datetime","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::date","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::datetime","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format::parsed","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","chrono::naive::date","",7,[[["str"]],["parseresult",["naivedate"]]]],[11,"from_str","chrono::naive::time","",8,[[["str"]],["parseresult",["naivetime"]]]],[11,"from_str","chrono::naive::datetime","",9,[[["str"]],["parseresult",["naivedatetime"]]]],[11,"from_str","chrono::datetime","",11,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",11,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",11,[[["str"]],["parseresult",["datetime"]]]],[11,"add","chrono::naive::date","",7,[[["self"],["duration"]],["naivedate"]]],[11,"add","chrono::naive::time","",8,[[["self"],["duration"]],["naivetime"]]],[11,"add","chrono::naive::datetime","",9,[[["self"],["duration"]],["naivedatetime"]]],[11,"add","chrono::date","",10,[[["self"],["duration"]],["date"]]],[11,"add","chrono::datetime","",11,[[["self"],["duration"]],["datetime"]]],[11,"sub","chrono::naive::date","",7,[[["self"],["naivedate"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["naivedate"]]],[11,"sub","chrono::naive::time","",8,[[["self"],["naivetime"]],["duration"]]],[11,"sub","","",8,[[["self"],["duration"]],["naivetime"]]],[11,"sub","chrono::naive::datetime","",9,[[["self"],["naivedatetime"]],["duration"]]],[11,"sub","","",9,[[["self"],["duration"]],["naivedatetime"]]],[11,"sub","chrono::date","",10,[[["self"],["date"]],["duration"]]],[11,"sub","","",10,[[["self"],["duration"]],["date"]]],[11,"sub","chrono::datetime","",11,[[["self"],["datetime"]],["duration"]]],[11,"sub","","",11,[[["self"],["duration"]],["datetime"]]],[11,"description","chrono::format","",22,[[["self"]],["str"]]],[11,"from_i64","chrono","",0,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",0,[[["u64"]],["option",["weekday"]]]],[11,"weeks","chrono::duration","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",21,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",21,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",21,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",21,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",21,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",21,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",21,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",21,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",21,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",21,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",21,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",21,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",21,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",21,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",21,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",21,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",21,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",21,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",21,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",21,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",21,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",21,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",21,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",21,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",21,[[["self"]],["result",["duration","outofrangeerror"]]]]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"],[3,"ParseError"]]};
searchIndex["clap"]={"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",N,N],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",N,N],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",N,N],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",N,N],[3,"SubCommand","","The abstract representation of a command line subcommand.",N,N],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",N,N],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",N,N],[3,"Error","","Command Line Argument Parser Error",N,N],[12,"message","","Formatted error message",0,N],[12,"kind","","The type of error",0,N],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,N],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",N,N],[13,"Required","","The argument must be used",1,N],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,N],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,N],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,N],[13,"Hidden","","The argument should not be shown in help text",1,N],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,N],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,N],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,N],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,N],[13,"HidePossibleValues","","Hides the possible values from the help string",1,N],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,N],[13,"RequireEquals","","Require options use `--option=val` syntax",1,N],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,N],[13,"HideDefaultValue","","Hides the default value from the help string",1,N],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,N],[13,"HideEnvValues","","Hides ENV values in the help message",1,N],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,N],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,N],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",N,N],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,N],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,N],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,N],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,N],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,N],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,N],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,N],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,N],[13,"ColoredHelp","","Uses colorized help messages.",2,N],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,N],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,N],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,N],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,N],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,N],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,N],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,N],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,N],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,N],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,N],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,N],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,N],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,N],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,N],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,N],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,N],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,N],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,N],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,N],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,N],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,N],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,N],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,N],[4,"ErrorKind","","Command line argument parser kind of error",N,N],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,N],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,N],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,N],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,N],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,N],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,N],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,N],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,N],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,N],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,N],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,N],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,N],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,N],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,N],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,N],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,N],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,N],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,N],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,N],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,N],[4,"Shell","","Describes which shell to produce a completions file for",N,N],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,N],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,N],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,N],[13,"PowerShell","","Generates a completion file for PowerShell",4,N],[13,"Elvish","","Generates a completion file for Elvish",4,N],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,[[["s"]],["self"]]],[11,"get_name","","Get the name of the app",5,[[["self"]],["str"]]],[11,"get_bin_name","","Get the name of the binary",5,[[["self"]],["option",["str"]]]],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,[[["s"]],["self"]]],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,[[["self"],["s"]],["self"]]],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,[[["self"],["s"]],["self"]]],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,[[["self"],["s"]],["self"]]],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,[[["self"],["s"]],["self"]]],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,[[["self"],["s"]],["self"]]],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,[[["self"],["s"]],["self"]]],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,[[["self"],["s"]],["self"]]],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,[[["self"],["s"]],["self"]]],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,[[["self"],["s"]],["self"]]],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"template","","Sets the help template to be used, overriding the default format.",5,[[["self"],["s"]],["self"]]],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,[[["self"],["appsettings"]],["self"]]],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,N],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,[[["self"],["appsettings"]],["self"]]],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,N],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,[[["self"],["appsettings"]],["self"]]],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,N],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,[[["self"],["a"]],["self"]]],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,N],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,[[["self"],["str"]],["self"]]],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,N],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,N],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,[[["self"],["arggroup"]],["self"]]],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,N],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,[[["self"],["app"]],["self"]]],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,[[["self"],["i"]],["self"]]],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,[[["self"],["usize"]],["self"]]],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,[[["self"]],["clapresult"]]],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,[[["self"]],["clapresult"]]],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,[[["self"],["w"]],["clapresult"]]],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,[[["self"],["s"],["shell"],["t"]]]],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,[[["self"],["s"],["shell"],["w"]]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,[[["self"]],["argmatches"]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,[[["self"]],["clapresult",["argmatches"]]]],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,[[["self"],["i"]],["argmatches"]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,[[["str"]],["self"]]],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,[[["str"]],["self"]]],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,[[["self"],["s"]],["self"]]],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,N],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,N],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,[[["self"],["str"]],["self"]]],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,[[["self"],["str"]],["self"]]],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,[[["self"],["bool"]],["self"]]],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,[[["self"],["bool"]],["self"]]],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,[[["self"],["str"]],["self"]]],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,N],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,N],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,N],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,[[["self"],["str"]],["self"]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,N],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,[[["self"],["str"]],["self"]]],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,N],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,N],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,N],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,[[["self"],["bool"]],["self"]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,[[["self"],["bool"]],["self"]]],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,[[["self"],["bool"]],["self"]]],[11,"index","","Specifies the index of a positional argument starting at 1.",6,[[["self"],["u64"]],["self"]]],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,[[["self"],["bool"]],["self"]]],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,[[["self"],["str"]],["self"]]],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,[[["self"],["bool"]],["self"]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,[[["self"],["bool"]],["self"]]],[11,"hidden","","Hides an argument from help message output.",6,[[["self"],["bool"]],["self"]]],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,N],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,[[["self"],["str"]],["self"]]],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,[[["self"],["bool"]],["self"]]],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,[[["self"],["str"]],["self"]]],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,N],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,[[["self"],["f"]],["self"]]],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,[[["self"],["f"]],["self"]]],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,[[["self"],["u64"]],["self"]]],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,[[["self"],["bool"]],["self"]]],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,[[["self"],["bool"]],["self"]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,[[["self"],["str"]],["self"]]],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,N],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,[[["self"],["str"]],["self"]]],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,[[["self"],["str"]],["self"]]],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["osstr"]],["self"]]],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,[[["self"],["str"],["option",["str"]],["str"]],["self"]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["str"],["option",["osstr"]],["osstr"]],["self"]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,N],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,N],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,[[["self"],["str"]],["self"]]],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,[[["self"],["osstr"]],["self"]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,[[["self"],["bool"]],["self"]]],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,[[["self"],["bool"]],["self"]]],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,[[["self"],["usize"]],["self"]]],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,[[["self"],["bool"]],["self"]]],[11,"hidden_short_help","","Hides an argument from short help message output.",6,[[["self"],["bool"]],["self"]]],[11,"hidden_long_help","","Hides an argument from long help message output.",6,[[["self"],["bool"]],["self"]]],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["bool"]]],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,[[["self"],["s"]],["option",["str"]]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["cow"]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osstr"]]]],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,[[["self"],["s"]],["option",["values"]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["vec"]]]],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osvalues"]]]],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,[[["self"],["s"]],["bool"]]],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,[[["self"],["s"]],["u64"]]],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["usize"]]]],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["indices"]]]],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,[[["self"],["s"]],["option",["argmatches"]]]],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,[[["self"]],["option",["str"]]]],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,N],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,[[["self"]],["str"]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",8,[[["str"]],["app"]]],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",9,[[["str"]],["self"]]],[11,"arg","","Adds an [argument] to this group by name",9,[[["self"],["str"]],["self"]]],[11,"args","","Adds multiple [arguments] to this group by name",9,N],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",9,[[["self"],["bool"]],["self"]]],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",9,[[["self"],["bool"]],["self"]]],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",9,[[["self"],["str"]],["self"]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",9,N],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",9,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",9,N],[11,"use_stderr","","Should the message be written to `stdout` or not",0,[[["self"]],["bool"]]],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,N],[11,"with_description","","Create an error with a custom description.",0,[[["str"],["errorkind"]],["self"]]],[11,"variants","","A list of possible variants in `&'static str` form",4,N],[6,"Result","","Short hand for [`Result`] type",N,N],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",N,N],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",N,N],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",N,N],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",N,N],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",N,N],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",N,N],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",N,N],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",N,N],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",N,N],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",N,N],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",N,N],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",N,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["appsettings"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["arg"]]],[11,"clone","","",7,[[["self"]],["argmatches"]]],[11,"clone","","",11,[[["self"]],["values"]]],[11,"clone","","",10,[[["self"]],["osvalues"]]],[11,"clone","","",8,[[["self"]],["subcommand"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["argsettings"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"clone","","",4,[[["self"]],["shell"]]],[11,"from","","",6,[[["arg"]],["self"]]],[11,"from","","",9,[[["arggroup"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"next","","",11,[[["self"]],["option",["str"]]]],[11,"size_hint","","",11,N],[11,"next","","",10,[[["self"]],["option",["osstr"]]]],[11,"size_hint","","",10,N],[11,"default","","",6,[[],["arg"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",11,[[],["self"]]],[11,"default","","",10,[[],["self"]]],[11,"default","","",9,[[],["arggroup"]]],[11,"eq","","",2,[[["self"],["appsettings"]],["bool"]]],[11,"eq","","",6,[[["self"],["arg"]],["bool"]]],[11,"eq","","",1,[[["self"],["argsettings"]],["bool"]]],[11,"eq","","",3,[[["self"],["errorkind"]],["bool"]]],[11,"next_back","","",11,[[["self"]],["option",["str"]]]],[11,"next_back","","",10,[[["self"]],["option",["osstr"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"SubCommand"],[3,"ArgGroup"],[3,"OsValues"],[3,"Values"]]};
searchIndex["cookie"]={"doc":"","items":[[3,"CookieJar","cookie","A jar of cookies for managing a session",N,N],[3,"Cookie","","",N,N],[12,"name","","",0,N],[12,"value","","",0,N],[12,"expires","","",0,N],[12,"max_age","","",0,N],[12,"domain","","",0,N],[12,"path","","",0,N],[12,"secure","","",0,N],[12,"httponly","","",0,N],[12,"custom","","",0,N],[3,"AttrVal","","",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[11,"new","","Creates a new empty cookie jar with the given signing key.",2,N],[11,"add_original","","Adds an original cookie from a request.",2,[[["self"],["cookie"]]]],[11,"add","","Adds a new cookie to this cookie jar.",2,[[["self"],["cookie"]]]],[11,"remove","","Removes a cookie from this cookie jar.",2,[[["self"],["str"]]]],[11,"find","","Finds a cookie inside of this cookie jar.",2,[[["self"],["str"]],["option",["cookie"]]]],[11,"signed","","Creates a child signed cookie jar.",2,[[["self"]],["cookiejar"]]],[11,"encrypted","","Creates a child encrypted cookie jar.",2,[[["self"]],["cookiejar"]]],[11,"permanent","","Creates a child jar for permanent cookie storage.",2,[[["self"]],["cookiejar"]]],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time, returning a vector of `Set-Cookie` headers.",2,[[["self"]],["vec",["cookie"]]]],[11,"iter","","Return an iterator over the cookies in this jar.",2,[[["self"]],["iter"]]],[11,"new","","",0,[[["string"],["string"]],["cookie"]]],[11,"parse","","",0,[[["str"]],["result",["cookie"]]]],[11,"pair","","",0,[[["self"]],["attrval"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["cookie"]]],[11,"eq","","",0,[[["self"],["cookie"]],["bool"]]],[11,"ne","","",0,[[["self"],["cookie"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["cookie"]]]]],"paths":[[3,"Cookie"],[3,"AttrVal"],[3,"CookieJar"]]};
searchIndex["discord"]={"doc":"Client library for the Discord API.","items":[[3,"Connection","discord","Websocket connection to the Discord servers.",N,N],[3,"State","","Known state composed from received events.",N,N],[3,"Discord","","Client for the Discord REST API.",N,N],[3,"EditServer","","Patch content for the `edit_server` call.",N,N],[3,"EditChannel","","Patch content for the `edit_channel` call.",N,N],[3,"EditMember","","Patch content for the `edit_member` call.",N,N],[3,"EditProfile","","Patch content for the `edit_profile` call.",N,N],[4,"Error","","Discord API error type.",N,N],[13,"Hyper","","A `hyper` crate error",0,N],[13,"Json","","A `serde_json` crate error",0,N],[13,"WebSocket","","A `websocket` crate error",0,N],[13,"Io","","A `std::io` module error",0,N],[13,"Closed","","A websocket connection was closed, possibly with a message",0,N],[13,"Decode","","A json decoding error, with a description and the offending value",0,N],[13,"Status","","A generic non-success response from the REST API",0,N],[13,"RateLimited","","A rate limit error, with how many milliseconds to wait before retrying",0,N],[13,"Protocol","","A Discord protocol error, with a description",0,N],[13,"Command","","A command execution failure, with a command name and output",0,N],[13,"Other","","A miscellaneous error, with a description",0,N],[4,"ChannelRef","","A reference to a private or public channel.",N,N],[13,"Private","","A private channel",1,N],[13,"Group","","A group channel",1,N],[13,"Public","","A public channel and its server",1,N],[4,"GetMessages","","Argument to `get_messages` to specify the desired message retrieval.",N,N],[13,"MostRecent","","Get the N most recent messages.",2,N],[13,"Before","","Get the first N messages before the specified message.",2,N],[13,"After","","Get the first N messages after the specified message.",2,N],[13,"Around","","Get N/2 messages before, N/2 messages after, and the specified message.",2,N],[5,"read_image","","Read an image from a file into a string suitable for upload.",N,[[["p"]],["result",["string"]]]],[5,"get_unresolved_incidents","","Retrieves the current unresolved incidents from the status page.",N,[[],["result",["vec"]]]],[5,"get_active_maintenances","","Retrieves the active maintenances from the status page.",N,[[],["result",["vec"]]]],[5,"get_upcoming_maintenances","","Retrieves the upcoming maintenances from the status page.",N,[[],["result",["vec"]]]],[11,"new","","Establish a connection to the Discord websocket servers.",3,[[["str"],["str"],["option"]],["result"]]],[11,"set_game","","Change the game information that this client reports as playing.",3,[[["self"],["option",["game"]]]]],[11,"set_game_name","","Set the client to be playing this game, with defaults used for any extended information.",3,[[["self"],["string"]]]],[11,"set_presence","","Sets the active presence of the client, including game and/or status information.",3,[[["self"],["option",["game"]],["onlinestatus"],["bool"]]]],[11,"recv_event","","Receive an event over the websocket, blocking until one is available.",3,[[["self"]],["result",["event"]]]],[11,"shutdown","","Cleanly shut down the websocket connection. Optional.",3,[[["self"]],["result"]]],[11,"sync_servers","","Requests a download of online member lists.",3,N],[11,"sync_calls","","Request a synchronize of active calls for the specified channels.",3,N],[11,"download_all_members","","Requests a download of all member information for large servers.",3,[[["self"],["state"]]]],[11,"new","","Create a new state from an initial `ReadyEvent`.",4,[[["readyevent"]],["state"]]],[11,"unknown_members","","Count the total number of server members not yet downloaded.",4,[[["self"]],["u64"]]],[11,"all_private_channels","","Build a list of all known private and group channel IDs.",4,[[["self"]],["vec",["channelid"]]]],[11,"all_servers","","Build a list of all known server IDs.",4,[[["self"]],["vec",["serverid"]]]],[11,"update","","Update the state according to the changes described in the given event.",4,[[["self"],["event"]]]],[11,"user","","Get information about the logged-in user.",4,[[["self"]],["currentuser"]]],[11,"servers","","Get the servers this user has access to.",4,N],[11,"unavailable_servers","","Get the currently unavailable servers.",4,N],[11,"private_channels","","Get the active 1-on-1 private channels with other users.",4,N],[11,"groups","","Get the active groups with other users.",4,[[["self"]],["btreemap"]]],[11,"calls","","Get the currently ongoing calls.",4,[[["self"]],["btreemap"]]],[11,"presences","","Get the presences of online friends.",4,N],[11,"relationships","","Get the friend/block relationships with other users.",4,N],[11,"settings","","Get the logged-in user's client settings.",4,[[["self"]],["option",["usersettings"]]]],[11,"server_settings","","Get the logged-in user's per-server notification settings.",4,[[["self"]],["option"]]],[11,"notes","","Get the map of notes that have been made by this user.",4,[[["self"]],["option",["btreemap"]]]],[11,"find_channel","","Look up a private or public channel by its ID.",4,[[["self"],["channelid"]],["option",["channelref"]]]],[11,"find_voice_user","","Look up the voice channel or group call a user is in, if any.",4,[[["self"],["userid"]],["option"]]],[0,"model","","Struct and enum definitions of values in the Discord model.",N,N],[3,"UserId","discord::model","An identifier for a User",N,N],[12,"0","","",5,N],[3,"ServerId","","An identifier for a Server",N,N],[12,"0","","",6,N],[3,"ChannelId","","An identifier for a Channel",N,N],[12,"0","","",7,N],[3,"MessageId","","An identifier for a Message",N,N],[12,"0","","",8,N],[3,"RoleId","","An identifier for a Role",N,N],[12,"0","","",9,N],[3,"EmojiId","","An identifier for an Emoji",N,N],[12,"0","","",10,N],[3,"Mention","","A mention targeted at a specific user, channel, or other entity.",N,N],[3,"ServerInfo","","The basic information about a server only",N,N],[12,"id","","",11,N],[12,"name","","",11,N],[12,"icon","","",11,N],[12,"owner","","",11,N],[12,"permissions","","",11,N],[3,"Server","","Static information about a server",N,N],[12,"id","","",12,N],[12,"name","","",12,N],[12,"afk_timeout","","",12,N],[12,"afk_channel_id","","",12,N],[12,"icon","","",12,N],[12,"roles","","",12,N],[12,"region","","",12,N],[12,"embed_enabled","","",12,N],[12,"embed_channel_id","","",12,N],[12,"owner_id","","",12,N],[12,"verification_level","","",12,N],[12,"emojis","","",12,N],[12,"features","","",12,N],[12,"splash","","",12,N],[12,"default_message_notifications","","",12,N],[12,"mfa_level","","",12,N],[3,"ServerPrune","","Representation of the number of member that would be pruned by a server prune operation.",N,N],[12,"pruned","","",13,N],[3,"Role","","Information about a role",N,N],[12,"id","","",14,N],[12,"name","","",14,N],[12,"color","","Color in `0xRRGGBB` form",14,N],[12,"hoist","","",14,N],[12,"managed","","",14,N],[12,"position","","",14,N],[12,"mentionable","","",14,N],[12,"permissions","","",14,N],[3,"Ban","","A banning of a user",N,N],[3,"User","","Broadly-applicable user information",N,N],[12,"id","","",15,N],[12,"name","","",15,N],[12,"discriminator","","",15,N],[12,"avatar","","",15,N],[12,"bot","","",15,N],[3,"Member","","Information about a member of a server",N,N],[12,"user","","",16,N],[12,"roles","","",16,N],[12,"nick","","",16,N],[12,"joined_at","","",16,N],[12,"mute","","",16,N],[12,"deaf","","",16,N],[3,"Group","","A group channel, potentially including other users, separate from a server.",N,N],[12,"channel_id","","",17,N],[12,"icon","","",17,N],[12,"last_message_id","","",17,N],[12,"last_pin_timestamp","","",17,N],[12,"name","","",17,N],[12,"owner_id","","",17,N],[12,"recipients","","",17,N],[3,"Call","","An active group or private call",N,N],[12,"channel_id","","",18,N],[12,"message_id","","",18,N],[12,"region","","",18,N],[12,"ringing","","",18,N],[12,"unavailable","","",18,N],[12,"voice_states","","",18,N],[3,"PrivateChannel","","Private text channel to another user",N,N],[12,"id","","",19,N],[12,"kind","","",19,N],[12,"recipient","","",19,N],[12,"last_message_id","","",19,N],[12,"last_pin_timestamp","","",19,N],[3,"PublicChannel","","Public voice or text channel within a server",N,N],[12,"id","","",20,N],[12,"name","","",20,N],[12,"server_id","","",20,N],[12,"kind","","",20,N],[12,"permission_overwrites","","",20,N],[12,"topic","","",20,N],[12,"position","","",20,N],[12,"last_message_id","","",20,N],[12,"bitrate","","",20,N],[12,"user_limit","","",20,N],[12,"last_pin_timestamp","","",20,N],[3,"PermissionOverwrite","","A channel-specific permission overwrite for a role or member.",N,N],[12,"kind","","",21,N],[12,"allow","","",21,N],[12,"deny","","",21,N],[3,"Attachment","","File upload attached to a message",N,N],[12,"id","","",22,N],[12,"filename","","Short filename for the attachment",22,N],[12,"url","","Shorter URL with message and attachment id",22,N],[12,"proxy_url","","Longer URL with large hash",22,N],[12,"size","","Size of the file in bytes",22,N],[12,"dimensions","","Dimensions if the file is an image",22,N],[3,"Message","","Message transmitted over a text channel",N,N],[12,"id","","",23,N],[12,"channel_id","","",23,N],[12,"content","","",23,N],[12,"nonce","","",23,N],[12,"tts","","",23,N],[12,"timestamp","","",23,N],[12,"edited_timestamp","","",23,N],[12,"pinned","","",23,N],[12,"kind","","",23,N],[12,"author","","",23,N],[12,"mention_everyone","","",23,N],[12,"mentions","","",23,N],[12,"mention_roles","","",23,N],[12,"attachments","","",23,N],[12,"embeds","","Follows OEmbed standard",23,N],[3,"Invite","","Information about an invite",N,N],[12,"code","","",24,N],[12,"server_id","","",24,N],[12,"server_name","","",24,N],[12,"channel_type","","",24,N],[12,"channel_id","","",24,N],[12,"channel_name","","",24,N],[3,"RichInvite","","Detailed information about an invite, available to server managers",N,N],[12,"code","","",25,N],[12,"server_icon","","",25,N],[12,"server_id","","",25,N],[12,"server_name","","",25,N],[12,"server_splash_hash","","",25,N],[12,"channel_type","","",25,N],[12,"channel_id","","",25,N],[12,"channel_name","","",25,N],[12,"inviter","","",25,N],[12,"created_at","","",25,N],[12,"max_age","","",25,N],[12,"max_uses","","",25,N],[12,"temporary","","",25,N],[12,"uses","","",25,N],[3,"VoiceRegion","","Information about an available voice region",N,N],[12,"id","","",26,N],[12,"name","","",26,N],[12,"sample_hostname","","",26,N],[12,"sample_port","","",26,N],[12,"optimal","","",26,N],[12,"vip","","",26,N],[3,"ReadState","","Summary of messages since last login",N,N],[12,"id","","Id of the relevant channel",27,N],[12,"last_message_id","","Last seen message in this channel",27,N],[12,"mention_count","","Mentions since that message in this channel",27,N],[3,"Game","","Information about a game being played",N,N],[12,"name","","",28,N],[12,"url","","",28,N],[12,"kind","","",28,N],[3,"Presence","","A members's online status",N,N],[12,"user_id","","",29,N],[12,"status","","",29,N],[12,"last_modified","","",29,N],[12,"game","","",29,N],[12,"user","","",29,N],[12,"nick","","",29,N],[3,"VoiceState","","A member's state within a voice channel",N,N],[12,"user_id","","",30,N],[12,"channel_id","","",30,N],[12,"session_id","","",30,N],[12,"token","","",30,N],[12,"suppress","","",30,N],[12,"self_mute","","",30,N],[12,"self_deaf","","",30,N],[12,"mute","","",30,N],[12,"deaf","","",30,N],[3,"Emoji","","A parter custom emoji",N,N],[12,"id","","",31,N],[12,"name","","",31,N],[12,"managed","","",31,N],[12,"require_colons","","",31,N],[12,"roles","","",31,N],[3,"Reaction","","",N,N],[12,"channel_id","","",32,N],[12,"message_id","","",32,N],[12,"user_id","","",32,N],[12,"emoji","","",32,N],[3,"LiveServer","","Live server information",N,N],[12,"id","","",33,N],[12,"name","","",33,N],[12,"owner_id","","",33,N],[12,"voice_states","","",33,N],[12,"roles","","",33,N],[12,"region","","",33,N],[12,"presences","","",33,N],[12,"member_count","","",33,N],[12,"members","","",33,N],[12,"joined_at","","",33,N],[12,"icon","","",33,N],[12,"large","","",33,N],[12,"channels","","",33,N],[12,"afk_timeout","","",33,N],[12,"afk_channel_id","","",33,N],[12,"verification_level","","",33,N],[12,"emojis","","",33,N],[12,"features","","",33,N],[12,"splash","","",33,N],[12,"default_message_notifications","","",33,N],[12,"mfa_level","","",33,N],[3,"CurrentUser","","Information about the logged-in user",N,N],[12,"id","","",34,N],[12,"username","","",34,N],[12,"discriminator","","",34,N],[12,"avatar","","",34,N],[12,"email","","",34,N],[12,"verified","","",34,N],[12,"bot","","",34,N],[12,"mfa_enabled","","",34,N],[3,"ApplicationInfo","","Information about the current application and the owner.",N,N],[12,"description","","",35,N],[12,"flags","","",35,N],[12,"icon","","",35,N],[12,"id","","",35,N],[12,"name","","",35,N],[12,"rpc_origins","","",35,N],[12,"owner","","",35,N],[3,"Relationship","","Information on a friendship relationship this user has with another.",N,N],[12,"id","","",36,N],[12,"kind","","",36,N],[12,"user","","",36,N],[3,"FriendSourceFlags","","Flags for who may add this user as a friend.",N,N],[12,"all","","",37,N],[12,"mutual_friends","","",37,N],[12,"mutual_servers","","",37,N],[3,"UserSettings","","User settings usually used to influence client behavior",N,N],[12,"detect_platform_accounts","","",38,N],[12,"developer_mode","","",38,N],[12,"enable_tts_command","","",38,N],[12,"inline_attachment_media","","",38,N],[12,"inline_embed_media","","",38,N],[12,"locale","","",38,N],[12,"message_display_compact","","",38,N],[12,"render_embeds","","",38,N],[12,"server_positions","","",38,N],[12,"show_current_game","","",38,N],[12,"status","","",38,N],[12,"theme","","",38,N],[12,"convert_emoticons","","",38,N],[12,"friend_source_flags","","",38,N],[12,"restricted_servers","","Servers whose members cannot private message this user.",38,N],[3,"ChannelOverride","","A channel-specific notification settings override",N,N],[12,"channel_id","","",39,N],[12,"message_notifications","","",39,N],[12,"muted","","",39,N],[3,"UserServerSettings","","User settings which influence per-server notification behavior",N,N],[12,"server_id","","",40,N],[12,"message_notifications","","",40,N],[12,"mobile_push","","",40,N],[12,"muted","","",40,N],[12,"suppress_everyone","","",40,N],[12,"channel_overrides","","",40,N],[3,"Tutorial","","Progress through the Discord tutorial",N,N],[12,"indicators_suppressed","","",41,N],[12,"indicators_confirmed","","",41,N],[3,"Maintenance","","Discord status maintenance message.",N,N],[12,"description","","",42,N],[12,"id","","",42,N],[12,"name","","",42,N],[12,"start","","",42,N],[12,"stop","","",42,N],[3,"Incident","","An incident retrieved from the Discord status page.",N,N],[12,"id","","",43,N],[12,"impact","","",43,N],[12,"monitoring_at","","",43,N],[12,"name","","",43,N],[12,"page_id","","",43,N],[12,"short_link","","",43,N],[12,"status","","",43,N],[12,"incident_updates","","",43,N],[12,"created_at","","",43,N],[12,"resolved_at","","",43,N],[12,"updated_at","","",43,N],[3,"IncidentUpdate","","An update to an incident from the Discord status page. This will typically state what new information has been discovered about an incident.",N,N],[12,"body","","",44,N],[12,"id","","",44,N],[12,"incident_id","","",44,N],[12,"status","","",44,N],[12,"affected_components","","",44,N],[12,"created_at","","",44,N],[12,"display_at","","",44,N],[12,"updated_at","","",44,N],[3,"ReadyEvent","","The \"Ready\" event, containing initial state",N,N],[12,"version","","",45,N],[12,"user","","",45,N],[12,"session_id","","",45,N],[12,"user_settings","","",45,N],[12,"read_state","","",45,N],[12,"private_channels","","",45,N],[12,"presences","","",45,N],[12,"relationships","","",45,N],[12,"servers","","",45,N],[12,"user_server_settings","","",45,N],[12,"tutorial","","",45,N],[12,"trace","","The trace of servers involved in this connection.",45,N],[12,"notes","","",45,N],[12,"shard","","The shard info for this session; the shard id used and the total number of shards.",45,N],[4,"ChannelType","","The type of a channel",N,N],[13,"Group","","A group channel, separate from a server",46,N],[13,"Private","","A private channel with only one other person",46,N],[13,"Text","","A text channel in a server",46,N],[13,"Voice","","A voice channel",46,N],[4,"Channel","","A private or public channel",N,N],[13,"Group","","A group channel separate from a server",47,N],[13,"Private","","Text channel to another user",47,N],[13,"Public","","Voice or text channel within a server",47,N],[4,"PermissionOverwriteType","","The type of edit being made to a Channel's permissions.",N,N],[13,"Member","","",48,N],[13,"Role","","",48,N],[4,"MessageType","","The type of a message",N,N],[13,"Regular","","A regular, text-based message",49,N],[13,"GroupRecipientAddition","","A recipient was added to the group",49,N],[13,"GroupRecipientRemoval","","A recipient was removed from the group",49,N],[13,"GroupCallCreation","","A group call was created",49,N],[13,"GroupNameUpdate","","A group name was updated",49,N],[13,"GroupIconUpdate","","A group icon was updated",49,N],[13,"MessagePinned","","A message was pinned",49,N],[4,"OnlineStatus","","A user's online presence status",N,N],[13,"DoNotDisturb","","",50,N],[13,"Invisible","","",50,N],[13,"Offline","","",50,N],[13,"Online","","",50,N],[13,"Idle","","",50,N],[4,"GameType","","A type of game being played.",N,N],[13,"Playing","","",51,N],[13,"Streaming","","",51,N],[4,"VerificationLevel","","A condition that new users must satisfy before posting in text channels",N,N],[13,"None","","No verification is needed",52,N],[13,"Low","","Must have a verified email on their Discord account",52,N],[13,"Medium","","Must also be registered on Discord for longer than 5 minutes",52,N],[13,"High","","Must also be a member of this server for longer than 10 minutes",52,N],[4,"ReactionEmoji","","Emoji information sent only from reaction events",N,N],[13,"Unicode","","",53,N],[13,"Custom","","",53,N],[12,"name","discord::model::ReactionEmoji","",53,N],[12,"id","","",53,N],[4,"PossibleServer","discord::model","A server which may be unavailable",N,N],[13,"Offline","","An offline server, the ID of which is known",54,N],[13,"Online","","An online server, for which more information is available",54,N],[4,"RelationshipType","","A type of relationship this user has with another.",N,N],[13,"Ignored","","",55,N],[13,"Friends","","",55,N],[13,"Blocked","","",55,N],[13,"IncomingRequest","","",55,N],[13,"OutgoingRequest","","",55,N],[4,"NotificationLevel","","Notification level for a channel or server",N,N],[13,"All","","All messages trigger a notification",56,N],[13,"Mentions","","Only @mentions trigger a notification",56,N],[13,"Nothing","","No messages, even @mentions, trigger a notification",56,N],[13,"Parent","","Follow the parent's notification level",56,N],[4,"Event","","Event received over a websocket connection",N,N],[13,"Ready","","The first event in a connection, containing the initial state.",57,N],[13,"Resumed","","The connection has successfully resumed after a disconnect.",57,N],[12,"heartbeat_interval","discord::model::Event","",57,N],[12,"trace","","",57,N],[13,"UserUpdate","discord::model","Update to the logged-in user's information",57,N],[13,"UserNoteUpdate","","Update to a note that the logged-in user has set for another user.",57,N],[13,"UserSettingsUpdate","","Update to the logged-in user's preferences or client settings",57,N],[12,"detect_platform_accounts","discord::model::Event","",57,N],[12,"developer_mode","","",57,N],[12,"enable_tts_command","","",57,N],[12,"inline_attachment_media","","",57,N],[12,"inline_embed_media","","",57,N],[12,"locale","","",57,N],[12,"message_display_compact","","",57,N],[12,"render_embeds","","",57,N],[12,"server_positions","","",57,N],[12,"show_current_game","","",57,N],[12,"status","","",57,N],[12,"theme","","",57,N],[12,"convert_emoticons","","",57,N],[12,"friend_source_flags","","",57,N],[13,"UserServerSettingsUpdate","discord::model","Update to the logged-in user's server-specific notification settings",57,N],[13,"VoiceStateUpdate","","A member's voice state has changed",57,N],[13,"VoiceServerUpdate","","Voice server information is available",57,N],[12,"server_id","discord::model::Event","",57,N],[12,"channel_id","","",57,N],[12,"endpoint","","",57,N],[12,"token","","",57,N],[13,"CallCreate","discord::model","A new group call has been created",57,N],[13,"CallUpdate","","A group call has been updated",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"message_id","","",57,N],[12,"region","","",57,N],[12,"ringing","","",57,N],[13,"CallDelete","discord::model","A group call has been deleted (the call ended)",57,N],[13,"ChannelRecipientAdd","","A user has been added to a group",57,N],[13,"ChannelRecipientRemove","","A user has been removed from a group",57,N],[13,"TypingStart","","A user is typing; considered to last 5 seconds",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"user_id","","",57,N],[12,"timestamp","","",57,N],[13,"PresenceUpdate","discord::model","A member's presence state (or username or avatar) has changed",57,N],[12,"presence","discord::model::Event","",57,N],[12,"server_id","","",57,N],[12,"roles","","",57,N],[13,"PresencesReplace","discord::model","The precense list of the user's friends should be replaced entirely",57,N],[13,"RelationshipAdd","","",57,N],[13,"RelationshipRemove","","",57,N],[13,"MessageCreate","","",57,N],[13,"MessageUpdate","","A message has been edited, either by the user or the system",57,N],[12,"id","discord::model::Event","",57,N],[12,"channel_id","","",57,N],[12,"kind","","",57,N],[12,"content","","",57,N],[12,"nonce","","",57,N],[12,"tts","","",57,N],[12,"pinned","","",57,N],[12,"timestamp","","",57,N],[12,"edited_timestamp","","",57,N],[12,"author","","",57,N],[12,"mention_everyone","","",57,N],[12,"mentions","","",57,N],[12,"mention_roles","","",57,N],[12,"attachments","","",57,N],[12,"embeds","","",57,N],[13,"MessageAck","discord::model","Another logged-in device acknowledged this message",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"message_id","","May be `None` if a private channel with no messages has closed.",57,N],[13,"MessageDelete","discord::model","",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"message_id","","",57,N],[13,"MessageDeleteBulk","discord::model","",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"ids","","",57,N],[13,"ServerCreate","discord::model","",57,N],[13,"ServerUpdate","","",57,N],[13,"ServerDelete","","",57,N],[13,"ServerMemberAdd","","",57,N],[13,"ServerMemberUpdate","","A member's roles have changed",57,N],[12,"server_id","discord::model::Event","",57,N],[12,"roles","","",57,N],[12,"user","","",57,N],[12,"nick","","",57,N],[13,"ServerMemberRemove","discord::model","",57,N],[13,"ServerMembersChunk","","",57,N],[13,"ServerSync","","",57,N],[12,"server_id","discord::model::Event","",57,N],[12,"large","","",57,N],[12,"members","","",57,N],[12,"presences","","",57,N],[13,"ServerRoleCreate","discord::model","",57,N],[13,"ServerRoleUpdate","","",57,N],[13,"ServerRoleDelete","","",57,N],[13,"ServerBanAdd","","",57,N],[13,"ServerBanRemove","","",57,N],[13,"ServerIntegrationsUpdate","","",57,N],[13,"ServerEmojisUpdate","","",57,N],[13,"ChannelCreate","","",57,N],[13,"ChannelUpdate","","",57,N],[13,"ChannelDelete","","",57,N],[13,"ChannelPinsAck","","",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"timestamp","","",57,N],[13,"ChannelPinsUpdate","discord::model","",57,N],[12,"channel_id","discord::model::Event","",57,N],[12,"last_pin_timestamp","","",57,N],[13,"ReactionAdd","discord::model","",57,N],[13,"ReactionRemove","","",57,N],[13,"Unknown","","An event type not covered by the above",57,N],[0,"permissions","","",N,N],[3,"Permissions","discord::model::permissions","Set of permissions assignable to a Role or PermissionOverwrite",N,N],[17,"CREATE_INVITE","","",N,N],[17,"KICK_MEMBERS","","",N,N],[17,"BAN_MEMBERS","","",N,N],[17,"ADMINISTRATOR","","Grant all permissions, bypassing channel-specific permissions",N,N],[17,"MANAGE_ROLES","","Modify roles below their own",N,N],[17,"MANAGE_CHANNELS","","Create channels or edit existing ones",N,N],[17,"MANAGE_SERVER","","Change the server's name or move regions",N,N],[17,"CHANGE_NICKNAMES","","Change their own nickname",N,N],[17,"MANAGE_NICKNAMES","","Change the nickname of other users",N,N],[17,"MANAGE_EMOJIS","","Manage the emojis in a a server.",N,N],[17,"MANAGE_WEBHOOKS","","Manage channel webhooks",N,N],[17,"READ_MESSAGES","","",N,N],[17,"SEND_MESSAGES","","",N,N],[17,"SEND_TTS_MESSAGES","","Send text-to-speech messages to those focused on the channel",N,N],[17,"MANAGE_MESSAGES","","Delete messages by other users",N,N],[17,"EMBED_LINKS","","",N,N],[17,"ATTACH_FILES","","",N,N],[17,"READ_HISTORY","","",N,N],[17,"MENTION_EVERYONE","","Trigger a push notification for an entire channel with \"@everyone\"",N,N],[17,"EXTERNAL_EMOJIS","","Use emojis from other servers",N,N],[17,"ADD_REACTIONS","","Add emoji reactions to messages",N,N],[17,"VOICE_CONNECT","","",N,N],[17,"VOICE_SPEAK","","",N,N],[17,"VOICE_MUTE_MEMBERS","","",N,N],[17,"VOICE_DEAFEN_MEMBERS","","",N,N],[17,"VOICE_MOVE_MEMBERS","","Move users out of this channel into another",N,N],[17,"VOICE_USE_VAD","","When denied, members must use push-to-talk",N,N],[11,"empty","","Returns an empty set of flags.",58,[[],["permissions"]]],[11,"all","","Returns the set containing all flags.",58,[[],["permissions"]]],[11,"bits","","Returns the raw value of the flags currently stored.",58,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,[[["u64"]],["option",["permissions"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,[[["u64"]],["permissions"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",58,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,[[["self"],["permissions"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,[[["self"],["permissions"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",58,[[["self"],["permissions"]]]],[11,"remove","","Removes the specified flags in-place.",58,[[["self"],["permissions"]]]],[11,"toggle","","Toggles the specified flags in-place.",58,[[["self"],["permissions"]]]],[11,"decode","","",58,[[["value"]],["result",["permissions"]]]],[11,"creation_date","discord::model","Get the creation date of the object referred to by this ID.",5,[[["self"]],["timespec"]]],[11,"creation_date","","Get the creation date of the object referred to by this ID.",6,[[["self"]],["timespec"]]],[11,"creation_date","","Get the creation date of the object referred to by this ID.",7,[[["self"]],["timespec"]]],[11,"creation_date","","Get the creation date of the object referred to by this ID.",8,[[["self"]],["timespec"]]],[11,"creation_date","","Get the creation date of the object referred to by this ID.",9,[[["self"]],["timespec"]]],[11,"creation_date","","Get the creation date of the object referred to by this ID.",10,[[["self"]],["timespec"]]],[11,"mention","","Return a `Mention` which will ping this user.",5,[[["self"]],["mention"]]],[11,"mention","","Return a `Mention` which will ping members of this role.",9,[[["self"]],["mention"]]],[11,"mention","","Return a `Mention` which will link to this channel.",7,[[["self"]],["mention"]]],[11,"name","","",46,[[["self"]],["str"]]],[11,"from_str","","",46,[[["str"]],["option"]]],[11,"num","","",46,[[["self"]],["u64"]]],[11,"from_num","","",46,[[["u64"]],["option"]]],[11,"decode","","",11,[[["value"]],["result"]]],[11,"icon_url","","Returns the formatted URL of the server's icon.",11,[[["self"]],["option",["string"]]]],[11,"decode","","",12,[[["value"]],["result",["server"]]]],[11,"icon_url","","Returns the formatted URL of the server's icon.",12,[[["self"]],["option",["string"]]]],[11,"decode","","",13,[[["value"]],["result",["serverprune"]]]],[11,"decode","","",14,[[["value"]],["result",["role"]]]],[11,"mention","","Return a `Mention` which will ping members of this role.",14,[[["self"]],["mention"]]],[11,"decode","","",59,[[["value"]],["result",["ban"]]]],[11,"decode","","",15,[[["value"]],["result",["user"]]]],[11,"mention","","Return a `Mention` which will ping this user.",15,[[["self"]],["mention"]]],[11,"avatar_url","","Returns the formatted URL of the user's icon.",15,[[["self"]],["option",["string"]]]],[11,"decode","","",16,[[["value"]],["result",["member"]]]],[11,"display_name","","",16,[[["self"]],["str"]]],[11,"decode","","",47,[[["value"]],["result",["channel"]]]],[11,"decode","","",17,[[["value"]],["result",["group"]]]],[11,"name","","Get this group's name, building a default if needed",17,[[["self"]],["cow",["str"]]]],[11,"icon_url","","Returns the formatted URL of the group's icon.",17,[[["self"]],["option",["string"]]]],[11,"decode","","",18,[[["value"]],["result",["call"]]]],[11,"decode","","",19,[[["value"]],["result",["privatechannel"]]]],[11,"decode","","",20,[[["value"]],["result",["publicchannel"]]]],[11,"decode_server","","",20,[[["value"],["serverid"]],["result",["publicchannel"]]]],[11,"mention","","Return a `Mention` which will link to this channel.",20,[[["self"]],["mention"]]],[11,"decode","","",21,[[["value"]],["result",["permissionoverwrite"]]]],[11,"decode","","",22,[[["value"]],["result",["attachment"]]]],[11,"decode","","",23,[[["value"]],["result",["message"]]]],[11,"num","","",49,[[["self"]],["u64"]]],[11,"from_num","","",49,[[["u64"]],["option"]]],[11,"decode","","",24,[[["value"]],["result",["invite"]]]],[11,"decode","","",25,[[["value"]],["result"]]],[11,"decode","","",26,[[["value"]],["result",["voiceregion"]]]],[11,"decode","","",27,[[["value"]],["result",["readstate"]]]],[11,"name","","",50,[[["self"]],["str"]]],[11,"from_str","","",50,[[["str"]],["option"]]],[11,"num","","",51,[[["self"]],["u64"]]],[11,"from_num","","",51,[[["u64"]],["option"]]],[11,"playing","","",28,[[["string"]],["game"]]],[11,"streaming","","",28,[[["string"],["string"]],["game"]]],[11,"decode","","",28,[[["value"]],["result",["option"]]]],[11,"decode","","",29,[[["value"]],["result",["presence"]]]],[11,"decode","","",30,[[["value"]],["result",["voicestate"]]]],[11,"num","","",52,[[["self"]],["u64"]]],[11,"from_num","","",52,[[["u64"]],["option"]]],[11,"decode","","",31,[[["value"]],["result"]]],[11,"decode","","",32,[[["value"]],["result"]]],[11,"decode","","",53,[[["value"]],["result"]]],[11,"decode","","",33,[[["value"]],["result",["liveserver"]]]],[11,"icon_url","","Returns the formatted URL of the server's icon.",33,[[["self"]],["option",["string"]]]],[11,"permissions_for","","Calculate the effective permissions for a specific user in a specific channel on this server.",33,[[["self"],["channelid"],["userid"]],["permissions"]]],[11,"decode","","",54,[[["value"]],["result"]]],[11,"id","","",54,[[["self"]],["serverid"]]],[11,"decode","","",54,[[["value"]],["result"]]],[11,"id","","",54,[[["self"]],["serverid"]]],[11,"decode","","",34,[[["value"]],["result",["currentuser"]]]],[11,"decode","","",35,[[["value"]],["result",["applicationinfo"]]]],[11,"from_num","","",55,[[["u64"]],["option"]]],[11,"decode","","",36,[[["value"]],["result"]]],[11,"decode","","",37,[[["value"]],["result"]]],[11,"decode","","",38,[[["value"]],["result",["option"]]]],[11,"num","","",56,[[["self"]],["u64"]]],[11,"from_num","","",56,[[["u64"]],["option"]]],[11,"decode","","",39,[[["value"]],["result",["channeloverride"]]]],[11,"decode","","",40,[[["value"]],["result",["userserversettings"]]]],[11,"decode","","",41,[[["value"]],["result"]]],[11,"decode","","",42,[[["value"]],["result"]]],[11,"decode","","",43,[[["value"]],["result"]]],[11,"decode","","",44,[[["value"]],["result"]]],[6,"Result","discord","Discord API `Result` alias type.",N,N],[11,"new","","Log in to the Discord Rest API and acquire a token.",60,[[["str"],["str"]],["result",["discord"]]]],[11,"new_cache","","Log in to the Discord Rest API, possibly using a cached login token.",60,[[["p"],["str"],["option",["str"]]],["result",["discord"]]]],[11,"from_bot_token","","Log in as a bot account using the given authentication token.",60,[[["str"]],["result",["discord"]]]],[11,"logout","","Log out from the Discord API, invalidating this clients's token.",60,[[["self"]],["result"]]],[11,"create_channel","","Create a channel.",60,[[["self"],["serverid"],["str"],["channeltype"]],["result",["channel"]]]],[11,"get_server_channels","","Get the list of channels in a server.",60,[[["self"],["serverid"]],["result",["vec"]]]],[11,"get_channel","","Get information about a channel.",60,[[["self"],["channelid"]],["result",["channel"]]]],[11,"edit_channel","","Edit a channel's details. See `EditChannel` for the editable fields.",60,[[["self"],["channelid"],["f"]],["result",["publicchannel"]]]],[11,"delete_channel","","Delete a channel.",60,[[["self"],["channelid"]],["result",["channel"]]]],[11,"broadcast_typing","","Indicate typing on a channel for the next 5 seconds.",60,[[["self"],["channelid"]],["result"]]],[11,"get_message","","Get a single message by ID from a given channel.",60,[[["self"],["channelid"],["messageid"]],["result",["message"]]]],[11,"get_messages","","Get messages in the backlog for a given channel.",60,[[["self"],["channelid"],["getmessages"],["option",["u64"]]],["result",["vec"]]]],[11,"get_pinned_messages","","Gets the pinned messages for a given channel.",60,[[["self"],["channelid"]],["result",["vec"]]]],[11,"pin_message","","Pin the given message to the given channel.",60,[[["self"],["channelid"],["messageid"]],["result"]]],[11,"unpin_message","","Removes the given message from being pinned to the given channel.",60,[[["self"],["channelid"],["messageid"]],["result"]]],[11,"send_message","","Send a message to a given channel.",60,[[["self"],["channelid"],["str"],["str"],["bool"]],["result",["message"]]]],[11,"edit_message","","Edit a previously posted message.",60,[[["self"],["channelid"],["messageid"],["str"]],["result",["message"]]]],[11,"delete_message","","Delete a previously posted message.",60,[[["self"],["channelid"],["messageid"]],["result"]]],[11,"delete_messages","","Bulk deletes a list of `MessageId`s from a given channel.",60,N],[11,"send_file","","Send a file attached to a message on a given channel.",60,[[["self"],["channelid"],["str"],["r"],["str"]],["result",["message"]]]],[11,"ack_message","","Acknowledge this message as \"read\" by this client.",60,[[["self"],["channelid"],["messageid"]],["result"]]],[11,"create_permission","","Create permissions for a `Channel` for a `Member` or `Role`.",60,[[["self"],["channelid"],["permissionoverwrite"]],["result"]]],[11,"delete_permission","","Delete a `Member` or `Role`'s permissions for a `Channel`.",60,[[["self"],["channelid"],["permissionoverwritetype"]],["result"]]],[11,"add_reaction","","Add a `Reaction` to a `Message`.",60,[[["self"],["channelid"],["messageid"],["reactionemoji"]],["result"]]],[11,"delete_reaction","","Delete a `Reaction` from a `Message`.",60,[[["self"],["channelid"],["messageid"],["option",["userid"]],["reactionemoji"]],["result"]]],[11,"get_reactions","","Get reactors for the `Emoji` in a `Message`.",60,[[["self"],["channelid"],["messageid"],["reactionemoji"],["option",["i32"]]],["result",["vec"]]]],[11,"get_servers","","Get the list of servers this user knows about.",60,[[["self"]],["result",["vec"]]]],[11,"create_server","","Create a new server with the given name.",60,[[["self"],["str"],["str"],["option",["str"]]],["result",["server"]]]],[11,"edit_server","","Edit a server's information. See `EditServer` for the editable fields.",60,[[["self"],["serverid"],["f"]],["result",["server"]]]],[11,"leave_server","","Leave the given server.",60,[[["self"],["serverid"]],["result",["server"]]]],[11,"delete_server","","Delete the given server. Only available to the server owner.",60,[[["self"],["serverid"]],["result",["server"]]]],[11,"create_emoji","","Creates an emoji in a server.",60,[[["self"],["serverid"],["str"],["str"]],["result",["emoji"]]]],[11,"edit_emoji","","Edits a server's emoji.",60,[[["self"],["serverid"],["emojiid"],["str"]],["result",["emoji"]]]],[11,"delete_emoji","","Delete an emoji in a server.",60,[[["self"],["serverid"],["emojiid"]],["result"]]],[11,"get_bans","","Get the ban list for the given server.",60,[[["self"],["serverid"]],["result",["vec"]]]],[11,"add_ban","","Ban a user from the server, optionally deleting their recent messages.",60,[[["self"],["serverid"],["userid"],["u32"]],["result"]]],[11,"remove_ban","","Unban a user from the server.",60,[[["self"],["serverid"],["userid"]],["result"]]],[11,"get_invite","","Extract information from an invite.",60,[[["self"],["str"]],["result",["invite"]]]],[11,"get_server_invites","","Get the active invites for a server.",60,[[["self"],["serverid"]],["result",["vec"]]]],[11,"get_channel_invites","","Get the active invites for a channel.",60,[[["self"],["channelid"]],["result",["vec"]]]],[11,"accept_invite","","Accept an invite. See `get_invite` for details.",60,[[["self"],["str"]],["result",["invite"]]]],[11,"create_invite","","Create an invite to a channel.",60,[[["self"],["channelid"],["u64"],["u64"],["bool"]],["result",["richinvite"]]]],[11,"delete_invite","","Delete an invite. See `get_invite` for details.",60,[[["self"],["str"]],["result",["invite"]]]],[11,"get_member","","Retrieve a member object for a server given the member's user id.",60,[[["self"],["serverid"],["userid"]],["result",["member"]]]],[11,"edit_member_roles","","Edit the list of roles assigned to a member of a server.",60,N],[11,"edit_member","","Edit member information, including roles, nickname, and voice state.",60,[[["self"],["serverid"],["userid"],["f"]],["result"]]],[11,"kick_member","","Kick a member from a server.",60,[[["self"],["serverid"],["userid"]],["result"]]],[11,"create_private_channel","","Create a private channel with the given user, or return the existing one if it exists.",60,[[["self"],["userid"]],["result",["privatechannel"]]]],[11,"get_user_avatar_url","","Get the URL at which a user's avatar is located.",60,[[["self"],["userid"],["str"]],["string"]]],[11,"get_user_avatar","","Download a user's avatar.",60,[[["self"],["userid"],["str"]],["result",["vec"]]]],[11,"edit_profile","","Edit the logged-in user's profile. See `EditProfile` for editable fields.",60,[[["self"],["f"]],["result",["currentuser"]]]],[11,"get_voice_regions","","Get the list of available voice regions for a server.",60,[[["self"]],["result",["vec"]]]],[11,"move_member_voice","","Move a server member to another voice channel.",60,[[["self"],["serverid"],["userid"],["channelid"]],["result"]]],[11,"begin_server_prune","","Start a prune operation, kicking members who have been inactive for the specified number of days. Members with a role assigned will never be pruned.",60,[[["self"],["serverid"],["u16"]],["result",["serverprune"]]]],[11,"get_server_prune_count","","Get the number of members who have been inactive for the specified number of days and would be pruned by a prune operation. Members with a role assigned will never be pruned.",60,[[["self"],["serverid"],["u16"]],["result",["serverprune"]]]],[11,"edit_note","","Sets a note for the user that is readable only to the currently logged in user.",60,[[["self"],["userid"],["str"]],["result"]]],[11,"get_application_info","","Retrieves information about the application and the owner.",60,[[["self"]],["result",["applicationinfo"]]]],[11,"suggested_shard_count","","Retrieves the number of guild shards Discord suggests to use based on the number of guilds.",60,[[["self"]],["result",["u64"]]]],[11,"connect","","Establish a websocket connection over which events can be received.",60,[[["self"]],["result"]]],[11,"connect_sharded","","Establish a sharded websocket connection over which events can be received.",60,[[["self"],["u8"],["u8"]],["result"]]],[11,"name","","Edit the server's name.",61,[[["self"],["str"]],["self"]]],[11,"region","","Edit the server's voice region.",61,[[["self"],["str"]],["self"]]],[11,"icon","","Edit the server's icon. Use `None` to remove the icon.",61,[[["self"],["option",["str"]]],["self"]]],[11,"afk_channel","","Edit the server's AFK channel. Use `None` to select no AFK channel.",61,[[["self"],["option",["channelid"]]],["self"]]],[11,"afk_timeout","","Edit the server's AFK timeout.",61,[[["self"],["u64"]],["self"]]],[11,"owner","","Transfer ownership of the server to a new owner.",61,[[["self"],["userid"]],["self"]]],[11,"verification_level","","Edit the verification level of the server.",61,[[["self"],["verificationlevel"]],["self"]]],[11,"splash","","Edit the server's splash. Use `None` to remove the splash.",61,[[["self"],["option",["str"]]],["self"]]],[11,"name","","Edit the channel's name.",62,[[["self"],["str"]],["self"]]],[11,"topic","","Edit the text channel's topic.",62,[[["self"],["str"]],["self"]]],[11,"position","","Edit the channel's position in the list.",62,[[["self"],["u64"]],["self"]]],[11,"bitrate","","Edit the voice channel's bitrate.",62,[[["self"],["u64"]],["self"]]],[11,"user_limit","","Edit the voice channel's user limit. Both `None` and `Some(0)` mean \"unlimited\".",62,[[["self"],["u64"]],["self"]]],[11,"nickname","","Edit the member's nickname. Supply the empty string to remove a nickname.",63,[[["self"],["str"]],["self"]]],[11,"mute","","Edit whether the member is server-muted.",63,[[["self"],["bool"]],["self"]]],[11,"deaf","","Edit whether the member is server-deafened.",63,[[["self"],["bool"]],["self"]]],[11,"roles","","Edit the member's assigned roles.",63,N],[11,"channel","","Move the member to another voice channel.",63,[[["self"],["channelid"]],["self"]]],[11,"username","","Edit the user's username. Must be between 2 and 32 characters long.",64,[[["self"],["str"]],["self"]]],[11,"avatar","","Edit the user's avatar. Use `None` to remove the avatar.",64,[[["self"],["option",["str"]]],["self"]]],[11,"password","","Provide the user's current password for authentication. Does not apply to bot accounts, and must be supplied for user accounts.",64,[[["self"],["str"]],["self"]]],[11,"email","","Edit the user's email address. Does not apply to bot accounts.",64,[[["self"],["str"]],["self"]]],[11,"new_password","","Edit the user's password. Does not apply to bot accounts.",64,[[["self"],["str"]],["self"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","discord::model","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","discord::model::permissions","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"clone","discord","",4,[[["self"]],["state"]]],[11,"clone","","",1,[[["self"]],["channelref"]]],[11,"clone","discord::model","",5,[[["self"]],["userid"]]],[11,"clone","","",6,[[["self"]],["serverid"]]],[11,"clone","","",7,[[["self"]],["channelid"]]],[11,"clone","","",8,[[["self"]],["messageid"]]],[11,"clone","","",9,[[["self"]],["roleid"]]],[11,"clone","","",10,[[["self"]],["emojiid"]]],[11,"clone","","",46,[[["self"]],["channeltype"]]],[11,"clone","","",11,[[["self"]],["serverinfo"]]],[11,"clone","","",12,[[["self"]],["server"]]],[11,"clone","","",13,[[["self"]],["serverprune"]]],[11,"clone","","",14,[[["self"]],["role"]]],[11,"clone","","",59,[[["self"]],["ban"]]],[11,"clone","","",15,[[["self"]],["user"]]],[11,"clone","","",16,[[["self"]],["member"]]],[11,"clone","","",47,[[["self"]],["channel"]]],[11,"clone","","",17,[[["self"]],["group"]]],[11,"clone","","",18,[[["self"]],["call"]]],[11,"clone","","",19,[[["self"]],["privatechannel"]]],[11,"clone","","",20,[[["self"]],["publicchannel"]]],[11,"clone","","",48,[[["self"]],["permissionoverwritetype"]]],[11,"clone","","",21,[[["self"]],["permissionoverwrite"]]],[11,"clone","discord::model::permissions","",58,[[["self"]],["permissions"]]],[11,"clone","discord::model","",22,[[["self"]],["attachment"]]],[11,"clone","","",23,[[["self"]],["message"]]],[11,"clone","","",49,[[["self"]],["messagetype"]]],[11,"clone","","",24,[[["self"]],["invite"]]],[11,"clone","","",25,[[["self"]],["richinvite"]]],[11,"clone","","",26,[[["self"]],["voiceregion"]]],[11,"clone","","",27,[[["self"]],["readstate"]]],[11,"clone","","",50,[[["self"]],["onlinestatus"]]],[11,"clone","","",51,[[["self"]],["gametype"]]],[11,"clone","","",28,[[["self"]],["game"]]],[11,"clone","","",29,[[["self"]],["presence"]]],[11,"clone","","",30,[[["self"]],["voicestate"]]],[11,"clone","","",52,[[["self"]],["verificationlevel"]]],[11,"clone","","",31,[[["self"]],["emoji"]]],[11,"clone","","",32,[[["self"]],["reaction"]]],[11,"clone","","",53,[[["self"]],["reactionemoji"]]],[11,"clone","","",33,[[["self"]],["liveserver"]]],[11,"clone","","",54,[[["self"]],["possibleserver"]]],[11,"clone","","",34,[[["self"]],["currentuser"]]],[11,"clone","","",35,[[["self"]],["applicationinfo"]]],[11,"clone","","",55,[[["self"]],["relationshiptype"]]],[11,"clone","","",36,[[["self"]],["relationship"]]],[11,"clone","","",37,[[["self"]],["friendsourceflags"]]],[11,"clone","","",38,[[["self"]],["usersettings"]]],[11,"clone","","",56,[[["self"]],["notificationlevel"]]],[11,"clone","","",39,[[["self"]],["channeloverride"]]],[11,"clone","","",40,[[["self"]],["userserversettings"]]],[11,"clone","","",41,[[["self"]],["tutorial"]]],[11,"clone","","",42,[[["self"]],["maintenance"]]],[11,"clone","","",43,[[["self"]],["incident"]]],[11,"clone","","",44,[[["self"]],["incidentupdate"]]],[11,"clone","","",45,[[["self"]],["readyevent"]]],[11,"clone","","",57,[[["self"]],["event"]]],[11,"extend","discord::model::permissions","",58,[[["self"],["t"]]]],[11,"from","discord","",0,[[["ioerror"]],["error"]]],[11,"from","","",0,[[["hypererror"]],["error"]]],[11,"from","","",0,[[["jsonerror"]],["error"]]],[11,"from","","",0,[[["websocketerror"]],["error"]]],[11,"partial_cmp","discord::model","",5,[[["self"],["userid"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["userid"]],["bool"]]],[11,"le","","",5,[[["self"],["userid"]],["bool"]]],[11,"gt","","",5,[[["self"],["userid"]],["bool"]]],[11,"ge","","",5,[[["self"],["userid"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["serverid"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["serverid"]],["bool"]]],[11,"le","","",6,[[["self"],["serverid"]],["bool"]]],[11,"gt","","",6,[[["self"],["serverid"]],["bool"]]],[11,"ge","","",6,[[["self"],["serverid"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["channelid"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["channelid"]],["bool"]]],[11,"le","","",7,[[["self"],["channelid"]],["bool"]]],[11,"gt","","",7,[[["self"],["channelid"]],["bool"]]],[11,"ge","","",7,[[["self"],["channelid"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["messageid"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["messageid"]],["bool"]]],[11,"le","","",8,[[["self"],["messageid"]],["bool"]]],[11,"gt","","",8,[[["self"],["messageid"]],["bool"]]],[11,"ge","","",8,[[["self"],["messageid"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["roleid"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["roleid"]],["bool"]]],[11,"le","","",9,[[["self"],["roleid"]],["bool"]]],[11,"gt","","",9,[[["self"],["roleid"]],["bool"]]],[11,"ge","","",9,[[["self"],["roleid"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["emojiid"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"le","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"gt","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"ge","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"partial_cmp","discord::model::permissions","",58,[[["self"],["permissions"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["permissions"]],["bool"]]],[11,"le","","",58,[[["self"],["permissions"]],["bool"]]],[11,"gt","","",58,[[["self"],["permissions"]],["bool"]]],[11,"ge","","",58,[[["self"],["permissions"]],["bool"]]],[11,"eq","discord::model","",5,[[["self"],["userid"]],["bool"]]],[11,"ne","","",5,[[["self"],["userid"]],["bool"]]],[11,"eq","","",6,[[["self"],["serverid"]],["bool"]]],[11,"ne","","",6,[[["self"],["serverid"]],["bool"]]],[11,"eq","","",7,[[["self"],["channelid"]],["bool"]]],[11,"ne","","",7,[[["self"],["channelid"]],["bool"]]],[11,"eq","","",8,[[["self"],["messageid"]],["bool"]]],[11,"ne","","",8,[[["self"],["messageid"]],["bool"]]],[11,"eq","","",9,[[["self"],["roleid"]],["bool"]]],[11,"ne","","",9,[[["self"],["roleid"]],["bool"]]],[11,"eq","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"ne","","",10,[[["self"],["emojiid"]],["bool"]]],[11,"eq","","",46,[[["self"],["channeltype"]],["bool"]]],[11,"eq","","",48,[[["self"],["permissionoverwritetype"]],["bool"]]],[11,"ne","","",48,[[["self"],["permissionoverwritetype"]],["bool"]]],[11,"eq","discord::model::permissions","",58,[[["self"],["permissions"]],["bool"]]],[11,"ne","","",58,[[["self"],["permissions"]],["bool"]]],[11,"eq","discord::model","",49,[[["self"],["messagetype"]],["bool"]]],[11,"eq","","",50,[[["self"],["onlinestatus"]],["bool"]]],[11,"eq","","",51,[[["self"],["gametype"]],["bool"]]],[11,"eq","","",52,[[["self"],["verificationlevel"]],["bool"]]],[11,"eq","","",55,[[["self"],["relationshiptype"]],["bool"]]],[11,"eq","","",56,[[["self"],["notificationlevel"]],["bool"]]],[11,"cmp","","",5,[[["self"],["userid"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["serverid"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["channelid"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["messageid"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["roleid"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["emojiid"]],["ordering"]]],[11,"cmp","discord::model::permissions","",58,[[["self"],["permissions"]],["ordering"]]],[11,"hash","discord::model","",5,N],[11,"hash","","",6,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","","",9,N],[11,"hash","","",10,N],[11,"hash","","",46,N],[11,"hash","discord::model::permissions","",58,N],[11,"hash","discord::model","",49,N],[11,"hash","","",50,N],[11,"hash","","",51,N],[11,"hash","","",52,N],[11,"hash","","",55,N],[11,"hash","","",56,N],[11,"fmt","discord","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","discord::model","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","discord","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","discord::model","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","discord::model::permissions","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","discord::model","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"sub","discord::model::permissions","Returns the set difference of the two sets of flags.",58,[[["self"],["permissions"]],["permissions"]]],[11,"sub_assign","","Disables all flags enabled in the set.",58,[[["self"],["permissions"]]]],[11,"not","","Returns the complement of this set of flags.",58,[[["self"]],["permissions"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",58,[[["self"],["permissions"]],["permissions"]]],[11,"bitor","","Returns the union of the two sets of flags.",58,[[["self"],["permissions"]],["permissions"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,[[["self"],["permissions"]],["permissions"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",58,[[["self"],["permissions"]]]],[11,"bitor_assign","","Adds the set of flags.",58,[[["self"],["permissions"]]]],[11,"bitxor_assign","","Toggles the set of flags.",58,[[["self"],["permissions"]]]],[11,"from_iter","","",58,[[["t"]],["permissions"]]],[11,"description","discord","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["stderror"]]]]],"paths":[[4,"Error"],[4,"ChannelRef"],[4,"GetMessages"],[3,"Connection"],[3,"State"],[3,"UserId"],[3,"ServerId"],[3,"ChannelId"],[3,"MessageId"],[3,"RoleId"],[3,"EmojiId"],[3,"ServerInfo"],[3,"Server"],[3,"ServerPrune"],[3,"Role"],[3,"User"],[3,"Member"],[3,"Group"],[3,"Call"],[3,"PrivateChannel"],[3,"PublicChannel"],[3,"PermissionOverwrite"],[3,"Attachment"],[3,"Message"],[3,"Invite"],[3,"RichInvite"],[3,"VoiceRegion"],[3,"ReadState"],[3,"Game"],[3,"Presence"],[3,"VoiceState"],[3,"Emoji"],[3,"Reaction"],[3,"LiveServer"],[3,"CurrentUser"],[3,"ApplicationInfo"],[3,"Relationship"],[3,"FriendSourceFlags"],[3,"UserSettings"],[3,"ChannelOverride"],[3,"UserServerSettings"],[3,"Tutorial"],[3,"Maintenance"],[3,"Incident"],[3,"IncidentUpdate"],[3,"ReadyEvent"],[4,"ChannelType"],[4,"Channel"],[4,"PermissionOverwriteType"],[4,"MessageType"],[4,"OnlineStatus"],[4,"GameType"],[4,"VerificationLevel"],[4,"ReactionEmoji"],[4,"PossibleServer"],[4,"RelationshipType"],[4,"NotificationLevel"],[4,"Event"],[3,"Permissions"],[3,"Ban"],[3,"Discord"],[3,"EditServer"],[3,"EditChannel"],[3,"EditMember"],[3,"EditProfile"],[3,"Mention"]]};
searchIndex["dishub"]={"doc":"dishub is an app for posting GitHub activity on Discord.","items":[[4,"Error","dishub","Enum representing all possible ways the application can fail.",N,N],[13,"OverrideNoForce","","The specified file would need to be overriden but was not allowed to.",0,N],[13,"RequiredFileFromSubsystemNonexistant","","The specified subsystem needs to be run beforehand to produce the specified file.",0,N],[12,"subsys","dishub::Error","The subsystem that needs to be run.",0,N],[12,"fname","","The file the specified subsystem produces.",0,N],[13,"FileParsingFailed","dishub","Failed to parse the specified file because of the specified errors.",0,N],[12,"desc","dishub::Error","The file that failed to parse.",0,N],[12,"errors","","The parsing errors that occured.",0,N],[13,"Io","dishub","An I/O error occured.",0,N],[12,"desc","dishub::Error","The file the I/O operation regards.",0,N],[12,"op","","The failed operation.",0,N],[13,"WatchedDoesNotExist","dishub","A watched item does not exist.",0,N],[12,"tp","dishub::Error","The type of nonexistant resource.",0,N],[12,"name","","The name of the nonexistant resource.",0,N],[13,"LoginFailed","dishub","Failed to log in to the specified service.",0,N],[11,"print_error","","Write the error message to the specified output stream.",0,[[["self"],["w"]]]],[11,"exit_value","","Get the executable exit value from an `Error` instance.",0,[[["self"]],["i32"]]],[0,"ops","","Main functions doing actual work.",N,N],[3,"Feed","dishub::ops","A feed to be checked on GitHub and sent to Discord.",N,N],[12,"subject","","The thing to watch.",1,N],[12,"server","","The Discord server ID to post to.",1,N],[12,"channel","","The Discord channel ID to post to.",1,N],[12,"e_tag","","The ETag of the last received event pack.",1,N],[12,"latest","","The time of the last received event pack.",1,N],[12,"next_min","","The minimal time the next poll is allowed.",1,N],[12,"latest_event","","Latest event's ID, this is required because GH API returns all events despite passing an ETag.",1,N],[3,"AppTokens","","The tokens needed to authenticate the app to GitHub.",N,N],[12,"github","","GitHub OAuth authentication token",2,N],[12,"discord","","Discord bot user token",2,N],[3,"GollumPayload","","A Wiki page affected by a GollumEvent.",N,N],[12,"page_name","","The Wiki page's name.",3,N],[12,"title","","The Wiki page's current title.",3,N],[12,"action","","The action executed upon a Wiki page.",3,N],[12,"sha","","The latest commit SHA of the Wiki page.",3,N],[12,"html_url","","The URL to the Wiki page.",3,N],[3,"Commit","","A Git commit pushed in a PushEvent.",N,N],[12,"sha","","The commit's SHA.",4,N],[12,"message","","The commit message.",4,N],[12,"author_name","","The commit author's name.",4,N],[12,"author_email","","The commit author's e-mail.",4,N],[12,"distinct","","Whether the commit is distinct.",4,N],[3,"Event","","A representation of the GitHub Event API's event.",N,N],[12,"created_at","","The time this event was generated.",5,N],[12,"actor","","The person who triggered the event.",5,N],[12,"repo","","The repository slug where the event is triggered.",5,N],[12,"id","","The event ID.",5,N],[12,"payload","","The event's payload.",5,N],[4,"EventPayload","","A representation of the GitHub Event API's event payload.",N,N],[13,"CommitComment","","A CommitCommentEvent.",6,N],[12,"content","dishub::ops::EventPayload","The comment's body.",6,N],[12,"commit_id","","The commit SHA.",6,N],[12,"id","","The comment's ID.",6,N],[13,"Create","dishub::ops","A CreateEvent.",6,N],[12,"ref_type","dishub::ops::EventPayload","The ref's type.",6,N],[12,"ref_name","","The ref's name.",6,N],[12,"master_branch","","The master branch of the repository.",6,N],[12,"repo_description","","The repository's description (the text right under the tab list).",6,N],[13,"Delete","dishub::ops","A DeleteEvent.",6,N],[12,"ref_type","dishub::ops::EventPayload","The deleted ref's type.",6,N],[12,"ref_name","","The deleted ref's name.",6,N],[13,"Fork","dishub::ops","A ForkEvent.",6,N],[12,"new_slug","dishub::ops::EventPayload","The fork's slug.",6,N],[13,"Gollum","dishub::ops","A GollumEvent (a.k.a. a WikiEvent).",6,N],[12,"pages","dishub::ops::EventPayload","The affected Wiki pages.",6,N],[13,"IssueComment","dishub::ops","An IssueCommentEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a comment.",6,N],[12,"issue","","The issue number.",6,N],[12,"body","","The issue comment's body text.",6,N],[12,"id","","The issue comment's ID.",6,N],[13,"Issues","dishub::ops","An IssuesEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon an issue.",6,N],[12,"number","","The issue number.",6,N],[12,"title","","The issue's title.",6,N],[12,"body","","The issue body's text.",6,N],[12,"labels","","The labels the issue has upon it.",6,N],[13,"Member","dishub::ops","A MemberEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a user.",6,N],[12,"user","","The user the action was performed upon.",6,N],[13,"Public","dishub::ops","A PublicEvent.",6,N],[13,"PullRequest","","A PullRequestEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a PR.",6,N],[12,"number","","The PR number.",6,N],[12,"title","","The PR's title.",6,N],[12,"body","","The PR body's content.",6,N],[12,"merged","","Whether the PR was merged.",6,N],[13,"PullRequestReview","dishub::ops","A PullRequestReviewEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a PR review.",6,N],[12,"pr","","The PR number.",6,N],[12,"state","","The PR review's state.",6,N],[12,"body","","The PR review's body.",6,N],[12,"id","","The PR review's ID.",6,N],[13,"PullRequestReviewComment","dishub::ops","A PullRequestReviewCommentEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a PR review comment.",6,N],[12,"pr","","The PR number.",6,N],[12,"body","","The PR review comment's body.",6,N],[12,"id","","The PR review comment's ID.",6,N],[13,"Push","dishub::ops","A PushEvent.",6,N],[12,"pushed_ref","dishub::ops::EventPayload","The full Git ref pushed to.",6,N],[12,"prev_head","","The previous HEAD's SHA.",6,N],[12,"new_head","","The new HEAD's SHA.",6,N],[12,"size","","The amount of commits pushed.",6,N],[12,"distinct_size","","The amount of distinct commits pushed.",6,N],[12,"commits","","The commits pushed.",6,N],[13,"Release","dishub::ops","A ReleaseEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a release.",6,N],[12,"tag_name","","The released tag's name.",6,N],[12,"target","","The released branch's name.",6,N],[12,"draft","","Whether the release is a draft.",6,N],[12,"prerelease","","Whether the release is a prerelease.",6,N],[12,"name","","The release's custom name.",6,N],[12,"body","","The release's custom body.",6,N],[13,"Watch","dishub::ops","A WatchEvent, or, more aptly, a StarEvent.",6,N],[12,"action","dishub::ops::EventPayload","The action executed upon a repository star.",6,N],[13,"Other","dishub::ops","An unhandled event.",6,N],[12,"event_type","dishub::ops::EventPayload","The event type.",6,N],[11,"new","dishub::ops","Create an unpolled feed with the specified subject and posting target.",1,[[["string"],["u64"],["u64"]],["feed"]]],[11,"read","","Read the application feeds from the specified file.",1,[[["path"]],["result",["vec","error"]]]],[11,"write","","Save the application feeds to the specified file.",1,[[["vec",["feed"]],["path"]]]],[11,"poll","","",1,[[["self"],["apptokens"]],["result",["vec","error"]]]],[11,"parse","","Parse a raw JSON GitHub Events API response.",5,[[["str"]],["vec",["event"]]]],[11,"urls","","Get the reference URLs for an event.",5,[[["self"]],["vec",["string"]]]],[11,"from","","Parse the payload from the `payload` key of the event and the type.",6,[[["str"],["jsonvalue"]],["eventpayload"]]],[11,"read","","Read the application GitHub tokens from the specified file.",2,[[["path"]],["result",["apptokens","error"]]]],[11,"write","","Save the application GitHub tokens to the specified file.",2,[[["self"],["path"]]]],[0,"init","","This module contains the functions used only by the `init` subsystem.",N,N],[5,"verify","dishub::ops::init","Verify if, given the current configuration, it's permitted to continue with the subsequent steps of the `init` subsystem.",N,N],[5,"get_data","","Prompt the user for application data.",N,[[["r"],["w"]],["apptokens"]]],[0,"github","dishub::ops","This module contains functions which interface with the GitHub API.",N,N],[5,"user_exists","dishub::ops::github","Check whether a user with the specified name exists.",N,[[["str"],["apptokens"]],["result",["bool","error"]]]],[5,"repo_exists","","Check whether a repository with the specified slug exists.",N,[[["str"],["apptokens"]],["result",["bool","error"]]]],[5,"poll_user_events_new","","Get the events for a user when you don't have an ETag (which is to say - for the first time).",N,[[["str"],["apptokens"]],["result",["error"]]]],[5,"poll_repo_events_new","","Get the events for a repository when you don't have an ETag (which is to say - for the first time).",N,[[["str"],["apptokens"]],["result",["error"]]]],[5,"poll_user_events_update","","Get the events for a user when you already have an ETag (which is to say - after the first time).",N,[[["str"],["str"],["apptokens"]],["result",["error"]]]],[5,"poll_repo_events_update","","Get the events for a repository when you already have an ETag (which is to say - after the first time).",N,[[["str"],["str"],["apptokens"]],["result",["error"]]]],[0,"add_feeds","dishub::ops","This module contains the functions used only by the `add_feeds` subsystem.",N,N],[5,"verify","dishub::ops::add_feeds","Verify if, given the current configuration, it's permitted to continue with the subsequent steps of the `add_feeds` subsystem.",N,N],[5,"get_watch_subject","","Prompt the user for the subject to watch.",N,[[["r"],["w"]],["string"]]],[5,"verify_subject","","Verify, whether the subject exists.",N,[[["str"],["apptokens"]],["result",["error"]]]],[5,"known_servers","","Get all servers the bot is invited to.",N,[[["apptokens"]],["result",["vec","error"]]]],[5,"get_valid_server","","Prompt the user to choose a server to post in, given a list of servers.",N,[[["vec"],["r"],["w"]],["u64"]]],[5,"channels_in_server","","List the channels in the specified server.",N,[[["apptokens"],["u64"]],["result",["vec","error"]]]],[5,"get_valid_channel","","Prompt the user to choose a channel to post in, given a list of channels.",N,[[["vec"],["r"],["w"]],["u64"]]],[0,"start_daemon","dishub::ops","This module contains the functions used only by the `start_daemon` subsystem.",N,N],[5,"verify","dishub::ops::start_daemon","Verify if, given the current configuration, it's permitted to continue with the subsequent steps of the `start_daemon` subsystem.",N,N],[5,"feeds_filter","","A filter function to use upon feeds to be polled.",N,[[["w"],["feed"]],["bool"]]],[5,"post_text","","Create a Discord message body from an event.",N,[[["event"]],["string"]]],[5,"send_messages","","Post the specified messages to a Discord channel.",N,[[["apptokens"],["vec",["string"]],["u64"]],["result",["error"]]]],[0,"unfollow_feeds","dishub::ops","This module contains the functions used only by the `unfollow_feeds` subsystem.",N,N],[5,"verify","dishub::ops::unfollow_feeds","Verify if, given the current configuration, it's permitted to continue with the subsequent steps of the `unfollow_feeds` subsystem.",N,N],[5,"print_feeds","","Print the subscribed-to feeds in a human-readable format.",N,N],[5,"get_feeds_to_remove","","Prompt the user for the feed subjects to sunsubscribe from.",N,N],[0,"util","dishub","Module containing various utility functions.",N,N],[5,"uppercase_first","dishub::util","Uppercase the first character of the supplied string.",N,[[["str"]],["string"]]],[5,"mul_str","","Create a string consisting of `n` repetitions of `what`.",N,[[["str"],["usize"]],["string"]]],[5,"prompt_exact_len","","Ask the user to input a string of the exact length of `desired_len`, (re)prompting as necessary.",N,[[["r"],["w"],["str"],["f"],["usize"]],["ioresult",["string"]]]],[5,"prompt_nonzero_len","","Ask the user to input a string of non-zero length, (re)prompting as necessary.",N,[[["r"],["w"],["str"],["f"]],["ioresult",["string"]]]],[5,"prompt_any_len","","Ask the user to input a string of any length after printing a prompt prompting.",N,[[["r"],["w"],["str"],["f"]],["ioresult",["option"]]]],[5,"prompt_multiline","","Ask the user to input a multiline string, (re)prompting as necessary.",N,[[["r"],["w"],["str"],["f"]],["ioresult",["string"]]]],[7,"GITHUB_USER_AGENT","","The User-Agent to use when authenticating to the GitHub API.",N,N],[0,"options","dishub","This module contains the configuration of the application.",N,N],[3,"Options","dishub::options","Representation of the application's all configurable values.",N,N],[12,"config_dir","","Directory containing configuration. Default: `\"$HOME/.dishub\"`",7,N],[12,"subsystem","","The specified subsystem.",7,N],[4,"Subsystem","","All possible subsystems, think `cargo`'s or `git`'s.",N,N],[13,"Init","","Initialise global app data",8,N],[12,"force","dishub::options::Subsystem","Whether to override current app configuration. Default: `false`",8,N],[13,"AddFeeds","dishub::options","Add feeds to post to servers",8,N],[13,"UnfollowFeeds","","Unsubscribe from selected followed feeds",8,N],[13,"StartDaemon","","Run the activity-posting daemon",8,N],[12,"sleep","dishub::options::Subsystem","How long to sleep between each iteration. Default: 1 minute",8,N],[11,"parse","dishub::options","Parse `env`-wide command-line arguments into an `Options` instance",7,[[],["options"]]],[11,"from","dishub","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","dishub::ops","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","dishub::options","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"clone","dishub","",0,[[["self"]],["error"]]],[11,"clone","dishub::ops","",1,[[["self"]],["feed"]]],[11,"clone","","",5,[[["self"]],["event"]]],[11,"clone","","",6,[[["self"]],["eventpayload"]]],[11,"clone","","",3,[[["self"]],["gollumpayload"]]],[11,"clone","","",4,[[["self"]],["commit"]]],[11,"clone","","",2,[[["self"]],["apptokens"]]],[11,"clone","dishub::options","",8,[[["self"]],["subsystem"]]],[11,"clone","","",7,[[["self"]],["options"]]],[11,"eq","dishub","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","dishub::ops","",1,[[["self"],["feed"]],["bool"]]],[11,"ne","","",1,[[["self"],["feed"]],["bool"]]],[11,"eq","","",5,[[["self"],["event"]],["bool"]]],[11,"ne","","",5,[[["self"],["event"]],["bool"]]],[11,"eq","","",6,[[["self"],["eventpayload"]],["bool"]]],[11,"ne","","",6,[[["self"],["eventpayload"]],["bool"]]],[11,"eq","","",3,[[["self"],["gollumpayload"]],["bool"]]],[11,"ne","","",3,[[["self"],["gollumpayload"]],["bool"]]],[11,"eq","","",4,[[["self"],["commit"]],["bool"]]],[11,"ne","","",4,[[["self"],["commit"]],["bool"]]],[11,"eq","","",2,[[["self"],["apptokens"]],["bool"]]],[11,"ne","","",2,[[["self"],["apptokens"]],["bool"]]],[11,"eq","dishub::options","",8,[[["self"],["subsystem"]],["bool"]]],[11,"ne","","",8,[[["self"],["subsystem"]],["bool"]]],[11,"eq","","",7,[[["self"],["options"]],["bool"]]],[11,"ne","","",7,[[["self"],["options"]],["bool"]]],[11,"hash","dishub","",0,N],[11,"hash","dishub::ops","",1,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"hash","","",2,N],[11,"hash","dishub::options","",8,N],[11,"hash","","",7,N],[11,"fmt","dishub::ops","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","dishub","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","dishub::ops","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","dishub::options","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"encode","dishub::ops","",2,[[["self"],["__s"]],["result"]]],[11,"decode","","",2,[[["__d"]],["result",["apptokens"]]]]],"paths":[[4,"Error"],[3,"Feed"],[3,"AppTokens"],[3,"GollumPayload"],[3,"Commit"],[3,"Event"],[4,"EventPayload"],[3,"Options"],[4,"Subsystem"]]};
searchIndex["dtoa"]={"doc":"","items":[[5,"write","dtoa","",N,[[["w"],["v"]],["result"]]],[8,"Floating","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result"]]],[14,"diyfp","","",N,N],[14,"dtoa","","",N,N]],"paths":[[8,"Floating"]]};
searchIndex["flate2"]={"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",N,N],[3,"GzHeader","","A structure representing the header of a gzip stream.",N,N],[3,"Compress","","Raw in-memory compression stream for blocks of data.",N,N],[3,"DataError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",N,N],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",N,N],[3,"Crc","","The CRC calculated by a [`CrcReader`].",N,N],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",N,N],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or decompressing in-memory data.",N,N],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",0,N],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",0,N],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",0,N],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the output is not aligned on a byte boundary and up to seven vits of the current block are held to be written as the next byte after the next deflate block is completed.",0,N],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",0,N],[13,"Finish","","Pending input is processed and pending output is flushed.",0,N],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",N,N],[13,"Ok","","Indicates success.",1,N],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",1,N],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",1,N],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",N,N],[13,"None","","No compression is to be performed, this may actually inflate data slightly when encoding.",2,N],[13,"Fast","","Optimize for the best speed of encoding.",2,N],[13,"Best","","Optimize for the size of data being encoded.",2,N],[13,"Default","","Choose the default compression, a balance between speed and size.",2,N],[11,"new","","Create a new CRC.",3,[[],["crc"]]],[11,"sum","","bla",3,[[["self"]],["u32"]]],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 2^32.",3,[[["self"]],["u32"]]],[11,"update","","Update the CRC with the bytes in `data`.",3,N],[11,"reset","","Reset the CRC.",3,[[["self"]]]],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,[[["self"],["crc"]]]],[11,"new","","Create a new CrcReader.",4,[[["r"]],["crcreader"]]],[11,"crc","","Get the Crc for this CrcReader.",4,[[["self"]],["crc"]]],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,[[["self"]],["r"]]],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,[[["self"]],["r"]]],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,[[["self"]],["r"]]],[11,"reset","","Reset the Crc in this CrcReader.",4,[[["self"]]]],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,[[["self"]],["option"]]],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,[[["self"]],["option"]]],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,[[["self"]],["option"]]],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,[[["self"]],["u32"]]],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,[[["self"]],["option",["systemtime"]]]],[11,"new","","Create a new blank builder with no header by default.",6,[[],["builder"]]],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,[[["self"],["u32"]],["builder"]]],[11,"extra","","Configure the `extra` field in the gzip header.",6,[[["self"],["t"]],["builder"]]],[11,"filename","","Configure the `filename` field in the gzip header.",6,[[["self"],["t"]],["builder"]]],[11,"comment","","Configure the `comment` field in the gzip header.",6,[[["self"],["t"]],["builder"]]],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,[[["self"],["w"],["compression"]],["gzencoder"]]],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,[[["self"],["r"],["compression"]],["gzencoder"]]],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,[[["self"],["r"],["compression"]],["gzencoder"]]],[11,"new","","Creates a new object ready for compressing data that it's given.",7,[[["compression"],["bool"]],["compress"]]],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,[[["self"]],["u64"]]],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,[[["self"]]]],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,N],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,N],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,[[["bool"]],["decompress"]]],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,[[["self"]],["u64"]]],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,N],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,N],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,[[["self"],["bool"]]]],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",N,N],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",N,N],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",N,N],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",N,N],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",N,N],[3,"GzEncoder","","A gzip streaming encoder",N,N],[3,"GzDecoder","","A gzip streaming decoder",N,N],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",N,N],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",N,N],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",N,N],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",N,N],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",N,N],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",N,N],[3,"GzEncoder","","A gzip streaming encoder",N,N],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",N,N],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",N,N],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",N,N],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",N,N],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",N,N],[3,"GzEncoder","","A gzip streaming encoder",N,N],[3,"GzDecoder","","A gzip streaming decoder",N,N],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",N,N],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",N,N],[11,"gz_encode","","Consume this reader to create a compression stream at the specified compression level.",9,[[["self"],["compression"]],["gzencoder"]]],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",9,[[["self"]],["result",["gzdecoder"]]]],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified compression level.",9,[[["self"],["compression"]],["zlibencoder"]]],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",9,[[["self"]],["zlibdecoder"]]],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified compression level.",9,[[["self"],["compression"]],["deflateencoder"]]],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",9,[[["self"]],["deflatedecoder"]]],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",N,N],[11,"gz_encode","","Consume this writer to create a compression stream at the specified compression level.",10,[[["self"],["compression"]],["gzencoder"]]],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified compression level.",10,[[["self"],["compression"]],["zlibencoder"]]],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",10,[[["self"]],["zlibdecoder"]]],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified compression level.",10,[[["self"],["compression"]],["deflateencoder"]]],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",10,[[["self"]],["deflatedecoder"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","flate2::bufread","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","flate2::read","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","flate2::write","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","flate2::bufread","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","flate2::read","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","flate2::write","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","flate2::bufread","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","flate2::read","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","flate2::write","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"clone","flate2","",0,[[["self"]],["flush"]]],[11,"clone","","",1,[[["self"]],["status"]]],[11,"clone","","",2,[[["self"]],["compression"]]],[11,"drop","flate2::write","",24,[[["self"]]]],[11,"default","flate2","",2,[[],["compression"]]],[11,"eq","","",5,[[["self"],["header"]],["bool"]]],[11,"ne","","",5,[[["self"],["header"]],["bool"]]],[11,"eq","","",0,[[["self"],["flush"]],["bool"]]],[11,"eq","","",1,[[["self"],["status"]],["bool"]]],[11,"eq","","",2,[[["self"],["compression"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::bufread","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::read","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::write","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::bufread","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::read","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::write","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::bufread","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::read","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2::write","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","flate2","",2,[[["self"],["formatter"]],["result"]]],[11,"fill_buf","","",4,[[["self"]],["result"]]],[11,"consume","","",4,[[["self"],["usize"]]]],[11,"write","flate2::bufread","",12,N],[11,"flush","","",12,[[["self"]],["result"]]],[11,"write","","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[11,"write","flate2::read","",14,N],[11,"flush","","",14,[[["self"]],["result"]]],[11,"write","","",15,N],[11,"flush","","",15,[[["self"]],["result"]]],[11,"write","flate2::write","",16,N],[11,"flush","","",16,[[["self"]],["result"]]],[11,"write","","",17,N],[11,"flush","","",17,[[["self"]],["result"]]],[11,"write","flate2::bufread","",18,N],[11,"flush","","",18,[[["self"]],["result"]]],[11,"write","","",19,N],[11,"flush","","",19,[[["self"]],["result"]]],[11,"write","","",20,N],[11,"flush","","",20,[[["self"]],["result"]]],[11,"write","flate2::read","",21,N],[11,"flush","","",21,[[["self"]],["result"]]],[11,"write","","",22,N],[11,"flush","","",22,[[["self"]],["result"]]],[11,"write","","",23,N],[11,"flush","","",23,[[["self"]],["result"]]],[11,"write","flate2::write","",24,N],[11,"flush","","",24,[[["self"]],["result"]]],[11,"write","flate2::bufread","",25,N],[11,"flush","","",25,[[["self"]],["result"]]],[11,"write","","",26,N],[11,"flush","","",26,[[["self"]],["result"]]],[11,"write","flate2::read","",27,N],[11,"flush","","",27,[[["self"]],["result"]]],[11,"write","","",28,N],[11,"flush","","",28,[[["self"]],["result"]]],[11,"write","flate2::write","",29,N],[11,"flush","","",29,[[["self"]],["result"]]],[11,"write","","",30,N],[11,"flush","","",30,[[["self"]],["result"]]],[11,"read","flate2","",4,N],[11,"read","flate2::bufread","",12,N],[11,"read","","",13,N],[11,"read","flate2::read","",14,N],[11,"read","","",15,N],[11,"read","flate2::write","",16,N],[11,"read","","",17,N],[11,"read","flate2::bufread","",18,N],[11,"read","","",19,N],[11,"read","","",20,N],[11,"read","flate2::read","",21,N],[11,"read","","",22,N],[11,"read","","",23,N],[11,"read","flate2::write","",24,N],[11,"read","flate2::bufread","",25,N],[11,"read","","",26,N],[11,"read","flate2::read","",27,N],[11,"read","","",28,N],[11,"read","flate2::write","",29,N],[11,"read","","",30,N],[11,"description","flate2","",11,[[["self"]],["str"]]],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,[[["r"],["compression"]],["deflateencoder"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying reader",12,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,[[["self"]],["r"]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,[[["r"]],["deflatedecoder"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,[[["self"],["r"]],["r"]]],[11,"reset_data","","Resets the state of this decoder's data",13,[[["self"]]]],[11,"get_ref","","Acquires a reference to the underlying stream",13,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,[[["self"]],["u64"]]],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,[[["r"],["compression"]],["deflateencoder"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying reader",14,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,[[["self"]],["r"]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,[[["r"]],["deflatedecoder"]]],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,[[["r"],["vec",["u8"]]],["deflatedecoder"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying stream",15,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,[[["self"]],["u64"]]],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,[[["w"],["compression"]],["deflateencoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",16,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,[[["self"]],["w"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,[[["self"],["w"]],["result"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,[[["self"]],["result"]]],[11,"finish","","Consumes this encoder, flushing the output stream.",16,[[["self"]],["result"]]],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,[[["self"]],["result"]]],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,[[["w"]],["deflatedecoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",17,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,[[["self"]],["w"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,[[["self"],["w"]],["result"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,[[["self"]],["result"]]],[11,"finish","","Consumes this encoder, flushing the output stream.",17,[[["self"]],["result"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,[[["self"]],["u64"]]],[11,"new","flate2::bufread","Creates a new encoder which will use the given compression level.",18,[[["r"],["compression"]],["gzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",18,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,[[["self"]],["r"]]],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,[[["self"]],["r"]]],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,[[["r"]],["result",["gzdecoder"]]]],[11,"header","","Returns the header associated with this stream.",19,[[["self"]],["header"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",19,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,[[["self"]],["r"]]],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,[[["r"]],["result",["multigzdecoder"]]]],[11,"header","","Returns the current header associated with this stream.",20,[[["self"]],["header"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",20,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,[[["self"]],["r"]]],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",21,[[["r"],["compression"]],["gzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",21,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,[[["self"]],["r"]]],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,[[["self"]],["r"]]],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,[[["r"]],["result",["gzdecoder"]]]],[11,"header","","Returns the header associated with this stream.",22,[[["self"]],["header"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",22,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,[[["self"]],["r"]]],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,[[["r"]],["result",["multigzdecoder"]]]],[11,"header","","Returns the current header associated with this stream.",23,[[["self"]],["header"]]],[11,"get_ref","","Acquires a reference to the underlying reader.",23,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,[[["self"]],["r"]]],[11,"new","flate2::write","Creates a new encoder which will use the given compression level.",24,[[["w"],["compression"]],["gzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",24,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,[[["self"]],["w"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,[[["self"]],["result"]]],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,[[["self"]],["result"]]],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,[[["r"],["compression"]],["zlibencoder"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying reader",25,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,[[["self"]],["r"]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,[[["r"]],["zlibdecoder"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying stream",26,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,[[["self"]],["u64"]]],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,[[["r"],["compression"]],["zlibencoder"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying stream",27,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,[[["self"]],["r"]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,[[["r"]],["zlibdecoder"]]],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,[[["r"],["vec",["u8"]]],["zlibdecoder"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,[[["self"],["r"]],["r"]]],[11,"get_ref","","Acquires a reference to the underlying stream",28,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,[[["self"]],["u64"]]],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,[[["w"],["compression"]],["zlibencoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",29,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,[[["self"]],["w"]]],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,[[["self"],["w"]],["result"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,[[["self"]],["result"]]],[11,"finish","","Consumes this encoder, flushing the output stream.",29,[[["self"]],["result"]]],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,[[["self"]],["result"]]],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,[[["self"]],["u64"]]],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,[[["w"]],["zlibdecoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",30,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,[[["self"]],["w"]]],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,[[["self"],["w"]],["result"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,[[["self"]],["result"]]],[11,"finish","","Consumes this encoder, flushing the output stream.",30,[[["self"]],["result"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,[[["self"]],["u64"]]]],"paths":[[4,"Flush"],[4,"Status"],[4,"Compression"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DataError"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["hpack"]={"doc":"A module implementing HPACK functionality. Exposes a simple API for performing the encoding and decoding of header sets, according to the HPACK spec.","items":[[0,"encoder","hpack","Implements all functionality related to encoding header blocks using HPACK.",N,N],[3,"Encoder","hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets and tracks the encoding context. That is, encoding subsequent header sets will use the context built by previous encode calls.",N,N],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",N,[[["usize"],["u8"]],["vec",["u8"]]]],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the HPACK spec (Appendix A).",0,[[],["encoder"]]],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly allocated `Vec` containing the bytes representing the encoded header set.",0,[[["self"],["vec"]],["vec",["u8"]]]],[0,"decoder","hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to be decoded into a header list.",N,N],[3,"Decoder","hpack::decoder","Decodes headers encoded using HPACK.",N,N],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an integer.",N,N],[13,"TooManyOctets","","5.1. specifies that \"excessively large integer decodings\" MUST be considered an error (whether the size is the number of octets or value). This variant corresponds to the encoding containing too many octets.",1,N],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer being decoded exceeds a certain threshold.",1,N],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does not contain enough octets to complete the decoding.",1,N],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",1,N],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet string.",N,N],[13,"NotEnoughOctets","","",2,N],[13,"HuffmanDecoderError","","",2,N],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding of an HPACK header set.",N,N],[13,"HeaderIndexOutOfBounds","","",3,N],[13,"IntegerDecodingError","","",3,N],[13,"StringDecodingError","","",3,N],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max size mandated to the decoder by the protocol. (by perfroming changes made by SizeUpdate blocks).",3,N],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",N,N],[11,"new","","Creates a new `Decoder` with all settings set to default values.",4,[[],["decoder"]]],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",4,[[["self"],["usize"]]]],[11,"decode","","Decode the header block found in the given buffer.",4,N],[0,"huffman","hpack","A module exposing utilities for encoding and decoding Huffman-coded octet strings, under the Huffman code defined by HPACK. (HPACK-draft-10, Appendix B)",N,N],[3,"HuffmanDecoder","hpack::huffman","A simple implementation of a Huffman code decoder.",N,N],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",N,N],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",5,N],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of EOS MUST be interpreted as an error.",5,N],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",5,N],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the `HuffmanDecoder`.",N,N],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as defined in the HPACK-draft-10, Appendix B.",6,[[],["huffmandecoder"]]],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",6,N],[11,"from","hpack::encoder","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","hpack::decoder","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","hpack::huffman","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"clone","hpack::decoder","",1,[[["self"]],["integerdecodingerror"]]],[11,"clone","","",2,[[["self"]],["stringdecodingerror"]]],[11,"clone","","",3,[[["self"]],["decodererror"]]],[11,"clone","hpack::huffman","",5,[[["self"]],["huffmandecodererror"]]],[11,"eq","hpack::decoder","",1,[[["self"],["integerdecodingerror"]],["bool"]]],[11,"eq","","",2,[[["self"],["stringdecodingerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["stringdecodingerror"]],["bool"]]],[11,"eq","","",3,[[["self"],["decodererror"]],["bool"]]],[11,"ne","","",3,[[["self"],["decodererror"]],["bool"]]],[11,"eq","hpack::huffman","",5,[[["self"],["huffmandecodererror"]],["bool"]]],[11,"fmt","hpack::decoder","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","hpack::huffman","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"]]};
searchIndex["httparse"]={"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",N,N],[3,"Request","","A parsed Request.",N,N],[12,"method","","The request method, such as `GET`.",0,N],[12,"path","","The request path, such as `/about-us`.",0,N],[12,"version","","The request version, such as `HTTP/1.1`.",0,N],[12,"headers","","The request headers.",0,N],[3,"Response","","A parsed Response.",N,N],[12,"version","","The response version, such as `HTTP/1.1`.",1,N],[12,"code","","The response code, such as `200`.",1,N],[12,"reason","","The response reason-phrase, such as `OK`.",1,N],[12,"headers","","The response headers.",1,N],[3,"Header","","Represents a parsed header.",N,N],[12,"name","","The name portion of a header.",2,N],[12,"value","","The value portion of a header.",2,N],[4,"Error","","An error in parsing.",N,N],[13,"HeaderName","","Invalid byte in header name.",3,N],[13,"HeaderValue","","Invalid byte in header value.",3,N],[13,"NewLine","","Invalid byte in new line.",3,N],[13,"Status","","Invalid byte in Response status.",3,N],[13,"Token","","Invalid byte where token is required.",3,N],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,N],[13,"Version","","Invalid byte in HTTP version.",3,N],[4,"Status","","The result of a successful parse pass.",N,N],[13,"Complete","","The completed result.",4,N],[13,"Partial","","A partial result.",4,N],[5,"parse_headers","","Parse a buffer of bytes as headers.",N,N],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",N,N],[6,"Result","","A Result of any parsing action.",N,N],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",N,N],[11,"is_complete","","Convenience method to check if status is complete.",4,[[["self"]],["bool"]]],[11,"is_partial","","Convenience method to check if status is partial.",4,[[["self"]],["bool"]]],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,[[["self"]],["t"]]],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,N],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,N],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,N],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"clone","","",4,[[["self"]],["status"]]],[11,"clone","","",2,[[["self"]],["header"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"eq","","",5,[[["self"],["invalidchunksize"]],["bool"]]],[11,"eq","","",4,[[["self"],["status"]],["bool"]]],[11,"ne","","",4,[[["self"],["status"]],["bool"]]],[11,"eq","","",0,[[["self"],["request"]],["bool"]]],[11,"ne","","",0,[[["self"],["request"]],["bool"]]],[11,"eq","","",1,[[["self"],["response"]],["bool"]]],[11,"ne","","",1,[[["self"],["response"]],["bool"]]],[11,"eq","","",2,[[["self"],["header"]],["bool"]]],[11,"ne","","",2,[[["self"],["header"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"]={"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",N,N],[3,"LanguageTag","","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[0,"client","","HTTP Client",N,N],[3,"ProxyConfig","hyper::client","Proxy server configuration with a custom TLS wrapper.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[12,"2","","",1,N],[3,"Client","","A Client to use additional features with Requests.",N,N],[3,"RequestBuilder","","Options for an individual Request.",N,N],[4,"Body","","An enum of possible body types for a Request.",N,N],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",2,N],[13,"SizedBody","","For Readers that can know their size, like a `File`.",2,N],[13,"BufBody","","A String has a size, and uses Content-Length.",2,N],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",N,N],[13,"FollowNone","","Don't follow any redirects.",3,N],[13,"FollowAll","","Follow all redirects.",3,N],[13,"FollowIf","","Follow a redirect if the contained function returns true.",3,N],[0,"pool","","Client Connection Pooling",N,N],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",N,N],[3,"Config","","Config options for the `Pool`.",N,N],[12,"max_idle","","The maximum idle connections per host.",4,N],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",N,N],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",5,[[["config"]],["pool",["defaultconnector"]]]],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",5,[[["config"],["c"]],["pool"]]],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",5,[[["self"]]]],[11,"into_inner","","Take the wrapped stream out of the pool completely.",6,[[["self"]],["s"]]],[0,"request","hyper::client","Client Requests",N,N],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",N,N],[12,"url","","The target URI for this request.",7,N],[12,"version","","The HTTP version of this request.",7,N],[11,"headers","","Read the Request headers.",7,[[["self"]],["headers"]]],[11,"method","","Read the Request method.",7,[[["self"]],["method"]]],[11,"set_write_timeout","","Set the write timeout.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"set_read_timeout","","Set the read timeout.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",7,[[["method"],["url"],["box",["httpmessage"]]],["result",["request"]]]],[11,"new","","Create a new client request.",7,[[["method"],["url"]],["result",["request"]]]],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",7,[[["method"],["url"],["c"]],["result",["request"]]]],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",7,[[["self"]],["result",["request"]]]],[11,"headers_mut","","Get a mutable reference to the Request headers.",7,[[["self"]],["headers"]]],[11,"send","","Completes writing the request, and returns a response to read from.",7,[[["self"]],["result",["response"]]]],[0,"response","hyper::client","Client Responses",N,N],[3,"Response","hyper::client::response","A response for a client request to a remote server.",N,N],[12,"status","","The status from the server.",8,N],[12,"headers","","The headers from the server.",8,N],[12,"version","","The HTTP version of this response from the server.",8,N],[12,"url","","The final URL of this response.",8,N],[11,"new","","Creates a new response from a server.",8,[[["url"],["box",["networkstream"]]],["result",["response"]]]],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",8,[[["url"],["box",["httpmessage"]]],["result",["response"]]]],[11,"status_raw","","Get the raw status code and reason.",8,[[["self"]],["rawstatus"]]],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",N,N],[10,"into_url","","Consumes the object, trying to return a Url.",9,[[["self"]],["result",["url","urlerror"]]]],[11,"new","","Create a new Client.",10,[[],["client"]]],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",10,[[["config"]],["client"]]],[11,"with_http_proxy","","",10,[[["h"],["u16"]],["client"]]],[11,"with_proxy_config","","",10,[[["proxyconfig"]],["client"]]],[11,"with_connector","","Create a new client with a specific connector.",10,[[["c"]],["client"]]],[11,"with_protocol","","Create a new client with a specific `Protocol`.",10,[[["p"]],["client"]]],[11,"set_redirect_policy","","Set the RedirectPolicy.",10,[[["self"],["redirectpolicy"]]]],[11,"set_read_timeout","","Set the read timeout value for all requests.",10,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Set the write timeout value for all requests.",10,[[["self"],["option",["duration"]]]]],[11,"get","","Build a Get request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"head","","Build a Head request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"patch","","Build a Patch request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"post","","Build a Post request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"put","","Build a Put request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"delete","","Build a Delete request.",10,[[["self"],["u"]],["requestbuilder"]]],[11,"request","","Build a new request using this Client.",10,[[["self"],["method"],["u"]],["requestbuilder"]]],[11,"body","","Set a request body to be sent.",11,[[["self"],["b"]],["requestbuilder"]]],[11,"headers","","Add additional headers to the request.",11,[[["self"],["headers"]],["requestbuilder"]]],[11,"header","","Add an individual new header to the request.",11,[[["self"],["h"]],["requestbuilder"]]],[11,"send","","Execute this request and receive a Response back.",11,[[["self"]],["result",["response"]]]],[0,"error","hyper","Error and Result module.",N,N],[4,"ParseError","hyper::error","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",12,N],[13,"IdnaError","","",12,N],[13,"InvalidPort","","",12,N],[13,"InvalidIpv4Address","","",12,N],[13,"InvalidIpv6Address","","",12,N],[13,"InvalidDomainCharacter","","",12,N],[13,"RelativeUrlWithoutBase","","",12,N],[13,"RelativeUrlWithCannotBeABaseBase","","",12,N],[13,"SetHostOnCannotBeABaseUrl","","",12,N],[13,"Overflow","","",12,N],[4,"Error","","A set of errors that can occur parsing HTTP streams.",N,N],[13,"Method","","An invalid `Method`, such as `GE,T`.",13,N],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",13,N],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",13,N],[13,"Header","","An invalid `Header`.",13,N],[13,"TooLarge","","A message head is too large to be reasonable.",13,N],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",13,N],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",13,N],[13,"Ssl","","An error from a SSL library.",13,N],[13,"Http2","","An HTTP/2-specific error, coming from the `solicit` library.",13,N],[13,"Utf8","","Parsing a field as string failed",13,N],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",N,N],[0,"method","hyper","The HTTP request method",N,N],[4,"Method","hyper::method","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",14,N],[13,"Get","","GET",14,N],[13,"Post","","POST",14,N],[13,"Put","","PUT",14,N],[13,"Delete","","DELETE",14,N],[13,"Head","","HEAD",14,N],[13,"Trace","","TRACE",14,N],[13,"Connect","","CONNECT",14,N],[13,"Patch","","PATCH",14,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",14,N],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",14,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",14,[[["self"]],["bool"]]],[0,"header","hyper","Headers container, and common header fields.",N,N],[3,"CookiePair","hyper::header","",N,N],[12,"name","","",15,N],[12,"value","","",15,N],[12,"expires","","",15,N],[12,"max_age","","",15,N],[12,"domain","","",15,N],[12,"path","","",15,N],[12,"secure","","",15,N],[12,"httponly","","",15,N],[12,"custom","","",15,N],[3,"CookieJar","","A jar of cookies for managing a session",N,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",16,N],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",17,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",18,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",19,N],[12,"quality","","The quality (client or server preference) for the value.",19,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",20,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",21,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",22,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",23,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",24,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",25,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",26,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",27,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",28,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",29,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",30,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",31,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",32,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",33,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",34,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",35,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",36,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",37,N],[12,"parameters","","Disposition parameters",37,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",38,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",39,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",40,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",41,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",42,N],[3,"Cookie","","`Cookie` header, defined in RFC6265",N,N],[12,"0","","",43,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",44,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",45,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",46,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",47,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",48,N],[12,"port","","An optional port number.",48,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",49,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",50,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",51,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",52,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",53,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",54,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",55,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",56,N],[3,"Server","","`Server` header, defined in RFC7231",N,N],[12,"0","","",57,N],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",N,N],[12,"0","","",58,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",60,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",61,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",62,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",63,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",N,N],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",N,N],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",N,N],[12,"0","","",64,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",65,N],[13,"Iso_8859_1","","ISO-8859-1",65,N],[13,"Iso_8859_2","","ISO-8859-2",65,N],[13,"Iso_8859_3","","ISO-8859-3",65,N],[13,"Iso_8859_4","","ISO-8859-4",65,N],[13,"Iso_8859_5","","ISO-8859-5",65,N],[13,"Iso_8859_6","","ISO-8859-6",65,N],[13,"Iso_8859_7","","ISO-8859-7",65,N],[13,"Iso_8859_8","","ISO-8859-8",65,N],[13,"Iso_8859_9","","ISO-8859-9",65,N],[13,"Iso_8859_10","","ISO-8859-10",65,N],[13,"Shift_Jis","","Shift_JIS",65,N],[13,"Euc_Jp","","EUC-JP",65,N],[13,"Iso_2022_Kr","","ISO-2022-KR",65,N],[13,"Euc_Kr","","EUC-KR",65,N],[13,"Iso_2022_Jp","","ISO-2022-JP",65,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,N],[13,"Gb2312","","GB2312",65,N],[13,"Big5","","Big5",65,N],[13,"Koi8_R","","KOI8-R",65,N],[13,"Ext","","An arbitrary charset specified as a string",65,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",66,N],[13,"Gzip","","The `gzip` encoding.",66,N],[13,"Deflate","","The `deflate` encoding.",66,N],[13,"Compress","","The `compress` encoding.",66,N],[13,"Identity","","The `identity` encoding.",66,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",67,N],[13,"Null","","A hidden origin",67,N],[13,"Value","","Allow one particular origin",67,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",68,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,N],[13,"Unregistered","","The given range unit is not registered at IANA.",68,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",69,N],[13,"NoStore","","\"no-store\"",69,N],[13,"NoTransform","","\"no-transform\"",69,N],[13,"OnlyIfCached","","\"only-if-cached\"",69,N],[13,"MaxAge","","\"max-age=delta\"",69,N],[13,"MaxStale","","\"max-stale=delta\"",69,N],[13,"MinFresh","","\"min-fresh=delta\"",69,N],[13,"MustRevalidate","","\"must-revalidate\"",69,N],[13,"Public","","\"public\"",69,N],[13,"Private","","\"private\"",69,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,N],[13,"SMaxAge","","\"s-maxage=delta\"",69,N],[13,"Extension","","Extension directives. Optionally include an argument.",69,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",70,N],[13,"Close","","The `close` connection value.",70,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",71,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,N],[4,"DispositionParam","","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",73,N],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,N],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,N],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,N],[12,"resp","","other-range-resp",73,N],[4,"Expect","hyper::header","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",74,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",75,N],[13,"Items","","Only the listed items are a match",75,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",76,N],[13,"Items","","Only the listed items are a match",76,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",77,N],[13,"Date","","The date when the client retrieved the resource",77,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",78,N],[13,"Ext","","Every value other than `no-cache`.",78,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",79,N],[13,"ReturnRepresentation","","\"return=representation\"",79,N],[13,"ReturnMinimal","","\"return=minimal\"",79,N],[13,"HandlingStrict","","\"handling=strict\"",79,N],[13,"HandlingLeniant","","\"handling=leniant\"",79,N],[13,"Wait","","\"wait=delta\"",79,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",80,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,N],[13,"Last","","Get last x bytes (\"-x\")",81,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",82,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,N],[13,"SameOrigin","","`same-origin`",82,N],[13,"Origin","","`origin`",82,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,N],[13,"UnsafeUrl","","`unsafe-url`",82,N],[13,"StrictOrigin","","`strict-origin`",82,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,N],[13,"Unregistered","","Any other protocol name not known to hyper",83,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",84,N],[13,"Items","","Only the listed items are a match",84,N],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[11,"star","","A constructor to easily create `Accept: */*`.",20,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",20,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",20,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",20,[[],["accept"]]],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used to manipulate cookies and create a corresponding `SetCookie` header afterwards.",43,N],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header. Useful for clients.",43,[[["cookiejar"]],["cookie"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",36,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,[[],["connection"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,[[],["contenttype"]]],[11,"new","","Creates a new `Origin` header.",53,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,[[["vec"]],["range"]]],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using calculated delta.",58,[[["cookiejar"]],["setcookie"]]],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar. Note that this will `panic!` if `CookieJar` is not root.",58,[[["self"],["cookiejar"]]]],[11,"including_subdomains","","Create an STS header that includes subdomains",59,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,[[["u64"]],["stricttransportsecurity"]]],[11,"new","","Creates a new Protocol with the given name and version",62,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",16,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,[[["self"],["string"]]]],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,[[["t"],["quality"]],["qualityitem"]]],[0,"parsing","","Utility functions for Header implementations.",N,N],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",N,N],[12,"charset","","The character set that is used to encode the `value` to a string.",85,N],[12,"language_tag","","The human language details of the `value`, if available.",85,N],[12,"value","","The parameter value, as expressed in octets.",85,N],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",N,N],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",N,N],[5,"from_raw_str","","Reads a raw string into a value.",N,N],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",N,N],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",N,N],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",N,[[["str"]],["result",["extendedvalue"]]]],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",86,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",86,[[["self"],["formatter"]],["result"]]],[8,"Header","","A trait for any object that will represent a header field and value.",N,N],[10,"header_name","","Returns the name of the header field this belongs to.",87,[[],["str"]]],[10,"parse_header","","Parse a header from a raw stream of bytes.",87,N],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",N,N],[10,"fmt_header","","Format a header to be output into a TcpStream.",88,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new, empty headers map.",89,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",89,[[["self"],["h"]]]],[11,"get_raw","","Access the raw value of a header.",89,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",89,[[["self"],["k"],["vec",["vec"]]]]],[11,"remove_raw","","Remove a header set by set_raw",89,[[["self"],["str"]]]],[11,"get","","Get a reference to the header field's value, if it exists.",89,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",89,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",89,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",89,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",89,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",89,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",89,[[["self"]]]],[11,"is","","Check if a HeaderView is a certain Header.",90,[[["self"]],["bool"]]],[11,"name","","Get the Header name as a slice.",90,[[["self"]],["str"]]],[11,"value","","Cast the value to a certain Header type.",90,[[["self"]],["option"]]],[11,"value_string","","Get just the header value as a String.",90,[[["self"]],["string"]]],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",N,N],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",N,N],[12,"0","","",91,N],[12,"1","","",91,N],[5,"should_keep_alive","","Checks if a connection should be kept alive.",N,[[["httpversion"],["headers"]],["bool"]]],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",N,N],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",N,N],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",N,N],[3,"EndError","","",N,N],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",N,N],[12,"version","","HTTP version of the message.",92,N],[12,"subject","","Subject (request line or status line) of Incoming message.",92,N],[12,"headers","","Headers of the Incoming message.",92,N],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",N,N],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",93,N],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",93,N],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",93,N],[13,"EmptyReader","","A Reader used for messages that should never have a body.",93,N],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",N,N],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",94,N],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",94,N],[13,"SizedWriter","","A Writer for when Content-Length is set.",94,N],[13,"EmptyWriter","","A writer that should not write any body.",94,N],[5,"parse_request","","Parses a request into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[5,"parse_response","","Parses a response into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[17,"CR","","The `\\r` byte.",N,N],[17,"LF","","The `\\n` byte.",N,N],[17,"LINE_ENDING","","The bytes `\\r\\n`.",N,N],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",95,[[["self"]],["box",["networkstream"]]]],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",95,[[["self"]],["networkstream"]]],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",95,[[["self"]],["networkstream"]]],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",95,[[["box",["networkstream"]]],["http11message"]]],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",95,[[["self"]],["result"]]],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",96,[[["c"]],["http11protocol"]]],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",93,[[["self"]],["r"]]],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",93,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",93,[[["self"]],["r"]]],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",94,[[["self"]],["w"]]],[11,"get_ref","","Access the inner Writer.",94,[[["self"]],["w"]]],[11,"get_mut","","Access the inner Writer mutably.",94,[[["self"]],["w"]]],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",94,[[["self"]],["result",["enderror"]]]],[0,"h2","hyper::http","Adapts the `solicit`-provided HTTP/2 implementation into the `HttpMessage` API.",N,N],[3,"Http2Protocol","hyper::http::h2","The `Protocol` implementation that provides HTTP/2 messages (i.e. `Http2Message`).",N,N],[3,"Http2Message","","An implementation of the `HttpMessage` trait for HTTP/2.",N,N],[5,"new_protocol","","A convenience method that creates a default `Http2Protocol` that uses a `net::HttpConnector` (which produces an `HttpStream` for the underlying transport layer).",N,[[],["http2protocol",["httpconnector","httpstream"]]]],[8,"CloneableStream","","A trait alias representing all types that are both `NetworkStream` and `Clone`.",N,N],[11,"with_connector","","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP connections to the server.",97,[[["c"]],["http2protocol"]]],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",N,N],[3,"RequestHead","hyper::http::message","Describes a request.",N,N],[12,"headers","","The headers of the request",98,N],[12,"method","","The method of the request",98,N],[12,"url","","The URL of the request",98,N],[3,"ResponseHead","","Describes a response.",N,N],[12,"headers","","The headers of the reponse",99,N],[12,"raw_status","","The raw status line of the response",99,N],[12,"version","","The HTTP/2 version which generated the response",99,N],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",N,N],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",100,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",N,N],[10,"set_outgoing","","Initiates a new outgoing request.",101,[[["self"],["requesthead"]],["result",["requesthead"]]]],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",101,[[["self"]],["result",["responsehead"]]]],[10,"set_read_timeout","","Set the read timeout duration for this message.",101,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the write timeout duration for this message.",101,[[["self"],["option",["duration"]]],["result"]]],[10,"close_connection","","Closes the underlying HTTP connection.",101,[[["self"]],["result"]]],[10,"has_body","","Returns whether the incoming message has a body.",101,[[["self"]],["bool"]]],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",101,[[["self"],["bool"]]]],[11,"is","","Is the underlying type in this trait object a T?",101,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",101,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",101,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is T, extract it.",101,[[["box",["httpmessage"]]],["result",["box","box"]]]],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",N,N],[3,"Openssl","hyper::net","An implementation of `Ssl` for OpenSSL.",N,N],[12,"context","","The `SslContext` from openssl crate.",102,N],[3,"OpensslClient","","A client-specific implementation of OpenSSL.",N,N],[3,"NetworkConnections","","An iterator wrapper over a `NetworkAcceptor`.",N,N],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",N,N],[3,"HttpStream","","A wrapper around a `TcpStream`.",N,N],[12,"0","","",103,N],[3,"HttpConnector","","A connector that will produce HttpStreams.",N,N],[3,"HttpsListener","","A Http Listener over SSL.",N,N],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",N,N],[4,"Fresh","","The write-status indicating headers have not been written.",N,N],[4,"Streaming","","The write-status indicating headers have been written.",N,N],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",N,N],[13,"Http","","A plain text stream.",104,N],[13,"Https","","A stream protected by SSL.",104,N],[11,"new","","Creates a new OpensslClient with a custom SslContext",105,[[["sslcontext"]],["opensslclient"]]],[11,"with_cert_and_key","","Ease creating an `Openssl` with a certificate and key.",102,[[["c"],["k"]],["result",["openssl","sslerror"]]]],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",N,N],[16,"Stream","","The stream produced for each connection.",106,N],[10,"accept","","Returns an iterator of streams.",106,[[["self"]],["result"]]],[10,"local_addr","","Get the address this Listener ended up listening on.",106,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Returns an iterator over incoming connections.",106,[[["self"]],["networkconnections"]]],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",N,N],[10,"peer_addr","","Get the remote address of the underlying connection.",107,[[["self"]],["result",["socketaddr"]]]],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",107,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",107,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","This will be called when Stream should no longer be kept alive.",107,[[["self"],["shutdown"]],["result"]]],[8,"NetworkConnector","","A connector creates a NetworkStream.",N,N],[16,"Stream","","Type of `Stream` to create",108,N],[10,"connect","","Connect to a remote address.",108,[[["self"],["str"],["u16"],["str"]],["result"]]],[8,"Ssl","","Deprecated",N,N],[16,"Stream","","The protected stream.",109,N],[10,"wrap_client","","Wrap a client stream with SSL.",109,[[["self"],["httpstream"],["str"]],["result"]]],[10,"wrap_server","","Wrap a server stream with SSL.",109,[[["self"],["httpstream"]],["result"]]],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",110,N],[10,"wrap_client","","Wrap a client stream with SSL.",110,[[["self"],["t"],["str"]],["result"]]],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",111,N],[10,"wrap_server","","Wrap a server stream with SSL.",111,[[["self"],["t"]],["result"]]],[11,"is","","Is the underlying type in this trait object a `T`?",107,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",107,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"is","","Is the underlying type in this trait object a `T`?",107,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",107,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"new","","Start listening to an address over HTTP.",112,[[["to"]],["result",["httplistener"]]]],[11,"new","","Start listening to an address over HTTPS.",113,[[["to"],["s"]],["result",["httpslistener"]]]],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",113,[[["httplistener"],["s"]],["httpslistener"]]],[11,"new","","Create a new connector using the provided SSL implementation.",114,[[["s"]],["httpsconnector",["httpconnector"]]]],[11,"with_connector","","Create a new connector using the provided SSL implementation.",114,[[["s"],["c"]],["httpsconnector"]]],[0,"server","hyper","HTTP Server",N,N],[3,"Server","hyper::server","A server can listen on a TCP socket.",N,N],[3,"Listening","","A listening server, which can later be closed.",N,N],[12,"socket","","The socket addresses that the server is bound to.",115,N],[0,"request","","Server Requests",N,N],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",N,N],[12,"remote_addr","","The IP address of the remote connection.",116,N],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",116,N],[12,"headers","","The headers of the incoming request.",116,N],[12,"uri","","The target request-uri for this request.",116,N],[12,"version","","The version of HTTP for this request.",116,N],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",116,[[["bufreader"],["socketaddr"]],["result",["request"]]]],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",116,[[["self"],["option",["duration"]]],["result"]]],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",116,[[["self"]],["option"]]],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",116,[[["self"]],["option"]]],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",116,N],[0,"response","hyper::server","Server Responses",N,N],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",N,N],[12,"version","","The HTTP version of this response.",117,N],[11,"status","","The status of this response.",117,[[["self"]],["statuscode"]]],[11,"headers","","The headers of this response.",117,[[["self"]],["headers"]]],[11,"construct","","Construct a Response from its constituent parts.",117,[[["httpversion"],["httpwriter",["write"]],["statuscode"],["headers"]],["response",["fresh"]]]],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",117,N],[11,"new","","Creates a new Response that can be used to write to a network stream.",117,[[["write"],["headers"]],["response",["fresh"]]]],[11,"send","","Writes the body and ends the response.",117,N],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",117,[[["self"]],["result",["response"]]]],[11,"status_mut","","Get a mutable reference to the status.",117,[[["self"]],["statuscode"]]],[11,"headers_mut","","Get a mutable reference to the Headers.",117,[[["self"]],["headers"]]],[11,"end","","Flushes all writing of a response to the client.",117,[[["self"]],["result"]]],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",N,N],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",118,[[["self"],["request"],["response",["fresh"]]]]],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",118,N],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",118,[[["self"]]]],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",118,[[["self"]]]],[11,"new","","Creates a new server with the provided handler.",119,[[["l"]],["server"]]],[11,"keep_alive","","Controls keep-alive for this server.",119,[[["self"],["option",["duration"]]]]],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",119,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",119,[[["self"],["option",["duration"]]]]],[11,"http","","Creates a new server that will handle `HttpStream`s.",119,[[["to"]],["result",["server"]]]],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",119,[[["a"],["s"]],["result",["server"]]]],[11,"handle","","Binds to a socket and starts handling connections.",119,[[["self"],["h"]],["result",["listening"]]]],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",119,[[["self"],["h"],["usize"]],["result",["listening"]]]],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",115,[[["self"]],["result"]]],[0,"status","hyper","HTTP status codes",N,N],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",120,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",120,N],[13,"Processing","","102 Processing [RFC2518]",120,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",120,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",120,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",120,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",120,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",120,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",120,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",120,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",120,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",120,N],[13,"ImUsed","","226 IM Used [RFC3229]",120,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",120,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",120,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",120,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",120,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",120,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",120,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",120,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",120,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",120,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",120,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",120,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",120,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",120,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",120,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",120,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",120,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",120,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",120,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",120,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",120,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",120,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",120,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",120,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",120,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",120,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",120,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",120,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",120,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",120,N],[13,"Locked","","423 Locked [RFC4918]",120,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",120,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",120,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",120,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",120,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",120,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",120,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",120,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",120,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",120,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",120,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",120,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",120,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",120,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",120,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",120,N],[13,"NotExtended","","510 Not Extended [RFC2774]",120,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",120,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",120,N],[4,"StatusClass","","The class of an HTTP `status-code`.",N,N],[13,"Informational","","1xx (Informational): The request was received, continuing process",121,N],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",121,N],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",121,N],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",121,N],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",121,N],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",121,N],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",120,[[["self"]],["option",["str"]]]],[11,"class","","Determine the class of a status code, based on its first digit.",120,[[["self"]],["statusclass"]]],[11,"is_informational","","Check if class is Informational.",120,[[["self"]],["bool"]]],[11,"is_success","","Check if class is Success.",120,[[["self"]],["bool"]]],[11,"is_redirection","","Check if class is Redirection.",120,[[["self"]],["bool"]]],[11,"is_client_error","","Check if class is ClientError.",120,[[["self"]],["bool"]]],[11,"is_server_error","","Check if class is ServerError.",120,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if class is NoClass",120,[[["self"]],["bool"]]],[11,"default_code","","Get the default status code for the class.",121,[[["self"]],["statuscode"]]],[0,"uri","hyper","HTTP RequestUris",N,N],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",N,N],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",122,N],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",122,N],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",122,N],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",122,N],[0,"version","hyper","HTTP Versions enum",N,N],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",N,N],[13,"Http09","","`HTTP/0.9`",123,N],[13,"Http10","","`HTTP/1.0`",123,N],[13,"Http11","","`HTTP/1.1`",123,N],[13,"Http20","","`HTTP/2.0`",123,N],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",N,N],[3,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",124,N],[12,"1","","",124,N],[12,"2","","",124,N],[4,"TopLevel","","",N,N],[13,"Star","","",125,N],[13,"Text","","",125,N],[13,"Image","","",125,N],[13,"Audio","","",125,N],[13,"Video","","",125,N],[13,"Application","","",125,N],[13,"Multipart","","",125,N],[13,"Message","","",125,N],[13,"Model","","",125,N],[13,"Ext","","",125,N],[4,"SubLevel","","",N,N],[13,"Star","","",126,N],[13,"Plain","","",126,N],[13,"Html","","",126,N],[13,"Xml","","",126,N],[13,"Javascript","","",126,N],[13,"Css","","",126,N],[13,"EventStream","","",126,N],[13,"Json","","",126,N],[13,"WwwFormUrlEncoded","","",126,N],[13,"Msgpack","","",126,N],[13,"OctetStream","","",126,N],[13,"FormData","","",126,N],[13,"Png","","",126,N],[13,"Gif","","",126,N],[13,"Bmp","","",126,N],[13,"Jpeg","","",126,N],[13,"Mpeg","","",126,N],[13,"Mp4","","",126,N],[13,"Ogg","","",126,N],[13,"Ext","","",126,N],[4,"Attr","","",N,N],[13,"Charset","","",127,N],[13,"Boundary","","",127,N],[13,"Q","","",127,N],[13,"Ext","","",127,N],[4,"Value","","",N,N],[13,"Utf8","","",128,N],[13,"Ext","","",128,N],[6,"Param","","",N,N],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[14,"header","hyper","",N,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_string","","",129,[[["self"]],["string"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","hyper::client","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"connect","hyper::client::pool","",5,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"send_frame","","",6,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",6,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::client::request","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"send_frame","","",7,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",7,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::client::response","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","hyper::error","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","hyper::method","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","hyper::header","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_string","","",131,[[["self"]],["string"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"into_iter","","",132,[[["self"]],["i"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_string","","",90,[[["self"]],["string"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","hyper::header::parsing","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","hyper::http","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"from","hyper::http::h1","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"send_frame","","",95,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",95,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"send_frame","","",94,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",94,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::http::h2","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"send_frame","","",135,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",135,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::http::message","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"wrap_client","hyper::net","",102,[[["self"],["httpstream"],["str"]],["result",["error"]]]],[11,"wrap_server","","",102,[[["self"],["httpstream"]],["result",["error"]]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"wrap_client","","",105,[[["self"],["httpstream"],["str"]],["result",["error"]]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"into_iter","","",136,[[["self"]],["i"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"send_frame","","",103,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",103,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"connect","","",137,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"connect","","",114,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"send_frame","","",104,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",104,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::server","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","hyper::server::request","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","hyper::server::response","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"send_frame","","",117,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",117,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","hyper::status","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_string","","",120,[[["self"]],["string"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","hyper::uri","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","hyper::version","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","hyper::mime","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_string","","",124,[[["self"]],["string"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_string","","",125,[[["self"]],["string"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_string","","",126,[[["self"]],["string"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_string","","",127,[[["self"]],["string"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_string","","",128,[[["self"]],["string"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"clone","hyper::error","",12,[[["self"]],["parseerror"]]],[11,"clone","hyper","",129,[[["self"]],["url"]]],[11,"partial_cmp","","",129,[[["self"],["url"]],["option",["ordering"]]]],[11,"as_ref","","",129,[[["self"]],["str"]]],[11,"to_socket_addrs","","",129,[[["self"]],["result",["error"]]]],[11,"cmp","","",129,[[["self"],["url"]],["ordering"]]],[11,"description","hyper::error","",12,[[["self"]],["str"]]],[11,"fmt","hyper","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::error","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","hyper","",129,[[["self"],["range",["position"]]],["str"]]],[11,"index","","",129,[[["self"],["rangefull"]],["str"]]],[11,"index","","",129,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",129,[[["self"],["rangeto",["position"]]],["str"]]],[11,"fmt","hyper::error","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",129,[[["str"]],["result",["url","parseerror"]]]],[11,"from","hyper::error","",12,[[["errors"]],["parseerror"]]],[11,"hash","hyper","",129,N],[11,"eq","hyper::error","",12,[[["self"],["parseerror"]],["bool"]]],[11,"eq","hyper","",129,[[["self"],["url"]],["bool"]]],[11,"clone","hyper::header","",15,[[["self"]],["cookie"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",15,[[["str"]],["result",["cookie"]]]],[11,"eq","","",15,[[["self"],["cookie"]],["bool"]]],[11,"ne","","",15,[[["self"],["cookie"]],["bool"]]],[11,"clone","hyper","",0,[[["self"]],["languagetag"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",0,[[["str"]],["result",["languagetag","error"]]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"clone","hyper::mime","",128,[[["self"]],["value"]]],[11,"clone","","",125,[[["self"]],["toplevel"]]],[11,"clone","","",124,[[["self"]],["mime"]]],[11,"clone","","",126,[[["self"]],["sublevel"]]],[11,"clone","","",127,[[["self"]],["attr"]]],[11,"partial_cmp","","",127,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",127,[[["self"],["attr"]],["bool"]]],[11,"le","","",127,[[["self"],["attr"]],["bool"]]],[11,"gt","","",127,[[["self"],["attr"]],["bool"]]],[11,"ge","","",127,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",128,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",128,[[["self"],["value"]],["bool"]]],[11,"le","","",128,[[["self"],["value"]],["bool"]]],[11,"gt","","",128,[[["self"],["value"]],["bool"]]],[11,"ge","","",128,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",126,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",126,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",126,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",126,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",126,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",125,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",125,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",125,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",125,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",125,[[["self"],["toplevel"]],["bool"]]],[11,"partial_cmp","","",124,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",124,[[["self"],["mime"]],["bool"]]],[11,"le","","",124,[[["self"],["mime"]],["bool"]]],[11,"gt","","",124,[[["self"],["mime"]],["bool"]]],[11,"ge","","",124,[[["self"],["mime"]],["bool"]]],[11,"cmp","","",127,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",124,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",128,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",126,[[["self"],["sublevel"]],["ordering"]]],[11,"cmp","","",125,[[["self"],["toplevel"]],["ordering"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",125,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",126,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",128,[[["str"]],["result",["value"]]]],[11,"from_str","","",127,[[["str"]],["result",["attr"]]]],[11,"from_str","","",124,[[["str"]],["result",["mime"]]]],[11,"hash","","",128,N],[11,"hash","","",126,N],[11,"hash","","",125,N],[11,"hash","","",127,N],[11,"hash","","",124,N],[11,"deref","","",127,[[["self"]],["str"]]],[11,"deref","","",125,[[["self"]],["str"]]],[11,"deref","","",128,[[["self"]],["str"]]],[11,"deref","","",126,[[["self"]],["str"]]],[11,"eq","","",125,[[["self"],["str"]],["bool"]]],[11,"eq","","",127,[[["self"],["str"]],["bool"]]],[11,"eq","","",126,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",128,[[["self"],["str"]],["bool"]]],[11,"eq","","",125,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",126,[[["self"],["str"]],["bool"]]],[11,"eq","","",125,[[["self"],["str"]],["bool"]]],[11,"eq","","",128,[[["self"],["string"]],["bool"]]],[11,"eq","","",127,[[["self"],["string"]],["bool"]]],[11,"eq","","",126,[[["self"],["string"]],["bool"]]],[11,"eq","","",128,[[["self"],["str"]],["bool"]]],[11,"eq","","",124,[[["self"],["mime"]],["bool"]]],[11,"eq","","",125,[[["self"],["string"]],["bool"]]],[11,"eq","","",127,[[["self"],["attr"]],["bool"]]],[11,"eq","","",128,[[["self"],["value"]],["bool"]]],[11,"eq","","",127,[[["self"],["str"]],["bool"]]],[11,"eq","","",126,[[["self"],["str"]],["bool"]]],[11,"into_url","hyper","",129,[[["self"]],["result",["url","urlerror"]]]],[11,"scheme","hyper::header","",33,[[],["option",["str"]]]],[11,"fmt_scheme","","",33,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",34,[[],["option",["str"]]]],[11,"fmt_scheme","","",34,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,N],[11,"header_name","","",131,[[],["str"]]],[11,"parse_header","","",131,N],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,N],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,N],[11,"header_name","","",67,[[],["str"]]],[11,"parse_header","","",67,N],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,N],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,N],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,N],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,N],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"header_name","","",32,[[],["str"]]],[11,"parse_header","","",32,N],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,N],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,N],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,N],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,N],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,N],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,N],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,N],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,N],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,N],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,N],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,N],[11,"header_name","","",74,[[],["str"]]],[11,"parse_header","","",74,N],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,N],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,N],[11,"header_name","","",48,[[],["str"]]],[11,"parse_header","","",48,N],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,N],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"header_name","","",77,[[],["str"]]],[11,"parse_header","","",77,N],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,N],[11,"header_name","","",51,[[],["str"]]],[11,"parse_header","","",51,N],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,N],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,N],[11,"header_name","","",78,[[],["str"]]],[11,"parse_header","","",78,N],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,N],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,N],[11,"header_name","","",80,[[],["str"]]],[11,"parse_header","","",80,N],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,N],[11,"header_name","","",82,[[],["str"]]],[11,"parse_header","","",82,N],[11,"header_name","","",57,[[],["str"]]],[11,"parse_header","","",57,N],[11,"header_name","","",58,[[],["str"]]],[11,"parse_header","","",58,N],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,N],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,N],[11,"header_name","","",61,[[],["str"]]],[11,"parse_header","","",61,N],[11,"header_name","","",63,[[],["str"]]],[11,"parse_header","","",63,N],[11,"header_name","","",84,[[],["str"]]],[11,"parse_header","","",84,N],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt_multi_header","","",58,[[["self"],["multilineformatter"]],["result"]]],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",84,[[["self"],["formatter"]],["result"]]],[11,"new_message","hyper::http::h1","",96,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[11,"new_message","hyper::http::h2","",97,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[11,"set_outgoing","hyper::http::h1","",95,[[["self"],["requesthead"]],["result",["requesthead"]]]],[11,"get_incoming","","",95,[[["self"]],["result",["responsehead"]]]],[11,"has_body","","",95,[[["self"]],["bool"]]],[11,"set_read_timeout","","",95,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",95,[[["self"],["option",["duration"]]],["result"]]],[11,"close_connection","","",95,[[["self"]],["result"]]],[11,"set_proxied","","",95,[[["self"],["bool"]]]],[11,"set_outgoing","hyper::http::h2","",135,[[["self"],["requesthead"]],["result",["requesthead"]]]],[11,"get_incoming","","",135,[[["self"]],["result",["responsehead"]]]],[11,"has_body","","",135,[[["self"]],["bool"]]],[11,"set_read_timeout","","",135,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",135,[[["self"],["option",["duration"]]],["result"]]],[11,"close_connection","","",135,[[["self"]],["result"]]],[11,"accept","hyper::net","",112,[[["self"]],["result",["httpstream"]]]],[11,"local_addr","","",112,[[["self"]],["result",["socketaddr"]]]],[11,"accept","","",113,[[["self"]],["result"]]],[11,"local_addr","","",113,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","hyper::client::pool","",6,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",6,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",6,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",6,[[["self"],["shutdown"]],["result"]]],[11,"set_previous_response_expected_no_content","","",6,[[["self"],["bool"]]]],[11,"previous_response_expected_no_content","","",6,[[["self"]],["bool"]]],[11,"peer_addr","hyper::net","",103,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",103,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",103,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",103,[[["self"],["shutdown"]],["result"]]],[11,"peer_addr","","",104,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",104,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",104,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",104,[[["self"],["shutdown"]],["result"]]],[11,"connect","hyper::client::pool","",5,[[["self"],["str"],["u16"],["str"]],["result",["pooledstream"]]]],[11,"connect","hyper::net","",137,[[["self"],["str"],["u16"],["str"]],["result",["httpstream"]]]],[11,"connect","","",114,[[["self"],["str"],["u16"],["str"]],["result"]]],[11,"wrap_client","","",102,[[["self"],["httpstream"],["str"]],["result"]]],[11,"wrap_server","","",102,[[["self"],["httpstream"]],["result"]]],[11,"wrap_client","","",105,[[["self"],["t"],["str"]],["result"]]],[11,"clone","hyper::client","",3,[[["self"]],["redirectpolicy"]]],[11,"clone","hyper::method","",14,[[["self"]],["method"]]],[11,"clone","hyper::header","",20,[[["self"]],["accept"]]],[11,"clone","","",131,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","","",21,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",22,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","","",67,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",23,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",24,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",25,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","","",26,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",27,[[["self"]],["acceptcharset"]]],[11,"clone","","",28,[[["self"]],["acceptencoding"]]],[11,"clone","","",29,[[["self"]],["acceptlanguage"]]],[11,"clone","","",30,[[["self"]],["acceptranges"]]],[11,"clone","","",68,[[["self"]],["rangeunit"]]],[11,"clone","","",31,[[["self"]],["allow"]]],[11,"clone","","",32,[[["self"]],["authorization"]]],[11,"clone","","",33,[[["self"]],["basic"]]],[11,"clone","","",34,[[["self"]],["bearer"]]],[11,"clone","","",35,[[["self"]],["cachecontrol"]]],[11,"clone","","",69,[[["self"]],["cachedirective"]]],[11,"clone","","",43,[[["self"]],["cookie"]]],[11,"clone","","",70,[[["self"]],["connectionoption"]]],[11,"clone","","",36,[[["self"]],["connection"]]],[11,"clone","","",71,[[["self"]],["dispositiontype"]]],[11,"clone","","",72,[[["self"]],["dispositionparam"]]],[11,"clone","","",37,[[["self"]],["contentdisposition"]]],[11,"clone","","",39,[[["self"]],["contentencoding"]]],[11,"clone","","",40,[[["self"]],["contentlanguage"]]],[11,"clone","","",38,[[["self"]],["contentlength"]]],[11,"clone","","",41,[[["self"]],["contentrange"]]],[11,"clone","","",73,[[["self"]],["contentrangespec"]]],[11,"clone","","",42,[[["self"]],["contenttype"]]],[11,"clone","","",44,[[["self"]],["date"]]],[11,"clone","","",45,[[["self"]],["etag"]]],[11,"clone","","",74,[[["self"]],["expect"]]],[11,"clone","","",46,[[["self"]],["expires"]]],[11,"clone","","",47,[[["self"]],["from"]]],[11,"clone","","",48,[[["self"]],["host"]]],[11,"clone","","",75,[[["self"]],["ifmatch"]]],[11,"clone","","",49,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",76,[[["self"]],["ifnonematch"]]],[11,"clone","","",77,[[["self"]],["ifrange"]]],[11,"clone","","",50,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",51,[[["self"]],["lastmodified"]]],[11,"clone","","",52,[[["self"]],["location"]]],[11,"clone","","",53,[[["self"]],["origin"]]],[11,"clone","","",78,[[["self"]],["pragma"]]],[11,"clone","","",54,[[["self"]],["prefer"]]],[11,"clone","","",79,[[["self"]],["preference"]]],[11,"clone","","",55,[[["self"]],["preferenceapplied"]]],[11,"clone","","",80,[[["self"]],["range"]]],[11,"clone","","",81,[[["self"]],["byterangespec"]]],[11,"clone","","",56,[[["self"]],["referer"]]],[11,"clone","","",82,[[["self"]],["referrerpolicy"]]],[11,"clone","","",57,[[["self"]],["server"]]],[11,"clone","","",58,[[["self"]],["setcookie"]]],[11,"clone","","",59,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",60,[[["self"]],["transferencoding"]]],[11,"clone","","",61,[[["self"]],["upgrade"]]],[11,"clone","","",83,[[["self"]],["protocolname"]]],[11,"clone","","",62,[[["self"]],["protocol"]]],[11,"clone","","",63,[[["self"]],["useragent"]]],[11,"clone","","",84,[[["self"]],["vary"]]],[11,"clone","","",65,[[["self"]],["charset"]]],[11,"clone","","",66,[[["self"]],["encoding"]]],[11,"clone","","",16,[[["self"]],["entitytag"]]],[11,"clone","","",17,[[["self"]],["httpdate"]]],[11,"clone","","",18,[[["self"]],["quality"]]],[11,"clone","","",19,[[["self"]],["qualityitem"]]],[11,"clone","hyper::header::parsing","",85,[[["self"]],["extendedvalue"]]],[11,"clone","","",133,[[["self"]],["http_value"]]],[11,"clone","hyper::header","",89,[[["self"]],["headers"]]],[11,"clone","hyper::http::message","",98,[[["self"]],["requesthead"]]],[11,"clone","","",99,[[["self"]],["responsehead"]]],[11,"clone","hyper::http","",91,[[["self"]],["rawstatus"]]],[11,"clone","hyper::net","",112,[[["self"]],["httplistener"]]],[11,"clone","","",103,[[["self"]],["httpstream"]]],[11,"clone","","",137,[[["self"]],["httpconnector"]]],[11,"clone","","",104,[[["self"]],["httpsstream"]]],[11,"clone","","",113,[[["self"]],["httpslistener"]]],[11,"clone","","",102,[[["self"]],["openssl"]]],[11,"clone","","",105,[[["self"]],["opensslclient"]]],[11,"clone","hyper::status","",120,[[["self"]],["statuscode"]]],[11,"clone","","",121,[[["self"]],["statusclass"]]],[11,"clone","hyper::uri","",122,[[["self"]],["requesturi"]]],[11,"clone","hyper::version","",123,[[["self"]],["httpversion"]]],[11,"extend","hyper::header","",89,[[["self"],["i"]]]],[11,"from","hyper::client","",2,[[["r"]],["body"]]],[11,"from","hyper::error","",13,[[["ioerror"]],["error"]]],[11,"from","","",13,[[["parseerror"]],["error"]]],[11,"from","","",13,[[["sslerror"]],["error"]]],[11,"from","","",13,[[["utf8error"]],["error"]]],[11,"from","","",13,[[["fromutf8error"]],["error"]]],[11,"from","","",13,[[["error"]],["error"]]],[11,"from","","",13,[[["http2error"]],["error"]]],[11,"from","hyper::net","",112,[[["tcplistener"]],["httplistener"]]],[11,"drop","hyper::client::pool","",6,[[["self"]]]],[11,"drop","hyper::client::response","",8,[[["self"]]]],[11,"drop","hyper::server::response","",117,[[["self"]]]],[11,"drop","hyper::server","",115,[[["self"]]]],[11,"next","hyper::header","",132,[[["self"]],["option",["headerview"]]]],[11,"next","hyper::net","",136,[[["self"]],["option",["result"]]]],[11,"as_ref","hyper::method","",14,[[["self"]],["str"]]],[11,"partial_cmp","hyper::header","",66,[[["self"],["encoding"]],["option",["ordering"]]]],[11,"lt","","",66,[[["self"],["encoding"]],["bool"]]],[11,"le","","",66,[[["self"],["encoding"]],["bool"]]],[11,"gt","","",66,[[["self"],["encoding"]],["bool"]]],[11,"ge","","",66,[[["self"],["encoding"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["quality"]],["bool"]]],[11,"le","","",18,[[["self"],["quality"]],["bool"]]],[11,"gt","","",18,[[["self"],["quality"]],["bool"]]],[11,"ge","","",18,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"partial_cmp","hyper::status","",120,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"partial_cmp","","",121,[[["self"],["statusclass"]],["option",["ordering"]]]],[11,"partial_cmp","hyper::version","",123,[[["self"],["httpversion"]],["option",["ordering"]]]],[11,"default","hyper::client::pool","",4,[[],["config"]]],[11,"default","hyper::client","",10,[[],["client"]]],[11,"default","","",3,[[],["redirectpolicy"]]],[11,"default","hyper::header","",18,[[],["quality"]]],[11,"default","hyper::net","",137,[[],["httpconnector"]]],[11,"default","","",114,[[],["httpsconnector"]]],[11,"default","","",105,[[],["opensslclient"]]],[11,"default","","",102,[[],["openssl"]]],[11,"eq","hyper::method","",14,[[["self"],["method"]],["bool"]]],[11,"ne","","",14,[[["self"],["method"]],["bool"]]],[11,"eq","hyper::header","",20,[[["self"],["accept"]],["bool"]]],[11,"ne","","",20,[[["self"],["accept"]],["bool"]]],[11,"eq","","",131,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",21,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",21,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",22,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",22,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",67,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",67,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",23,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",24,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",24,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",25,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",25,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",26,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",26,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","","",27,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",27,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",28,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",28,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",29,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",29,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",30,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",30,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",68,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",68,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",31,[[["self"],["allow"]],["bool"]]],[11,"ne","","",31,[[["self"],["allow"]],["bool"]]],[11,"eq","","",32,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",32,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",33,[[["self"],["basic"]],["bool"]]],[11,"ne","","",33,[[["self"],["basic"]],["bool"]]],[11,"eq","","",34,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",34,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",35,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",35,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",69,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",69,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",43,[[["self"],["cookie"]],["bool"]]],[11,"ne","","",43,[[["self"],["cookie"]],["bool"]]],[11,"eq","","",70,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",70,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",36,[[["self"],["connection"]],["bool"]]],[11,"ne","","",36,[[["self"],["connection"]],["bool"]]],[11,"eq","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",71,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",72,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",37,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",37,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",39,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",40,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",38,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",38,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",41,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",41,[[["self"],["contentrange"]],["bool"]]],[11,"eq","","",73,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",73,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",42,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",42,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",44,[[["self"],["date"]],["bool"]]],[11,"ne","","",44,[[["self"],["date"]],["bool"]]],[11,"eq","","",45,[[["self"],["etag"]],["bool"]]],[11,"ne","","",45,[[["self"],["etag"]],["bool"]]],[11,"eq","","",74,[[["self"],["expect"]],["bool"]]],[11,"eq","","",46,[[["self"],["expires"]],["bool"]]],[11,"ne","","",46,[[["self"],["expires"]],["bool"]]],[11,"eq","","",47,[[["self"],["from"]],["bool"]]],[11,"ne","","",47,[[["self"],["from"]],["bool"]]],[11,"eq","","",48,[[["self"],["host"]],["bool"]]],[11,"ne","","",48,[[["self"],["host"]],["bool"]]],[11,"eq","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",49,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",76,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",76,[[["self"],["ifnonematch"]],["bool"]]],[11,"eq","","",77,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",77,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",50,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"eq","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",51,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",52,[[["self"],["location"]],["bool"]]],[11,"ne","","",52,[[["self"],["location"]],["bool"]]],[11,"eq","","",53,[[["self"],["origin"]],["bool"]]],[11,"eq","","",78,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",78,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",54,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",54,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",79,[[["self"],["preference"]],["bool"]]],[11,"ne","","",79,[[["self"],["preference"]],["bool"]]],[11,"eq","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",55,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","","",80,[[["self"],["range"]],["bool"]]],[11,"ne","","",80,[[["self"],["range"]],["bool"]]],[11,"eq","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",81,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",56,[[["self"],["referer"]],["bool"]]],[11,"ne","","",56,[[["self"],["referer"]],["bool"]]],[11,"eq","","",82,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",57,[[["self"],["server"]],["bool"]]],[11,"ne","","",57,[[["self"],["server"]],["bool"]]],[11,"eq","","",58,[[["self"],["setcookie"]],["bool"]]],[11,"ne","","",58,[[["self"],["setcookie"]],["bool"]]],[11,"eq","","",59,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",59,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",60,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",60,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",61,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",61,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",83,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",83,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",62,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",62,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",63,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",63,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",84,[[["self"],["vary"]],["bool"]]],[11,"ne","","",84,[[["self"],["vary"]],["bool"]]],[11,"eq","","",65,[[["self"],["charset"]],["bool"]]],[11,"ne","","",65,[[["self"],["charset"]],["bool"]]],[11,"eq","","",66,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",66,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",16,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",16,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",17,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",18,[[["self"],["quality"]],["bool"]]],[11,"ne","","",18,[[["self"],["quality"]],["bool"]]],[11,"eq","","",19,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",19,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","hyper::header::parsing","",85,[[["self"],["extendedvalue"]],["bool"]]],[11,"ne","","",85,[[["self"],["extendedvalue"]],["bool"]]],[11,"eq","hyper::header","",89,[[["self"],["headers"]],["bool"]]],[11,"eq","hyper::http","",91,[[["self"],["rawstatus"]],["bool"]]],[11,"ne","","",91,[[["self"],["rawstatus"]],["bool"]]],[11,"eq","hyper::status","",120,[[["self"],["statuscode"]],["bool"]]],[11,"eq","","",121,[[["self"],["statusclass"]],["bool"]]],[11,"eq","hyper::uri","",122,[[["self"],["requesturi"]],["bool"]]],[11,"ne","","",122,[[["self"],["requesturi"]],["bool"]]],[11,"eq","hyper::version","",123,[[["self"],["httpversion"]],["bool"]]],[11,"cmp","hyper::header","",66,[[["self"],["encoding"]],["ordering"]]],[11,"cmp","","",17,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","","",18,[[["self"],["quality"]],["ordering"]]],[11,"cmp","hyper::status","",120,[[["self"],["statuscode"]],["ordering"]]],[11,"cmp","","",121,[[["self"],["statusclass"]],["ordering"]]],[11,"cmp","hyper::version","",123,[[["self"],["httpversion"]],["ordering"]]],[11,"hash","hyper::method","",14,N],[11,"hash","hyper::header","",66,N],[11,"hash","hyper::status","",120,N],[11,"hash","hyper::version","",123,N],[11,"fmt","hyper::error","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::method","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header::parsing","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::status","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::uri","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::version","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::client::pool","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::client::response","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::client","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::error","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::method","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header::parsing","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http::h1","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http::h2","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::http::message","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::net","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server::response","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::status","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::uri","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::version","",123,[[["self"],["formatter"]],["result"]]],[11,"from_str","hyper::method","",14,[[["str"]],["result",["method","error"]]]],[11,"from_str","hyper::header","",68,[[["str"]],["result"]]],[11,"from_str","","",33,[[["str"]],["result",["basic"]]]],[11,"from_str","","",34,[[["str"]],["result",["bearer"]]]],[11,"from_str","","",69,[[["str"]],["result",["cachedirective","option"]]]],[11,"from_str","","",70,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",73,[[["str"]],["result"]]],[11,"from_str","","",48,[[["str"]],["result",["host"]]]],[11,"from_str","","",53,[[["str"]],["result",["origin"]]]],[11,"from_str","","",79,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",80,[[["str"]],["result",["range"]]]],[11,"from_str","","",81,[[["str"]],["result",["byterangespec"]]]],[11,"from_str","","",59,[[["str"]],["result",["stricttransportsecurity"]]]],[11,"from_str","","",83,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",62,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",65,[[["str"]],["result",["charset"]]]],[11,"from_str","","",66,[[["str"]],["result",["encoding"]]]],[11,"from_str","","",16,[[["str"]],["result",["entitytag"]]]],[11,"from_str","","",17,[[["str"]],["result",["httpdate"]]]],[11,"from_str","","",19,[[["str"]],["result",["qualityitem"]]]],[11,"from_str","hyper::uri","",122,[[["str"]],["result",["requesturi","error"]]]],[11,"deref","hyper::header","",20,[[["self"]],["vec"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref","","",22,[[["self"]],["vec"]]],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref","","",24,[[["self"]],["u32"]]],[11,"deref","","",25,[[["self"]],["vec"]]],[11,"deref","","",26,[[["self"]],["method"]]],[11,"deref","","",27,[[["self"]],["vec"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref","","",29,[[["self"]],["vec"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref","","",31,[[["self"]],["vec"]]],[11,"deref","","",32,[[["self"]],["s"]]],[11,"deref","","",35,[[["self"]],["vec"]]],[11,"deref","","",43,[[["self"]],["vec"]]],[11,"deref","","",36,[[["self"]],["vec"]]],[11,"deref","","",39,[[["self"]],["vec"]]],[11,"deref","","",40,[[["self"]],["vec"]]],[11,"deref","","",38,[[["self"]],["u64"]]],[11,"deref","","",41,[[["self"]],["contentrangespec"]]],[11,"deref","","",42,[[["self"]],["mime"]]],[11,"deref","","",44,[[["self"]],["httpdate"]]],[11,"deref","","",45,[[["self"]],["entitytag"]]],[11,"deref","","",46,[[["self"]],["httpdate"]]],[11,"deref","","",47,[[["self"]],["string"]]],[11,"deref","","",49,[[["self"]],["httpdate"]]],[11,"deref","","",50,[[["self"]],["httpdate"]]],[11,"deref","","",51,[[["self"]],["httpdate"]]],[11,"deref","","",52,[[["self"]],["string"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref","","",55,[[["self"]],["vec"]]],[11,"deref","","",56,[[["self"]],["string"]]],[11,"deref","","",57,[[["self"]],["string"]]],[11,"deref","","",58,[[["self"]],["vec"]]],[11,"deref","","",60,[[["self"]],["vec"]]],[11,"deref","","",61,[[["self"]],["vec"]]],[11,"deref","","",63,[[["self"]],["string"]]],[11,"deref_mut","","",20,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["vec"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"deref_mut","","",24,[[["self"]],["u32"]]],[11,"deref_mut","","",25,[[["self"]],["vec"]]],[11,"deref_mut","","",26,[[["self"]],["method"]]],[11,"deref_mut","","",27,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",29,[[["self"]],["vec"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"deref_mut","","",31,[[["self"]],["vec"]]],[11,"deref_mut","","",32,[[["self"]],["s"]]],[11,"deref_mut","","",35,[[["self"]],["vec"]]],[11,"deref_mut","","",43,[[["self"]],["vec"]]],[11,"deref_mut","","",36,[[["self"]],["vec"]]],[11,"deref_mut","","",39,[[["self"]],["vec"]]],[11,"deref_mut","","",40,[[["self"]],["vec"]]],[11,"deref_mut","","",38,[[["self"]],["u64"]]],[11,"deref_mut","","",41,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",42,[[["self"]],["mime"]]],[11,"deref_mut","","",44,[[["self"]],["httpdate"]]],[11,"deref_mut","","",45,[[["self"]],["entitytag"]]],[11,"deref_mut","","",46,[[["self"]],["httpdate"]]],[11,"deref_mut","","",47,[[["self"]],["string"]]],[11,"deref_mut","","",49,[[["self"]],["httpdate"]]],[11,"deref_mut","","",50,[[["self"]],["httpdate"]]],[11,"deref_mut","","",51,[[["self"]],["httpdate"]]],[11,"deref_mut","","",52,[[["self"]],["string"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",55,[[["self"]],["vec"]]],[11,"deref_mut","","",56,[[["self"]],["string"]]],[11,"deref_mut","","",57,[[["self"]],["string"]]],[11,"deref_mut","","",58,[[["self"]],["vec"]]],[11,"deref_mut","","",60,[[["self"]],["vec"]]],[11,"deref_mut","","",61,[[["self"]],["vec"]]],[11,"deref_mut","","",63,[[["self"]],["string"]]],[11,"from_iter","","",89,[[["i"]],["headers"]]],[11,"write","hyper::client::pool","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"write","hyper::client::request","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"write","hyper::http::h1","",95,N],[11,"flush","","",95,[[["self"]],["result"]]],[11,"write","","",94,N],[11,"flush","","",94,[[["self"]],["result"]]],[11,"write","hyper::http::h2","",135,N],[11,"flush","","",135,[[["self"]],["result"]]],[11,"write","hyper::net","",103,N],[11,"flush","","",103,[[["self"]],["result"]]],[11,"write","","",104,N],[11,"flush","","",104,[[["self"]],["result"]]],[11,"write","hyper::server::response","",117,N],[11,"flush","","",117,[[["self"]],["result"]]],[11,"read","hyper::client::pool","",6,N],[11,"read","hyper::client::response","",8,N],[11,"read","hyper::client","",2,N],[11,"read","hyper::http::h1","",95,N],[11,"read","","",93,N],[11,"read","hyper::http::h2","",135,N],[11,"read","hyper::net","",103,N],[11,"read","","",104,N],[11,"read","hyper::server::request","",116,N],[11,"description","hyper::error","",13,[[["self"]],["str"]]],[11,"cause","","",13,[[["self"]],["option",["stderror"]]]],[11,"from_raw_fd","hyper::net","",112,[[["rawfd"]],["httplistener"]]],[11,"from_raw_fd","","",103,[[["rawfd"]],["httpstream"]]],[11,"as_raw_fd","","",112,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",103,[[["self"]],["rawfd"]]],[11,"contains","hyper::header::parsing","",133,[[["self"],["u8"]],["bool"]]],[11,"parse","hyper","Parse an absolute URL from a string.",129,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",129,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",129,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",129,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",129,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",129,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",129,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",129,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",129,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",129,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",129,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",129,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",129,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",129,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",129,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",129,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",129,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",129,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",129,[[["self"],["f"]],["result",["hostandport","error"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",129,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",129,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",129,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",129,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",129,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",129,N],[11,"set_query","","Change this URL’s query string.",129,N],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",129,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",129,N],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",129,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",129,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",129,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",129,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",129,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",129,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",129,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",129,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",129,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",129,[[["self"]],["result",["pathbuf"]]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[11,"new","hyper::header","",15,[[["string"],["string"]],["cookie"]]],[11,"parse","","",15,[[["str"]],["result",["cookie"]]]],[11,"pair","","",15,[[["self"]],["attrval"]]],[11,"new","","Creates a new empty cookie jar with the given signing key.",130,N],[11,"add_original","","Adds an original cookie from a request.",130,N],[11,"add","","Adds a new cookie to this cookie jar.",130,N],[11,"remove","","Removes a cookie from this cookie jar.",130,N],[11,"find","","Finds a cookie inside of this cookie jar.",130,[[["self"],["str"]],["option",["cookie"]]]],[11,"signed","","Creates a child signed cookie jar.",130,[[["self"]],["cookiejar"]]],[11,"encrypted","","Creates a child encrypted cookie jar.",130,[[["self"]],["cookiejar"]]],[11,"permanent","","Creates a child jar for permanent cookie storage.",130,[[["self"]],["cookiejar"]]],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time, returning a vector of `Set-Cookie` headers.",130,[[["self"]],["vec",["cookie"]]]],[11,"iter","","Return an iterator over the cookies in this jar.",130,[[["self"]],["iter"]]],[11,"get_param","hyper::mime","",124,[[["self"],["a"]],["option",["value"]]]],[11,"as_str","","",125,[[["self"]],["str"]]],[11,"as_str","","",126,[[["self"]],["str"]]],[11,"as_str","","",127,[[["self"]],["str"]]],[11,"as_str","","",128,[[["self"]],["str"]]]],"paths":[[3,"LanguageTag"],[3,"ProxyConfig"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"CookiePair"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"Http2Protocol"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"Openssl"],[3,"HttpStream"],[4,"HttpsStream"],[3,"OpensslClient"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"Ssl"],[8,"SslClient"],[8,"SslServer"],[3,"HttpListener"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Url"],[3,"CookieJar"],[3,"AccessControlAllowCredentials"],[3,"HeadersItems"],[3,"HTTP_VALUE"],[3,"EndError"],[3,"Http2Message"],[3,"NetworkConnections"],[3,"HttpConnector"],[4,"Fresh"],[4,"Streaming"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["itoa"]={"doc":"","items":[[5,"write","itoa","",N,[[["w"],["v"]],["result"]]],[8,"Integer","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result"]]]],"paths":[[8,"Integer"]]};
searchIndex["json"]={"doc":"","items":[[4,"Error","json","Error type of this crate.",N,N],[13,"UnexpectedCharacter","","",0,N],[12,"ch","json::Error","",0,N],[12,"line","","",0,N],[12,"column","","",0,N],[13,"UnexpectedEndOfJson","json","",0,N],[13,"ExceededDepthLimit","","",0,N],[13,"FailedUtf8Parsing","","",0,N],[13,"WrongType","","",0,N],[4,"JsonValue","","",N,N],[13,"Null","","",1,N],[13,"Short","","",1,N],[13,"String","","",1,N],[13,"Number","","",1,N],[13,"Boolean","","",1,N],[13,"Object","","",1,N],[13,"Array","","",1,N],[4,"JsonError","","Error type of this crate.",N,N],[13,"UnexpectedCharacter","","",0,N],[12,"ch","json::JsonError","",0,N],[12,"line","","",0,N],[12,"column","","",0,N],[13,"UnexpectedEndOfJson","json","",0,N],[13,"ExceededDepthLimit","","",0,N],[13,"FailedUtf8Parsing","","",0,N],[13,"WrongType","","",0,N],[5,"parse","","",N,[[["str"]],["result",["jsonvalue"]]]],[5,"from","","Convenience for `JsonValue::from(value)`",N,[[["t"]],["jsonvalue"]]],[5,"stringify","","Pretty prints out the value as JSON string.",N,[[["t"]],["string"]]],[5,"stringify_pretty","","Pretty prints out the value as JSON string. Second argument is a number of spaces to indent new blocks with.",N,[[["t"],["u16"]],["string"]]],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",1,[[],["jsonvalue"]]],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",1,[[],["jsonvalue"]]],[11,"dump","","Prints out the value as JSON string.",1,[[["self"]],["string"]]],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",1,[[["self"],["u16"]],["string"]]],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"]]]],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"]],["result"]]],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"],["u16"]],["result"]]],[11,"is_string","","",1,[[["self"]],["bool"]]],[11,"is_number","","",1,[[["self"]],["bool"]]],[11,"is_boolean","","",1,[[["self"]],["bool"]]],[11,"is_null","","",1,[[["self"]],["bool"]]],[11,"is_object","","",1,[[["self"]],["bool"]]],[11,"is_array","","",1,[[["self"]],["bool"]]],[11,"is_empty","","Checks whether the value is empty. Returns true for:",1,[[["self"]],["bool"]]],[11,"as_str","","",1,[[["self"]],["option",["str"]]]],[11,"as_number","","",1,[[["self"]],["option",["number"]]]],[11,"as_f64","","",1,[[["self"]],["option",["f64"]]]],[11,"as_f32","","",1,[[["self"]],["option",["f32"]]]],[11,"as_u64","","",1,[[["self"]],["option",["u64"]]]],[11,"as_u32","","",1,[[["self"]],["option",["u32"]]]],[11,"as_u16","","",1,[[["self"]],["option",["u16"]]]],[11,"as_u8","","",1,[[["self"]],["option",["u8"]]]],[11,"as_usize","","",1,[[["self"]],["option",["usize"]]]],[11,"as_i64","","",1,[[["self"]],["option",["i64"]]]],[11,"as_i32","","",1,[[["self"]],["option",["i32"]]]],[11,"as_i16","","",1,[[["self"]],["option",["i16"]]]],[11,"as_i8","","",1,[[["self"]],["option",["i8"]]]],[11,"as_isize","","",1,[[["self"]],["option",["isize"]]]],[11,"as_bool","","",1,[[["self"]],["option",["bool"]]]],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",1,[[["self"],["u16"]],["option",["u64"]]]],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",1,[[["self"],["u16"]],["option",["i64"]]]],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",1,[[["self"]],["jsonvalue"]]],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",1,[[["self"]],["option",["string"]]]],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",1,[[["self"],["t"]],["result"]]],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",1,[[["self"]],["jsonvalue"]]],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",1,[[["self"],["t"]],["bool"]]],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",1,[[["self"],["str"]],["bool"]]],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",1,[[["self"]],["usize"]]],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",1,[[["self"]],["members"]]],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",1,[[["self"]],["membersmut"]]],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,[[["self"]],["entries"]]],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,[[["self"]],["entriesmut"]]],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",1,[[["self"],["str"]],["jsonvalue"]]],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",1,[[["self"]]]],[11,"wrong_type","","",0,[[["str"]],["self"]]],[0,"short","","",N,N],[3,"Short","json::short","",N,N],[17,"MAX_LEN","","",N,N],[11,"from_slice","","Creates a `Short` from a `&str` slice. This method can cause buffer overflow if the length of the slice is larger than `MAX_LEN`, which is why it is marked as `unsafe`.",2,[[["str"]],["self"]]],[11,"as_str","","Cheaply obtain a `&str` slice out of the `Short`.",2,[[["self"]],["str"]]],[0,"object","json","",N,N],[3,"Object","json::object","A binary tree implementation of a string -> `JsonValue` map. You normally don't have to interact with instances of `Object`, much more likely you will be using the `JsonValue::Object` variant, which wraps around this struct.",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[11,"new","","Create a new, empty instance of `Object`. Empty `Object` performs no allocation until a value is inserted into it.",3,[[],["self"]]],[11,"with_capacity","","Create a new `Object` with memory preallocated for `capacity` number of entries.",3,[[["usize"]],["self"]]],[11,"insert","","Insert a new entry, or override an existing one. Note that `key` has to be a `&str` slice and not an owned `String`. The internals of `Object` will handle the heap allocation of the key if needed for better performance.",3,[[["self"],["str"],["jsonvalue"]]]],[11,"override_last","","",3,[[["self"],["jsonvalue"]]]],[11,"get","","",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"get_mut","","",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"remove","","Attempts to remove the value behind `key`, if successful will return the `JsonValue` stored behind the `key`.",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"clear","","Wipe the `Object` clear. The capacity will remain untouched.",3,[[["self"]]]],[11,"iter","","",3,[[["self"]],["iter"]]],[11,"iter_mut","","",3,[[["self"]],["itermut"]]],[11,"dump","","Prints out the value as JSON string.",3,[[["self"]],["string"]]],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",3,[[["self"],["u16"]],["string"]]],[11,"empty","","Create an empty iterator that always returns `None`",4,[[],["self"]]],[11,"empty","","Create an empty iterator that always returns `None`",5,[[],["self"]]],[0,"number","json","",N,N],[3,"Number","json::number","Number representation used inside `JsonValue`. You can easily convert the `Number` type into native Rust number types and back, or use the equality operator with another number type.",N,N],[17,"NAN","","NaN value represented in `Number` type. NaN is equal to itself.",N,N],[11,"from_parts_unchecked","","Construct a new `Number` from parts. This can't create a NaN value.",6,[[["bool"],["u64"],["i16"]],["self"]]],[11,"from_parts","","Construct a new `Number` from parts, stripping unnecessary trailing zeroes. This can't create a NaN value.",6,[[["bool"],["u64"],["i16"]],["self"]]],[11,"as_parts","","Reverse to `from_parts` - obtain parts from an existing `Number`.",6,N],[11,"is_sign_positive","","",6,[[["self"]],["bool"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"is_nan","","",6,[[["self"]],["bool"]]],[11,"is_empty","","Test if the number is NaN or has a zero value.",6,[[["self"]],["bool"]]],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",6,[[["self"],["u16"]],["option",["u64"]]]],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",6,[[["self"],["u16"]],["option",["i64"]]]],[0,"iterators","json","",N,N],[6,"Members","json::iterators","Iterator over members of `JsonValue::Array`.",N,N],[6,"MembersMut","","Mutable iterator over members of `JsonValue::Array`.",N,N],[6,"Entries","","Iterator over key value pairs of `JsonValue::Object`.",N,N],[6,"EntriesMut","","Mutable iterator over key value pairs of `JsonValue::Object`.",N,N],[6,"Result","json","Result type used by this crate.",N,N],[6,"Array","","",N,N],[14,"array","","Helper macro for creating instances of `JsonValue::Array`.",N,N],[14,"object","","Helper macro for creating instances of `JsonValue::Object`.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","json::short","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","json::object","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","json::number","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"clone","json","",1,[[["self"]],["jsonvalue"]]],[11,"clone","json::short","",2,[[["self"]],["short"]]],[11,"clone","json::object","",3,[[["self"]],["self"]]],[11,"clone","json::number","",6,[[["self"]],["number"]]],[11,"from","json","",1,[[["str"]],["jsonvalue"]]],[11,"from","","",1,[[["option"]],["jsonvalue"]]],[11,"from","","",1,[[["vec"]],["jsonvalue"]]],[11,"from","","",1,[[["hashmap",["string","jsonvalue"]]],["jsonvalue"]]],[11,"from","","",1,[[["btreemap",["string","jsonvalue"]]],["jsonvalue"]]],[11,"from","","",1,[[["string"]],["jsonvalue"]]],[11,"from","","",1,[[["isize"]],["jsonvalue"]]],[11,"from","","",1,[[["usize"]],["jsonvalue"]]],[11,"from","","",1,[[["i8"]],["jsonvalue"]]],[11,"from","","",1,[[["i16"]],["jsonvalue"]]],[11,"from","","",1,[[["i32"]],["jsonvalue"]]],[11,"from","","",1,[[["i64"]],["jsonvalue"]]],[11,"from","","",1,[[["u8"]],["jsonvalue"]]],[11,"from","","",1,[[["u16"]],["jsonvalue"]]],[11,"from","","",1,[[["u32"]],["jsonvalue"]]],[11,"from","","",1,[[["u64"]],["jsonvalue"]]],[11,"from","","",1,[[["f32"]],["jsonvalue"]]],[11,"from","","",1,[[["f64"]],["jsonvalue"]]],[11,"from","","",1,[[["number"]],["jsonvalue"]]],[11,"from","","",1,[[["object"]],["jsonvalue"]]],[11,"from","","",1,[[["bool"]],["jsonvalue"]]],[11,"from","json::number","",6,[[["f64"]],["number"]]],[11,"from","","",6,[[["f32"]],["number"]]],[11,"from","","",6,[[["isize"]],["number"]]],[11,"from","","",6,[[["i8"]],["number"]]],[11,"from","","",6,[[["i16"]],["number"]]],[11,"from","","",6,[[["i32"]],["number"]]],[11,"from","","",6,[[["i64"]],["number"]]],[11,"from","","",6,[[["usize"]],["number"]]],[11,"from","","",6,[[["u8"]],["number"]]],[11,"from","","",6,[[["u16"]],["number"]]],[11,"from","","",6,[[["u32"]],["number"]]],[11,"from","","",6,[[["u64"]],["number"]]],[11,"next","json::object","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"eq","json","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","","",1,[[["self"],["isize"]],["bool"]]],[11,"eq","","",1,[[["self"],["usize"]],["bool"]]],[11,"eq","","",1,[[["self"],["i8"]],["bool"]]],[11,"eq","","",1,[[["self"],["i16"]],["bool"]]],[11,"eq","","",1,[[["self"],["i32"]],["bool"]]],[11,"eq","","",1,[[["self"],["i64"]],["bool"]]],[11,"eq","","",1,[[["self"],["u8"]],["bool"]]],[11,"eq","","",1,[[["self"],["u16"]],["bool"]]],[11,"eq","","",1,[[["self"],["u32"]],["bool"]]],[11,"eq","","",1,[[["self"],["u64"]],["bool"]]],[11,"eq","","",1,[[["self"],["f32"]],["bool"]]],[11,"eq","","",1,[[["self"],["f64"]],["bool"]]],[11,"eq","","",1,[[["self"],["number"]],["bool"]]],[11,"eq","json::number","",6,[[["self"],["jsonvalue"]],["bool"]]],[11,"eq","json","",1,[[["self"],["object"]],["bool"]]],[11,"eq","json::object","",3,[[["self"],["jsonvalue"]],["bool"]]],[11,"eq","json","",1,[[["self"],["bool"]],["bool"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","json::short","",2,[[["self"],["short"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"eq","json::object","",3,[[["self"],["object"]],["bool"]]],[11,"eq","json::number","",6,[[["self"],["number"]],["bool"]]],[11,"eq","","",6,[[["self"],["f64"]],["bool"]]],[11,"eq","","",6,[[["self"],["f32"]],["bool"]]],[11,"eq","","",6,[[["self"],["isize"]],["bool"]]],[11,"eq","","",6,[[["self"],["i8"]],["bool"]]],[11,"eq","","",6,[[["self"],["i16"]],["bool"]]],[11,"eq","","",6,[[["self"],["i32"]],["bool"]]],[11,"eq","","",6,[[["self"],["i64"]],["bool"]]],[11,"eq","","",6,[[["self"],["usize"]],["bool"]]],[11,"eq","","",6,[[["self"],["u8"]],["bool"]]],[11,"eq","","",6,[[["self"],["u16"]],["bool"]]],[11,"eq","","",6,[[["self"],["u32"]],["bool"]]],[11,"eq","","",6,[[["self"],["u64"]],["bool"]]],[11,"next_back","json::object","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"fmt","json","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","json::short","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","json::number","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","json","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","json::short","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","json::object","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","json::number","",6,[[["self"],["formatter"]],["result"]]],[11,"neg","","",6,[[["self"]],["number"]]],[11,"deref","json::short","",2,[[["self"]],["str"]]],[11,"index","json","",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["str"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index","json::object","",3,[[["self"],["str"]],["jsonvalue"]]],[11,"index","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","json","",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["str"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","json::object","",3,[[["self"],["str"]],["jsonvalue"]]],[11,"index_mut","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"description","json","",0,[[["self"]],["str"]]]],"paths":[[4,"Error"],[4,"JsonValue"],[3,"Short"],[3,"Object"],[3,"Iter"],[3,"IterMut"],[3,"Number"]]};
searchIndex["kernel32"]={"doc":"","items":[],"paths":[]};
searchIndex["language_tags"]={"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[4,"Error","","Defines an Error type for langtags.",N,N],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,N],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,N],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,N],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,N],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,N],[13,"InvalidLanguage","","The given language subtag is invalid.",1,N],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,N],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,N],[6,"Result","","Result type used for this library.",N,N],[17,"GRANDFATHERED","","Contains all grandfathered tags.",N,N],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[14,"langtag","","Utility for creating simple language tags.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"__lazy_static_create","","",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[4,"c_void","libc","Equivalent to C's `void` type when used as a [pointer].",N,N],[3,"group","","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[12,"ssi_addr_lsb","","",47,N],[12,"ssi_syscall","","",47,N],[12,"ssi_call_addr","","",47,N],[12,"ssi_arch","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Ehdr","","",N,N],[12,"e_ident","","",70,N],[12,"e_type","","",70,N],[12,"e_machine","","",70,N],[12,"e_version","","",70,N],[12,"e_entry","","",70,N],[12,"e_phoff","","",70,N],[12,"e_shoff","","",70,N],[12,"e_flags","","",70,N],[12,"e_ehsize","","",70,N],[12,"e_phentsize","","",70,N],[12,"e_phnum","","",70,N],[12,"e_shentsize","","",70,N],[12,"e_shnum","","",70,N],[12,"e_shstrndx","","",70,N],[3,"Elf64_Ehdr","","",N,N],[12,"e_ident","","",71,N],[12,"e_type","","",71,N],[12,"e_machine","","",71,N],[12,"e_version","","",71,N],[12,"e_entry","","",71,N],[12,"e_phoff","","",71,N],[12,"e_shoff","","",71,N],[12,"e_flags","","",71,N],[12,"e_ehsize","","",71,N],[12,"e_phentsize","","",71,N],[12,"e_phnum","","",71,N],[12,"e_shentsize","","",71,N],[12,"e_shnum","","",71,N],[12,"e_shstrndx","","",71,N],[3,"Elf32_Sym","","",N,N],[12,"st_name","","",72,N],[12,"st_value","","",72,N],[12,"st_size","","",72,N],[12,"st_info","","",72,N],[12,"st_other","","",72,N],[12,"st_shndx","","",72,N],[3,"Elf64_Sym","","",N,N],[12,"st_name","","",73,N],[12,"st_info","","",73,N],[12,"st_other","","",73,N],[12,"st_shndx","","",73,N],[12,"st_value","","",73,N],[12,"st_size","","",73,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",74,N],[12,"p_offset","","",74,N],[12,"p_vaddr","","",74,N],[12,"p_paddr","","",74,N],[12,"p_filesz","","",74,N],[12,"p_memsz","","",74,N],[12,"p_flags","","",74,N],[12,"p_align","","",74,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",75,N],[12,"p_flags","","",75,N],[12,"p_offset","","",75,N],[12,"p_vaddr","","",75,N],[12,"p_paddr","","",75,N],[12,"p_filesz","","",75,N],[12,"p_memsz","","",75,N],[12,"p_align","","",75,N],[3,"Elf32_Shdr","","",N,N],[12,"sh_name","","",76,N],[12,"sh_type","","",76,N],[12,"sh_flags","","",76,N],[12,"sh_addr","","",76,N],[12,"sh_offset","","",76,N],[12,"sh_size","","",76,N],[12,"sh_link","","",76,N],[12,"sh_info","","",76,N],[12,"sh_addralign","","",76,N],[12,"sh_entsize","","",76,N],[3,"Elf64_Shdr","","",N,N],[12,"sh_name","","",77,N],[12,"sh_type","","",77,N],[12,"sh_flags","","",77,N],[12,"sh_addr","","",77,N],[12,"sh_offset","","",77,N],[12,"sh_size","","",77,N],[12,"sh_link","","",77,N],[12,"sh_info","","",77,N],[12,"sh_addralign","","",77,N],[12,"sh_entsize","","",77,N],[3,"Elf32_Chdr","","",N,N],[12,"ch_type","","",78,N],[12,"ch_size","","",78,N],[12,"ch_addralign","","",78,N],[3,"Elf64_Chdr","","",N,N],[12,"ch_type","","",79,N],[12,"ch_reserved","","",79,N],[12,"ch_size","","",79,N],[12,"ch_addralign","","",79,N],[3,"ucred","","",N,N],[12,"pid","","",80,N],[12,"uid","","",80,N],[12,"gid","","",80,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",81,N],[12,"mnt_dir","","",81,N],[12,"mnt_type","","",81,N],[12,"mnt_opts","","",81,N],[12,"mnt_freq","","",81,N],[12,"mnt_passno","","",81,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",82,N],[12,"version","","",82,N],[12,"reserved","","",82,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",83,N],[12,"ipi6_ifindex","","",83,N],[3,"arpd_request","","",N,N],[12,"req","","",84,N],[12,"ip","","",84,N],[12,"dev","","",84,N],[12,"stamp","","",84,N],[12,"updated","","",84,N],[12,"ha","","",84,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",85,N],[12,"aio_lio_opcode","","",85,N],[12,"aio_reqprio","","",85,N],[12,"aio_buf","","",85,N],[12,"aio_nbytes","","",85,N],[12,"aio_sigevent","","",85,N],[12,"aio_offset","","",85,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",86,N],[12,"e_exit","","",86,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",87,N],[12,"tv_usec","","",87,N],[3,"utmpx","","",N,N],[12,"ut_type","","",88,N],[12,"ut_pid","","",88,N],[12,"ut_line","","",88,N],[12,"ut_id","","",88,N],[12,"ut_user","","",88,N],[12,"ut_host","","",88,N],[12,"ut_exit","","",88,N],[12,"ut_session","","",88,N],[12,"ut_tv","","",88,N],[12,"ut_addr_v6","","",88,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",89,N],[12,"sa_mask","","",89,N],[12,"sa_flags","","",89,N],[12,"sa_restorer","","",89,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",90,N],[12,"ss_flags","","",90,N],[12,"ss_size","","",90,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",91,N],[12,"si_errno","","",91,N],[12,"si_code","","",91,N],[12,"_pad","","",91,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",92,N],[12,"gl_pathv","","",92,N],[12,"gl_offs","","",92,N],[12,"gl_flags","","",92,N],[3,"statfs","","",N,N],[12,"f_type","","",93,N],[12,"f_bsize","","",93,N],[12,"f_blocks","","",93,N],[12,"f_bfree","","",93,N],[12,"f_bavail","","",93,N],[12,"f_files","","",93,N],[12,"f_ffree","","",93,N],[12,"f_fsid","","",93,N],[12,"f_namelen","","",93,N],[12,"f_frsize","","",93,N],[3,"msghdr","","",N,N],[12,"msg_name","","",94,N],[12,"msg_namelen","","",94,N],[12,"msg_iov","","",94,N],[12,"msg_iovlen","","",94,N],[12,"msg_control","","",94,N],[12,"msg_controllen","","",94,N],[12,"msg_flags","","",94,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",95,N],[12,"cmsg_level","","",95,N],[12,"cmsg_type","","",95,N],[3,"termios","","",N,N],[12,"c_iflag","","",96,N],[12,"c_oflag","","",96,N],[12,"c_cflag","","",96,N],[12,"c_lflag","","",96,N],[12,"c_line","","",96,N],[12,"c_cc","","",96,N],[12,"c_ispeed","","",96,N],[12,"c_ospeed","","",96,N],[3,"flock","","",N,N],[12,"l_type","","",97,N],[12,"l_whence","","",97,N],[12,"l_start","","",97,N],[12,"l_len","","",97,N],[12,"l_pid","","",97,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",98,N],[12,"ordblks","","",98,N],[12,"smblks","","",98,N],[12,"hblks","","",98,N],[12,"hblkhd","","",98,N],[12,"usmblks","","",98,N],[12,"fsmblks","","",98,N],[12,"uordblks","","",98,N],[12,"fordblks","","",98,N],[12,"keepcost","","",98,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",99,N],[12,"nlmsg_type","","",99,N],[12,"nlmsg_flags","","",99,N],[12,"nlmsg_seq","","",99,N],[12,"nlmsg_pid","","",99,N],[3,"nlmsgerr","","",N,N],[12,"error","","",100,N],[12,"msg","","",100,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",101,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",102,N],[12,"nm_block_nr","","",102,N],[12,"nm_frame_size","","",102,N],[12,"nm_frame_nr","","",102,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",103,N],[12,"nm_len","","",103,N],[12,"nm_group","","",103,N],[12,"nm_pid","","",103,N],[12,"nm_uid","","",103,N],[12,"nm_gid","","",103,N],[3,"nlattr","","",N,N],[12,"nla_len","","",104,N],[12,"nla_type","","",104,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",105,N],[12,"rt_dst","","",105,N],[12,"rt_gateway","","",105,N],[12,"rt_genmask","","",105,N],[12,"rt_flags","","",105,N],[12,"rt_pad2","","",105,N],[12,"rt_pad3","","",105,N],[12,"rt_tos","","",105,N],[12,"rt_class","","",105,N],[12,"rt_pad4","","",105,N],[12,"rt_metric","","",105,N],[12,"rt_dev","","",105,N],[12,"rt_mtu","","",105,N],[12,"rt_window","","",105,N],[12,"rt_irtt","","",105,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",106,N],[12,"loads","","",106,N],[12,"totalram","","",106,N],[12,"freeram","","",106,N],[12,"sharedram","","",106,N],[12,"bufferram","","",106,N],[12,"totalswap","","",106,N],[12,"freeswap","","",106,N],[12,"procs","","",106,N],[12,"pad","","",106,N],[12,"totalhigh","","",106,N],[12,"freehigh","","",106,N],[12,"mem_unit","","",106,N],[12,"_f","","",106,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",107,N],[12,"msg_stime","","",107,N],[12,"msg_rtime","","",107,N],[12,"msg_ctime","","",107,N],[12,"msg_qnum","","",107,N],[12,"msg_qbytes","","",107,N],[12,"msg_lspid","","",107,N],[12,"msg_lrpid","","",107,N],[3,"stat","","",N,N],[12,"st_dev","","",108,N],[12,"st_ino","","",108,N],[12,"st_nlink","","",108,N],[12,"st_mode","","",108,N],[12,"st_uid","","",108,N],[12,"st_gid","","",108,N],[12,"st_rdev","","",108,N],[12,"st_size","","",108,N],[12,"st_blksize","","",108,N],[12,"st_blocks","","",108,N],[12,"st_atime","","",108,N],[12,"st_atime_nsec","","",108,N],[12,"st_mtime","","",108,N],[12,"st_mtime_nsec","","",108,N],[12,"st_ctime","","",108,N],[12,"st_ctime_nsec","","",108,N],[3,"stat64","","",N,N],[12,"st_dev","","",109,N],[12,"st_ino","","",109,N],[12,"st_nlink","","",109,N],[12,"st_mode","","",109,N],[12,"st_uid","","",109,N],[12,"st_gid","","",109,N],[12,"st_rdev","","",109,N],[12,"st_size","","",109,N],[12,"st_blksize","","",109,N],[12,"st_blocks","","",109,N],[12,"st_atime","","",109,N],[12,"st_atime_nsec","","",109,N],[12,"st_mtime","","",109,N],[12,"st_mtime_nsec","","",109,N],[12,"st_ctime","","",109,N],[12,"st_ctime_nsec","","",109,N],[3,"statfs64","","",N,N],[12,"f_type","","",110,N],[12,"f_bsize","","",110,N],[12,"f_blocks","","",110,N],[12,"f_bfree","","",110,N],[12,"f_bavail","","",110,N],[12,"f_files","","",110,N],[12,"f_ffree","","",110,N],[12,"f_fsid","","",110,N],[12,"f_namelen","","",110,N],[12,"f_frsize","","",110,N],[12,"f_flags","","",110,N],[12,"f_spare","","",110,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",111,N],[12,"f_frsize","","",111,N],[12,"f_blocks","","",111,N],[12,"f_bfree","","",111,N],[12,"f_bavail","","",111,N],[12,"f_files","","",111,N],[12,"f_ffree","","",111,N],[12,"f_favail","","",111,N],[12,"f_fsid","","",111,N],[12,"f_flag","","",111,N],[12,"f_namemax","","",111,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",112,N],[12,"exponent","","",112,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",113,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",114,N],[12,"swd","","",114,N],[12,"ftw","","",114,N],[12,"fop","","",114,N],[12,"rip","","",114,N],[12,"rdp","","",114,N],[12,"mxcsr","","",114,N],[12,"mxcr_mask","","",114,N],[12,"_st","","",114,N],[12,"_xmm","","",114,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",115,N],[12,"swd","","",115,N],[12,"ftw","","",115,N],[12,"fop","","",115,N],[12,"rip","","",115,N],[12,"rdp","","",115,N],[12,"mxcsr","","",115,N],[12,"mxcr_mask","","",115,N],[12,"st_space","","",115,N],[12,"xmm_space","","",115,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",116,N],[12,"r14","","",116,N],[12,"r13","","",116,N],[12,"r12","","",116,N],[12,"rbp","","",116,N],[12,"rbx","","",116,N],[12,"r11","","",116,N],[12,"r10","","",116,N],[12,"r9","","",116,N],[12,"r8","","",116,N],[12,"rax","","",116,N],[12,"rcx","","",116,N],[12,"rdx","","",116,N],[12,"rsi","","",116,N],[12,"rdi","","",116,N],[12,"orig_rax","","",116,N],[12,"rip","","",116,N],[12,"cs","","",116,N],[12,"eflags","","",116,N],[12,"rsp","","",116,N],[12,"ss","","",116,N],[12,"fs_base","","",116,N],[12,"gs_base","","",116,N],[12,"ds","","",116,N],[12,"es","","",116,N],[12,"fs","","",116,N],[12,"gs","","",116,N],[3,"user","","",N,N],[12,"regs","","",117,N],[12,"u_fpvalid","","",117,N],[12,"i387","","",117,N],[12,"u_tsize","","",117,N],[12,"u_dsize","","",117,N],[12,"u_ssize","","",117,N],[12,"start_code","","",117,N],[12,"start_stack","","",117,N],[12,"signal","","",117,N],[12,"u_ar0","","",117,N],[12,"u_fpstate","","",117,N],[12,"magic","","",117,N],[12,"u_comm","","",117,N],[12,"u_debugreg","","",117,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",118,N],[12,"fpregs","","",118,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",119,N],[12,"uc_link","","",119,N],[12,"uc_stack","","",119,N],[12,"uc_mcontext","","",119,N],[12,"uc_sigmask","","",119,N],[3,"ipc_perm","","",N,N],[12,"__key","","",120,N],[12,"uid","","",120,N],[12,"gid","","",120,N],[12,"cuid","","",120,N],[12,"cgid","","",120,N],[12,"mode","","",120,N],[12,"__seq","","",120,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",121,N],[12,"shm_segsz","","",121,N],[12,"shm_atime","","",121,N],[12,"shm_dtime","","",121,N],[12,"shm_ctime","","",121,N],[12,"shm_cpid","","",121,N],[12,"shm_lpid","","",121,N],[12,"shm_nattch","","",121,N],[3,"termios2","","",N,N],[12,"c_iflag","","",122,N],[12,"c_oflag","","",122,N],[12,"c_cflag","","",122,N],[12,"c_lflag","","",122,N],[12,"c_line","","",122,N],[12,"c_cc","","",122,N],[12,"c_ispeed","","",122,N],[12,"c_ospeed","","",122,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",123,N],[12,"f_frsize","","",123,N],[12,"f_blocks","","",123,N],[12,"f_bfree","","",123,N],[12,"f_bavail","","",123,N],[12,"f_files","","",123,N],[12,"f_ffree","","",123,N],[12,"f_favail","","",123,N],[12,"f_fsid","","",123,N],[12,"f_flag","","",123,N],[12,"f_namemax","","",123,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"CMSG_FIRSTHDR","","",N,N],[5,"CMSG_NXTHDR","","",N,N],[5,"CMSG_DATA","","",N,N],[5,"CMSG_SPACE","","",N,[[["c_uint"]],["c_uint"]]],[5,"CMSG_LEN","","",N,[[["c_uint"]],["c_uint"]]],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"truncate","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"fallocate64","","",N,N],[5,"posix_fallocate","","",N,N],[5,"posix_fallocate64","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"mallopt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"Elf64_Sxword","","",N,N],[6,"Elf32_Section","","",N,N],[6,"Elf64_Section","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"M_MXFAST","","",N,N],[17,"M_NLBLKS","","",N,N],[17,"M_GRAIN","","",N,N],[17,"M_KEEP","","",N,N],[17,"M_TRIM_THRESHOLD","","",N,N],[17,"M_TOP_PAD","","",N,N],[17,"M_MMAP_THRESHOLD","","",N,N],[17,"M_MMAP_MAX","","",N,N],[17,"M_CHECK_ACTION","","",N,N],[17,"M_PERTURB","","",N,N],[17,"M_ARENA_TEST","","",N,N],[17,"M_ARENA_MAX","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",125,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",126,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",127,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",128,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",129,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",130,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",131,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",132,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",133,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",134,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_ehdr"]]],[11,"clone","","",71,[[["self"]],["elf64_ehdr"]]],[11,"clone","","",72,[[["self"]],["elf32_sym"]]],[11,"clone","","",73,[[["self"]],["elf64_sym"]]],[11,"clone","","",74,[[["self"]],["elf32_phdr"]]],[11,"clone","","",75,[[["self"]],["elf64_phdr"]]],[11,"clone","","",76,[[["self"]],["elf32_shdr"]]],[11,"clone","","",77,[[["self"]],["elf64_shdr"]]],[11,"clone","","",78,[[["self"]],["elf32_chdr"]]],[11,"clone","","",79,[[["self"]],["elf64_chdr"]]],[11,"clone","","",80,[[["self"]],["ucred"]]],[11,"clone","","",81,[[["self"]],["mntent"]]],[11,"clone","","",135,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",136,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",82,[[["self"]],["genlmsghdr"]]],[11,"clone","","",83,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",84,[[["self"]],["arpd_request"]]],[11,"clone","","",85,[[["self"]],["aiocb"]]],[11,"clone","","",86,[[["self"]],["__exit_status"]]],[11,"clone","","",87,[[["self"]],["__timeval"]]],[11,"clone","","",88,[[["self"]],["utmpx"]]],[11,"clone","","",89,[[["self"]],["sigaction"]]],[11,"clone","","",90,[[["self"]],["stack_t"]]],[11,"clone","","",91,[[["self"]],["siginfo_t"]]],[11,"clone","","",92,[[["self"]],["glob64_t"]]],[11,"clone","","",93,[[["self"]],["statfs"]]],[11,"clone","","",94,[[["self"]],["msghdr"]]],[11,"clone","","",95,[[["self"]],["cmsghdr"]]],[11,"clone","","",96,[[["self"]],["termios"]]],[11,"clone","","",97,[[["self"]],["flock"]]],[11,"clone","","",137,[[["self"]],["sem_t"]]],[11,"clone","","",98,[[["self"]],["mallinfo"]]],[11,"clone","","",99,[[["self"]],["nlmsghdr"]]],[11,"clone","","",100,[[["self"]],["nlmsgerr"]]],[11,"clone","","",101,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",102,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",103,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",104,[[["self"]],["nlattr"]]],[11,"clone","","",105,[[["self"]],["rtentry"]]],[11,"clone","","",138,[[["self"]],["sigset_t"]]],[11,"clone","","",106,[[["self"]],["sysinfo"]]],[11,"clone","","",107,[[["self"]],["msqid_ds"]]],[11,"clone","","",108,[[["self"]],["stat"]]],[11,"clone","","",109,[[["self"]],["stat64"]]],[11,"clone","","",110,[[["self"]],["statfs64"]]],[11,"clone","","",111,[[["self"]],["statvfs64"]]],[11,"clone","","",139,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",112,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",113,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",114,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",115,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",116,[[["self"]],["user_regs_struct"]]],[11,"clone","","",117,[[["self"]],["user"]]],[11,"clone","","",118,[[["self"]],["mcontext_t"]]],[11,"clone","","",119,[[["self"]],["ucontext_t"]]],[11,"clone","","",120,[[["self"]],["ipc_perm"]]],[11,"clone","","",121,[[["self"]],["shmid_ds"]]],[11,"clone","","",122,[[["self"]],["termios2"]]],[11,"clone","","",123,[[["self"]],["statvfs"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"Elf32_Chdr"],[3,"Elf64_Chdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[4,"c_void"],[3,"fd_set"],[3,"in6_rtmsg"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"sem_t"],[3,"sigset_t"],[3,"pthread_attr_t"],[4,"DIR"],[4,"locale_t"],[4,"FILE"],[4,"fpos_t"],[4,"timezone"],[4,"fpos64_t"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N]],"paths":[]};
searchIndex["mime"]={"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[4,"TopLevel","","",N,N],[13,"Star","","",1,N],[13,"Text","","",1,N],[13,"Image","","",1,N],[13,"Audio","","",1,N],[13,"Video","","",1,N],[13,"Application","","",1,N],[13,"Multipart","","",1,N],[13,"Message","","",1,N],[13,"Model","","",1,N],[13,"Ext","","",1,N],[4,"SubLevel","","",N,N],[13,"Star","","",2,N],[13,"Plain","","",2,N],[13,"Html","","",2,N],[13,"Xml","","",2,N],[13,"Javascript","","",2,N],[13,"Css","","",2,N],[13,"EventStream","","",2,N],[13,"Json","","",2,N],[13,"WwwFormUrlEncoded","","",2,N],[13,"Msgpack","","",2,N],[13,"OctetStream","","",2,N],[13,"FormData","","",2,N],[13,"Png","","",2,N],[13,"Gif","","",2,N],[13,"Bmp","","",2,N],[13,"Jpeg","","",2,N],[13,"Mpeg","","",2,N],[13,"Mp4","","",2,N],[13,"Ogg","","",2,N],[13,"Ext","","",2,N],[4,"Attr","","",N,N],[13,"Charset","","",3,N],[13,"Boundary","","",3,N],[13,"Q","","",3,N],[13,"Ext","","",3,N],[4,"Value","","",N,N],[13,"Utf8","","",4,N],[13,"Ext","","",4,N],[6,"Param","","",N,N],[11,"as_str","","",1,[[["self"]],["str"]]],[11,"as_str","","",2,[[["self"]],["str"]]],[11,"as_str","","",3,[[["self"]],["str"]]],[11,"as_str","","",4,[[["self"]],["str"]]],[11,"get_param","","",0,[[["self"],["a"]],["option",["value"]]]],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"clone","","",1,[[["self"]],["toplevel"]]],[11,"clone","","",2,[[["self"]],["sublevel"]]],[11,"clone","","",3,[[["self"]],["attr"]]],[11,"clone","","",4,[[["self"]],["value"]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["mime"]],["bool"]]],[11,"le","","",0,[[["self"],["mime"]],["bool"]]],[11,"gt","","",0,[[["self"],["mime"]],["bool"]]],[11,"ge","","",0,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["attr"]],["bool"]]],[11,"le","","",3,[[["self"],["attr"]],["bool"]]],[11,"gt","","",3,[[["self"],["attr"]],["bool"]]],[11,"ge","","",3,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["value"]],["bool"]]],[11,"le","","",4,[[["self"],["value"]],["bool"]]],[11,"gt","","",4,[[["self"],["value"]],["bool"]]],[11,"ge","","",4,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"eq","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["attr"]],["bool"]]],[11,"eq","","",3,[[["self"],["string"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["value"]],["bool"]]],[11,"eq","","",4,[[["self"],["string"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["sublevel"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["value"]],["ordering"]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",2,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",3,[[["str"]],["result",["attr"]]]],[11,"from_str","","",4,[[["str"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]],[11,"deref","","",1,[[["self"]],["str"]]],[11,"deref","","",2,[[["self"]],["str"]]],[11,"deref","","",3,[[["self"]],["str"]]],[11,"deref","","",4,[[["self"]],["str"]]]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["mime_guess"]={"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",N,[[["p"]],["mime"]]],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",N,[[["p"]],["option",["mime"]]]],[5,"get_mime_type","","Get the MIME type associated with a file extension.",N,[[["str"]],["mime"]]],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",N,[[["str"]],["option",["mime"]]]],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",N,[[["str"]],["option",["str"]]]],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`. ",N,[[["mime"]],["option"]]],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string. ",N,[[["str"]],["option"]]],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",N,[[["str"],["str"]],["option"]]],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",N,[[],["mime"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["mime"]],["bool"]]],[11,"le","","",0,[[["self"],["mime"]],["bool"]]],[11,"gt","","",0,[[["self"],["mime"]],["bool"]]],[11,"ge","","",0,[[["self"],["mime"]],["bool"]]],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"get_param","","",0,[[["self"],["a"]],["option",["value"]]]]],"paths":[[3,"Mime"]]};
searchIndex["miniz_sys"]={"doc":"","items":[[3,"mz_stream","miniz_sys","",N,N],[12,"next_in","","",0,N],[12,"avail_in","","",0,N],[12,"total_in","","",0,N],[12,"next_out","","",0,N],[12,"avail_out","","",0,N],[12,"total_out","","",0,N],[12,"msg","","",0,N],[12,"state","","",0,N],[12,"zalloc","","",0,N],[12,"zfree","","",0,N],[12,"opaque","","",0,N],[12,"data_type","","",0,N],[12,"adler","","",0,N],[12,"reserved","","",0,N],[4,"mz_internal_state","","",N,N],[5,"mz_deflateInit2","","",N,N],[5,"mz_deflate","","",N,N],[5,"mz_deflateEnd","","",N,N],[5,"mz_deflateReset","","",N,N],[5,"mz_inflateInit2","","",N,N],[5,"mz_inflate","","",N,N],[5,"mz_inflateEnd","","",N,N],[5,"mz_crc32","","",N,N],[6,"mz_alloc_func","","",N,N],[6,"mz_free_func","","",N,N],[17,"MZ_NO_FLUSH","","",N,N],[17,"MZ_PARTIAL_FLUSH","","",N,N],[17,"MZ_SYNC_FLUSH","","",N,N],[17,"MZ_FULL_FLUSH","","",N,N],[17,"MZ_FINISH","","",N,N],[17,"MZ_BLOCK","","",N,N],[17,"MZ_OK","","",N,N],[17,"MZ_STREAM_END","","",N,N],[17,"MZ_NEED_DICT","","",N,N],[17,"MZ_ERRNO","","",N,N],[17,"MZ_STREAM_ERROR","","",N,N],[17,"MZ_DATA_ERROR","","",N,N],[17,"MZ_MEM_ERROR","","",N,N],[17,"MZ_BUF_ERROR","","",N,N],[17,"MZ_VERSION_ERROR","","",N,N],[17,"MZ_PARAM_ERROR","","",N,N],[17,"MZ_DEFLATED","","",N,N],[17,"MZ_DEFAULT_WINDOW_BITS","","",N,N],[17,"MZ_DEFAULT_STRATEGY","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"mz_stream"],[4,"mz_internal_state"]]};
searchIndex["multipart"]={"doc":"Client- and server-side abstractions for HTTP `multipart/form-data` requests.","items":[[0,"client","multipart","The client-side abstraction for multipart requests. Enabled with the `client` feature (on by default).",N,N],[3,"SizedRequest","multipart::client","A wrapper around a request object that measures the request body and sets the `Content-Length` header to its size in bytes.",N,N],[3,"Multipart","","The entry point of the client-side multipart API.",N,N],[0,"hyper","","Client-side integration with Hyper.  Enabled with the `hyper` feature (on by default).",N,N],[5,"content_type","multipart::client::hyper","Create a `Content-Type: multipart/form-data;boundary={bound}`",N,[[["str"]],["contenttype"]]],[0,"lazy","multipart::client","Multipart requests which write out their data in one fell swoop.",N,N],[3,"LazyError","multipart::client::lazy","An error for lazily written multipart requests, including the original error as well as the field which caused the error, if applicable.",N,N],[12,"field_name","","The field that caused the error. If `None`, there was a problem opening the stream to write or finalizing the stream.",0,N],[12,"error","","The inner error.",0,N],[3,"Multipart","","A multipart request which writes all fields at once upon being provided an output stream.",N,N],[3,"PreparedFields","","The result of `Multipart::prepare()` or `Multipart::prepare_threshold()`. Implements `Read`, contains the entire request body.",N,N],[11,"client_request","","Feature: `hyper` Complete a POST request with the given `hyper::client::Client` and URL.",1,[[["self"],["client"],["u"]],["hyperresult",["response"]]]],[11,"client_request_mut","","Feature: `hyper` Complete a POST request with the given `hyper::client::Client` and URL; allows mutating the `hyper::client::RequestBuilder` via the passed closure.",1,[[["self"],["client"],["u"],["f"]],["hyperresult",["response"]]]],[11,"to_body","","Feature: `hyper` Convert `self` to `hyper::client::Body`.",2,[[["self"]],["body"]]],[6,"LazyIoError","","A `LazyError` wrapping `std::io::Error`.",N,N],[8,"IntoCowPath","","Conversion trait necessary for `Multipart::add_file()` to accept borrowed or owned strings and borrowed or owned paths",N,N],[10,"into_cow_path","","Self-explanatory, hopefully",3,[[["self"]],["cow",["path"]]]],[11,"new","","Initialize a new lazy dynamic request. ",1,[[],["self"]]],[11,"add_text","","Add a text field to this request. ",1,[[["self"],["n"],["t"]],["self"]]],[11,"add_file","","Add a file field to this request.",1,[[["self"],["n"],["p"]],["self"]]],[11,"add_stream","","Add a generic stream field to this request,",1,[[["self"],["n"],["r"],["option"],["option",["mime"]]],["self"]]],[11,"send","","Convert `req` to `HttpStream`, write out the fields in this request, and finish the request, returning the response if successful, or the first error encountered.",1,[[["self"],["r"]],["result",["lazyerror"]]]],[11,"prepare","","Export the multipart data contained in this lazy request as an adaptor which implements `Read`.",1,[[["self"]],["result",["preparedfields","lazyioerror"]]]],[11,"prepare_threshold","","Export the multipart data contained in this lazy request to an adaptor which implements `Read`.",1,[[["self"],["option",["u64"]]],["result",["preparedfields","lazyioerror"]]]],[11,"content_len","","Get the content-length value for this set of fields, if applicable (all fields are sized, i.e. not generic streams).",2,[[["self"]],["option",["u64"]]]],[8,"HttpRequest","multipart::client","A trait describing an HTTP request that can be used to send multipart data.",N,N],[16,"Stream","","The HTTP stream type that can be opend by this request, to which the multipart data will be written.",4,N],[16,"Error","","The error type for this request.  Must be compatible with `io::Error` as well as `Self::HttpStream::Error`",4,N],[10,"apply_headers","","Set the `Content-Type` header to `multipart/form-data` and supply the `boundary` value. If `content_len` is given, set the `Content-Length` header to its value.",4,[[["self"],["str"],["option",["u64"]]],["bool"]]],[10,"open_stream","","Open the request stream and return it or any error otherwise. ",4,[[["self"]],["result"]]],[8,"HttpStream","","A trait describing an open HTTP stream that can be written to.",N,N],[16,"Request","","The request type that opened this stream.",5,N],[16,"Response","","The response type that will be returned after the request is completed.",5,N],[16,"Error","","The error type for this stream. Must be compatible with `io::Error` as well as `Self::Request::Error`.",5,N],[10,"finish","","Finalize and close the stream and return the response object, or any error otherwise.",5,[[["self"]],["result"]]],[11,"from_request","","Create a new `Multipart` to wrap a request.",6,[[["r"]],["result",["multipart"]]]],[11,"write_text","","Write a text field to this multipart request. `name` and `val` can be either owned `String` or `&str`.",6,[[["self"],["n"],["v"]],["result"]]],[11,"write_file","","Open a file pointed to by `path` and write its contents to the multipart request,  supplying its filename and guessing its `Content-Type` from its extension.",6,[[["self"],["n"],["p"]],["result"]]],[11,"write_stream","","Write a byte stream to the multipart request as a file field, supplying `filename` if given, and `content_type` if given or `\"application/octet-stream\"` if not.",6,[[["self"],["n"],["st"],["option",["str"]],["option",["mime"]]],["result"]]],[11,"send","","Finalize the request and return the response from the server, or the last error if set.",6,[[["self"]],["result"]]],[11,"from_request_sized","","Create a new `Multipart` using the `SizedRequest` wrapper around `req`.",6,[[["r"]],["result"]]],[14,"chain_result","multipart","Chain a series of results together, with or without previous results.",N,N],[11,"from","multipart::client","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"send_frame","","",7,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",7,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","multipart::client::lazy","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"apply_headers","multipart::client","`SizedRequest` ignores `_content_len` because it sets its own later.",7,[[["self"],["str"],["option",["u64"]]],["bool"]]],[11,"open_stream","","",7,[[["self"]],["result"]]],[11,"finish","","",7,[[["self"]],["result"]]],[11,"into","multipart::client::lazy","",0,[[["self"]],["error"]]],[11,"default","","",1,[[],["multipart"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"write","multipart::client","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"read","multipart::client::lazy","",2,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[3,"LazyError"],[3,"Multipart"],[3,"PreparedFields"],[8,"IntoCowPath"],[8,"HttpRequest"],[8,"HttpStream"],[3,"Multipart"],[3,"SizedRequest"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","net2","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"reuse_port","","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",N,N],[10,"div_floor","","Floored integer division.",0,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",0,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",0,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",0,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",0,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",0,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",1,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",4,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",4,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",4,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",5,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",5,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,[[["self"],["self"]],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,[[["self"],["u32"]],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",12,[[],["self"]]],[10,"infinity","","Returns the infinite value.",12,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",12,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",12,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",12,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",12,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",12,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",12,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",12,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",12,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",12,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",12,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",12,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",12,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",12,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",12,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",12,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",12,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",12,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",12,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",12,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",12,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",12,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",12,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",12,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",12,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",12,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",12,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",12,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",12,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",12,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",12,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",12,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",12,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",12,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",12,N],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[0,"cast","","",N,N],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"pow","","",N,N],[8,"Pow","num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"integer","","",N,N],[8,"Integer","num::integer","",N,N],[10,"div_floor","","Floored integer division.",0,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",0,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",0,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",0,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",0,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",0,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,N],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",N,N],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",18,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",18,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",18,[[["self"]],["self"]]],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[0,"iter","num","",N,N],[3,"Range","num::iter","An iterator over the range [start, stop)",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[0,"traits","num","",N,N],[0,"bounds","num::traits","",N,N],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",5,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",5,[[],["self"]]],[0,"cast","num::traits","",N,N],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[0,"float","num::traits","",N,N],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",19,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",19,[[],["self"]]],[10,"nan","","Returns NaN.",19,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",19,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",19,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",19,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",19,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",19,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",19,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",19,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",19,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",19,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",19,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",19,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",19,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",19,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",19,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",19,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",19,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",19,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",19,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",19,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",19,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",19,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",19,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",19,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",19,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",19,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",19,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",12,[[],["self"]]],[10,"infinity","","Returns the infinite value.",12,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",12,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",12,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",12,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",12,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",12,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",12,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",12,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",12,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",12,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",12,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",12,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",12,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",12,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",12,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",12,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",12,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",12,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",12,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",12,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",12,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",12,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",12,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",12,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",12,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",12,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",12,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",12,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",12,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",12,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",12,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",12,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",12,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",12,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",12,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",20,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",20,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",20,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",20,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",20,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",20,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",20,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",20,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",20,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",20,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",20,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",20,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",20,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",20,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",20,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",20,[[],["self"]]],[0,"identities","num::traits","",N,N],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","num::traits","",N,N],[8,"PrimInt","num::traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,[[["self"],["u32"]],["self"]]],[0,"ops","num::traits","",N,N],[0,"checked","num::traits::ops","",N,N],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",21,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",22,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",23,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",24,[[["self"],["u32"]],["option"]]],[0,"inv","num::traits::ops","",N,N],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",25,N],[10,"inv","","Returns the multiplicative inverse of `self`.",25,N],[0,"mul_add","num::traits::ops","",N,N],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",26,N],[10,"mul_add","","Performs the fused multiply-add operation.",26,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,N],[0,"saturating","num::traits::ops","",N,N],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,[[["self"],["self"]],["self"]]],[0,"wrapping","num::traits::ops","",N,N],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",28,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",29,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",30,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",31,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",32,[[["self"],["u32"]],["self"]]],[0,"pow","num::traits","",N,N],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","num::traits","",N,N],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",33,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",33,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",33,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",33,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",33,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",33,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",33,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",33,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",33,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",33,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",33,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",33,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",33,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",33,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",33,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",33,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",33,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",33,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",33,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",33,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",33,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",33,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",33,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",33,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",33,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",33,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",33,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",33,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",33,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",33,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",33,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",33,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",33,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",33,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",33,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",33,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",33,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",33,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",33,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",33,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",33,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",33,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",33,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",33,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",33,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",33,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",33,[[["self"]],["self"]]],[0,"sign","num::traits","",N,N],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",4,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",4,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",4,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",1,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",34,N],[13,"Invalid","","",34,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",35,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[11,"from","num::integer","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","num::iter","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"into_iter","","",39,[[["self"]],["i"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","num::traits","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","num::integer","",36,[[["self"]],["option"]]],[11,"next_back","num::iter","",38,[[["self"]],["option"]]],[11,"next_back","","",37,[[["self"]],["option"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"next","","",39,[[["self"]],["option"]]],[11,"clone","","",37,[[["self"]],["range"]]],[11,"clone","","",39,[[["self"]],["rangestep"]]],[11,"clone","","",38,[[["self"]],["rangeinclusive"]]],[11,"clone","","",40,[[["self"]],["rangestepinclusive"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",36,[[["t"]],["iterbinomial"]]]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",N,N],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"from","num_traits","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["openssl"]={"doc":"","items":[[0,"asn1","openssl","",N,N],[3,"Asn1Time","openssl::asn1","",N,N],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0,N],[11,"days_from_now","","Creates a new time on specified interval in days from now",0,[[["u32"]],["result",["asn1time","sslerror"]]]],[11,"get_handle","","Returns raw handle",0,N],[0,"bn","openssl","",N,N],[3,"BigNum","openssl::bn","A signed arbitrary-precision integer.",N,N],[4,"RNGProperty","","Specifies the desired properties of a randomly generated `BigNum`.",N,N],[13,"MsbMaybeZero","","The most significant bit of the number is allowed to be 0.",1,N],[13,"MsbOne","","The MSB should be set to 1.",1,N],[13,"TwoMsbOne","","The two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have `2 * bits` length.",1,N],[11,"new","","Creates a new `BigNum` with the value 0.",2,[[],["result",["bignum","sslerror"]]]],[11,"new_from","","Creates a new `BigNum` with the given value.",2,[[["u64"]],["result",["bignum","sslerror"]]]],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",2,[[["str"]],["result",["bignum","sslerror"]]]],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",2,[[["str"]],["result",["bignum","sslerror"]]]],[11,"new_from_ffi","","",2,N],[11,"new_from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",2,N],[11,"checked_sqr","","Returns the square of `self`.",2,[[["self"]],["result",["bignum","sslerror"]]]],[11,"checked_nnmod","","Returns the unsigned remainder of the division `self / n`.",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_add","","Equivalent to `(self + a) mod n`.",2,[[["self"],["bignum"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_sub","","Equivalent to `(self - a) mod n`.",2,[[["self"],["bignum"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_mul","","Equivalent to `(self * a) mod n`.",2,[[["self"],["bignum"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_sqr","","Equivalent to `self² mod n`.",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_exp","","Raises `self` to the `p`th power.",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_exp","","Equivalent to `self.checked_exp(p) mod n`.",2,[[["self"],["bignum"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod_inv","","Calculates the modular multiplicative inverse of `self` modulo `n`, that is, an integer `r` such that `(self * r) % n == 1`.",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"add_word","","Add an `unsigned long` to `self`. This is more efficient than adding a `BigNum`.",2,[[["self"],["c_ulong"]],["result",["sslerror"]]]],[11,"sub_word","","",2,[[["self"],["c_ulong"]],["result",["sslerror"]]]],[11,"mul_word","","",2,[[["self"],["c_ulong"]],["result",["sslerror"]]]],[11,"div_word","","",2,[[["self"],["c_ulong"]],["result",["c_ulong","sslerror"]]]],[11,"mod_word","","",2,[[["self"],["c_ulong"]],["result",["c_ulong","sslerror"]]]],[11,"checked_gcd","","Computes the greatest common denominator of `self` and `a`.",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_generate_prime","","Generates a prime number.",2,[[["i32"],["bool"],["option",["bignum"]],["option",["bignum"]]],["result",["bignum","sslerror"]]]],[11,"is_prime","","Checks whether `self` is prime.",2,[[["self"],["i32"]],["result",["bool","sslerror"]]]],[11,"is_prime_fast","","Checks whether `self` is prime with optional trial division.",2,[[["self"],["i32"],["bool"]],["result",["bool","sslerror"]]]],[11,"checked_new_random","","Generates a cryptographically strong pseudo-random `BigNum`.",2,[[["i32"],["rngproperty"],["bool"]],["result",["bignum","sslerror"]]]],[11,"checked_new_pseudo_random","","The cryptographically weak counterpart to `checked_new_random`.",2,[[["i32"],["rngproperty"],["bool"]],["result",["bignum","sslerror"]]]],[11,"checked_rand_in_range","","Generates a cryptographically strong pseudo-random `BigNum` `r` in the range `0 <= r < self`.",2,[[["self"]],["result",["bignum","sslerror"]]]],[11,"checked_pseudo_rand_in_range","","The cryptographically weak counterpart to `checked_rand_in_range`.",2,[[["self"]],["result",["bignum","sslerror"]]]],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",2,[[["self"],["i32"]],["result",["sslerror"]]]],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",2,[[["self"],["i32"]],["result",["sslerror"]]]],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",2,[[["self"],["i32"]],["bool"]]],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",2,[[["self"],["i32"]],["result",["sslerror"]]]],[11,"checked_shl1","","Returns `self`, shifted left by 1 bit. `self` may be negative.",2,[[["self"]],["result",["bignum","sslerror"]]]],[11,"checked_shr1","","Returns `self`, shifted right by 1 bit. `self` may be negative.",2,[[["self"]],["result",["bignum","sslerror"]]]],[11,"checked_add","","",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_sub","","",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mul","","",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_div","","",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_mod","","",2,[[["self"],["bignum"]],["result",["bignum","sslerror"]]]],[11,"checked_shl","","",2,[[["self"],["i32"]],["result",["bignum","sslerror"]]]],[11,"checked_shr","","",2,[[["self"],["i32"]],["result",["bignum","sslerror"]]]],[11,"negate","","Inverts the sign of `self`.",2,[[["self"]]]],[11,"abs_cmp","","Compare the absolute values of `self` and `oth`.",2,[[["self"],["bignum"]],["ordering"]]],[11,"is_negative","","",2,[[["self"]],["bool"]]],[11,"num_bits","","Returns the number of significant bits in `self`.",2,[[["self"]],["i32"]]],[11,"num_bytes","","Returns the size of `self` in bytes.",2,[[["self"]],["i32"]]],[11,"raw","","",2,N],[11,"raw_ptr","","",2,N],[11,"into_raw","","",2,N],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",2,[[["self"]],["vec",["u8"]]]],[11,"to_dec_str","","Returns a decimal string representation of `self`.",2,[[["self"]],["string"]]],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",2,[[["self"]],["string"]]],[0,"bio","openssl","",N,N],[3,"MemBio","openssl::bio","",N,N],[11,"new","","Creates a new owned memory based BIO",3,[[],["result",["membio","sslerror"]]]],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3,N],[11,"unwrap","","Consumes current bio and returns wrapped value Note that data ownership is lost and should be managed manually",3,N],[11,"get_handle","","Temporarily gets wrapped value",3,N],[11,"set_eof","","Sets the BIO's EOF state.",3,[[["self"],["bool"]]]],[0,"crypto","openssl","",N,N],[0,"hash","openssl::crypto","",N,N],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation.",N,N],[4,"Type","","Message digest (hash) type.",N,N],[13,"MD5","","",4,N],[13,"SHA1","","",4,N],[13,"SHA224","","",4,N],[13,"SHA256","","",4,N],[13,"SHA384","","",4,N],[13,"SHA512","","",4,N],[13,"RIPEMD160","","",4,N],[5,"hash","","Computes the hash of the `data` with the hash `t`.",N,N],[11,"md_len","","Returns the length of the message digest.",4,[[["self"]],["usize"]]],[11,"evp_md","","Internal interface subject to removal.",4,N],[11,"new","","Creates a new `Hasher` with the specified hash type.",5,[[["type"]],["hasher"]]],[11,"finish","","Returns the hash of the data written since creation or the last `finish` and resets the hasher.",5,[[["self"]],["vec",["u8"]]]],[0,"hmac","openssl::crypto","",N,N],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation.",N,N],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`.",N,N],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6,N],[11,"finish","","Returns the hash of the data written since creation or the last `finish` and resets the hasher.",6,[[["self"]],["vec",["u8"]]]],[0,"pkcs5","openssl::crypto","",N,N],[3,"KeyIvPair","openssl::crypto::pkcs5","",N,N],[12,"key","","",7,N],[12,"iv","","",7,N],[5,"evp_bytes_to_key_pbkdf1_compatible","","Derives a key and an IV from various parameters.",N,N],[5,"pbkdf2_hmac_sha1","","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm.",N,N],[0,"pkey","openssl::crypto","",N,N],[3,"PKey","openssl::crypto::pkey","",N,N],[4,"Parts","","",N,N],[13,"Neither","","",8,N],[13,"Public","","",8,N],[13,"Both","","",8,N],[4,"Role","","Represents a role an asymmetric key might be appropriate for.",N,N],[13,"Encrypt","","",9,N],[13,"Decrypt","","",9,N],[13,"Sign","","",9,N],[13,"Verify","","",9,N],[4,"EncryptionPadding","","Type of encryption padding to use.",N,N],[13,"OAEP","","",10,N],[13,"PKCS1v15","","",10,N],[11,"new","","",11,[[],["pkey"]]],[11,"from_handle","","",11,N],[11,"private_key_from_pem","","Reads private key from PEM, takes ownership of handle",11,[[["r"]],["result",["pkey","sslerror"]]]],[11,"public_key_from_pem","","Reads public key from PEM, takes ownership of handle",11,[[["r"]],["result",["pkey","sslerror"]]]],[11,"private_rsa_key_from_pem","","Reads an RSA private key from PEM, takes ownership of handle",11,[[["r"]],["result",["pkey","sslerror"]]]],[11,"public_rsa_key_from_pem","","Reads an RSA public key from PEM, takes ownership of handle",11,[[["r"]],["result",["pkey","sslerror"]]]],[11,"gen","","",11,[[["self"],["usize"]]]],[11,"set_rsa","","assign RSA key to this pkey",11,[[["self"],["rsa"]]]],[11,"get_rsa","","get a reference to the interal RSA key for direct access to the key components",11,[[["self"]],["rsa"]]],[11,"save_pub","","Returns a DER serialized form of the public key, suitable for load_pub().",11,[[["self"]],["vec",["u8"]]]],[11,"load_pub","","Loads a DER serialized form of the public key, as produced by save_pub().",11,N],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for load_priv().",11,[[["self"]],["vec",["u8"]]]],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by save_priv().",11,N],[11,"write_pem","","Stores private key as a PEM",11,[[["self"],["w"]],["result",["sslerror"]]]],[11,"write_pub_pem","","Stores public key as a PEM",11,[[["self"],["w"]],["result",["sslerror"]]]],[11,"size","","Returns the size of the public key modulus.",11,[[["self"]],["usize"]]],[11,"can","","Returns whether this pkey object can perform the specified role.",11,[[["self"],["role"]],["bool"]]],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt() call.",11,[[["self"]],["usize"]]],[11,"private_encrypt_with_padding","","",11,N],[11,"public_encrypt_with_padding","","",11,N],[11,"private_decrypt_with_padding","","",11,N],[11,"public_decrypt_with_padding","","",11,N],[11,"encrypt","","Encrypts data with the public key, using OAEP padding, returning the encrypted data. The supplied data must not be larger than max_data().",11,N],[11,"encrypt_with_padding","","Encrypts data with the public key, using provided padding, returning the encrypted data. The supplied data must not be larger than max_data().",11,N],[11,"public_encrypt","","Encrypts data with the public key, using OAEP padding, returning the encrypted data. The supplied data must not be larger than max_data().",11,N],[11,"public_decrypt","","Decrypts data with the public key, using PKCS1v15 padding, returning the decrypted data.",11,N],[11,"decrypt","","Decrypts data with the private key, expecting OAEP padding, returning the decrypted data.",11,N],[11,"decrypt_with_padding","","Decrypts data with the private key, using provided padding, returning the encrypted data. The supplied data must not be larger than max_data().",11,N],[11,"private_decrypt","","Decrypts data with the private key, expecting OAEP padding, returning the decrypted data.",11,N],[11,"private_encrypt","","Encrypts data with the private key, using PKCS1v15 padding, returning the encrypted data. The supplied data must not be larger than max_data().",11,N],[11,"sign","","Signs data, using OpenSSL's default scheme and adding sha256 ASN.1 information to the signature. The bytes to sign must be the result of a sha256 hashing; returns the signature.",11,N],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on the SHA256 hash of a message. Returns true if the signature is valid, and false otherwise.",11,N],[11,"sign_with_hash","","Signs data, using OpenSSL's default scheme and add ASN.1 information for the given hash type to the signature. The bytes to sign must be the result of this type of hashing; returns the signature.",11,N],[11,"verify_with_hash","","",11,N],[11,"get_handle","","",11,N],[11,"public_eq","","",11,[[["self"],["pkey"]],["bool"]]],[0,"rand","openssl::crypto","",N,N],[5,"rand_bytes","openssl::crypto::rand","",N,[[["usize"]],["vec",["u8"]]]],[0,"symm","openssl::crypto","",N,N],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context.",N,N],[4,"Mode","","",N,N],[13,"Encrypt","","",12,N],[13,"Decrypt","","",12,N],[4,"Type","","",N,N],[13,"AES_128_ECB","","",13,N],[13,"AES_128_CBC","","",13,N],[13,"AES_128_CFB1","","",13,N],[13,"AES_128_CFB128","","",13,N],[13,"AES_128_CFB8","","",13,N],[13,"AES_256_ECB","","",13,N],[13,"AES_256_CBC","","",13,N],[13,"AES_256_CFB1","","",13,N],[13,"AES_256_CFB128","","",13,N],[13,"AES_256_CFB8","","",13,N],[13,"DES_CBC","","",13,N],[13,"DES_ECB","","",13,N],[13,"RC4_128","","",13,N],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the specified key and iv; returns the resulting (encrypted) data.",N,N],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the specified key and iv; returns the resulting (decrypted) data.",N,N],[11,"new","","",14,[[["type"]],["crypter"]]],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of data encrypted must be a multiple of block size.",14,[[["self"],["bool"]]]],[11,"init","","Initializes this crypter.",14,N],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns encrypted or decrypted bytes.",14,N],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",14,[[["self"]],["vec",["u8"]]]],[0,"memcmp","openssl::crypto","",N,N],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",N,N],[0,"rsa","openssl::crypto","",N,N],[3,"RSA","openssl::crypto::rsa","",N,N],[11,"from_public_components","","only useful for associating the key material directly with the key, it's safer to use the supplied load and save methods for DER formatted keys.",15,[[["bignum"],["bignum"]],["result",["rsa","sslerror"]]]],[11,"from_private_components","","",15,[[["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"],["bignum"]],["result",["rsa","sslerror"]]]],[11,"from_raw","","the caller should assert that the rsa pointer is valid.",15,N],[11,"private_key_from_pem","","Reads an RSA private key from PEM formatted data.",15,[[["r"]],["result",["rsa","sslerror"]]]],[11,"private_key_to_pem","","Writes an RSA private key as unencrypted PEM formatted data",15,[[["self"],["w"]],["result",["sslerror"]]]],[11,"public_key_from_pem","","Reads an RSA public key from PEM formatted data.",15,[[["r"]],["result",["rsa","sslerror"]]]],[11,"public_key_to_pem","","Writes an RSA public key as PEM formatted data",15,[[["self"],["w"]],["result",["sslerror"]]]],[11,"size","","",15,[[["self"]],["result",["u32","sslerror"]]]],[11,"sign","","",15,N],[11,"verify","","",15,N],[11,"as_ptr","","",15,N],[11,"n","","",15,[[["self"]],["result",["bignum","sslerror"]]]],[11,"has_n","","",15,[[["self"]],["bool"]]],[11,"d","","",15,[[["self"]],["result",["bignum","sslerror"]]]],[11,"e","","",15,[[["self"]],["result",["bignum","sslerror"]]]],[11,"has_e","","",15,[[["self"]],["bool"]]],[11,"p","","",15,[[["self"]],["result",["bignum","sslerror"]]]],[11,"q","","",15,[[["self"]],["result",["bignum","sslerror"]]]],[0,"dh","openssl","",N,N],[3,"DH","openssl::dh","",N,N],[11,"from_params","","",16,[[["bignum"],["bignum"],["bignum"]],["result",["dh","sslerror"]]]],[11,"from_pem","","",16,[[["r"]],["result",["dh","sslerror"]]]],[11,"raw","","",16,N],[11,"raw_ptr","","",16,N],[0,"ssl","openssl","",N,N],[3,"SslContextOptions","openssl::ssl","",N,N],[3,"SslVerifyMode","","",N,N],[3,"SslContext","","An SSL context object",N,N],[3,"CipherBits","","",N,N],[12,"secret","","The number of secret bits used for the cipher.",17,N],[12,"algorithm","","The number of bits processed by the chosen algorithm, if not None.",17,N],[3,"SslCipher","","",N,N],[3,"Ssl","","",N,N],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",N,N],[3,"NonblockingSslStream","","Deprecated",N,N],[4,"Error","","An SSL error.",N,N],[13,"ZeroReturn","","The SSL session has been closed by the other end",18,N],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",18,N],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",18,N],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",18,N],[13,"Stream","","An error reported by the underlying stream.",18,N],[13,"Ssl","","An error in the OpenSSL library.",18,N],[4,"SslMethod","","Determines the SSL method supported",N,N],[13,"Sslv23","","Support the SSLv2, SSLv3, TLSv1, TLSv1.1, and TLSv1.2 protocols depending on what the linked OpenSSL library supports.",19,N],[13,"Tlsv1","","Only support the TLSv1 protocol.",19,N],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime.",N,N],[13,"Ssl","","A connection using SSL",20,N],[13,"Normal","","A connection not using SSL",20,N],[5,"init","","Manually initialize SSL. It is optional to call this function and safe to do so more than once.",N,[[]]],[0,"error","","",N,N],[3,"OpenSslError","openssl::ssl::error","An error reported from OpenSSL.",N,N],[4,"Error","","An SSL error.",N,N],[13,"ZeroReturn","","The SSL session has been closed by the other end",18,N],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",18,N],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",18,N],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",18,N],[13,"Stream","","An error reported by the underlying stream.",18,N],[13,"Ssl","","An error in the OpenSSL library.",18,N],[4,"SslError","","An SSL error",N,N],[13,"StreamError","","The underlying stream reported an error",21,N],[13,"SslSessionClosed","","The SSL session has been closed by the other end",21,N],[13,"OpenSslErrors","","An error in the OpenSSL library",21,N],[4,"NonblockingSslError","","An error on a nonblocking stream.",N,N],[13,"SslError","","A standard SSL error occurred.",22,N],[13,"WantRead","","The OpenSSL library wants data from the remote socket; the caller should wait for read readiness.",22,N],[13,"WantWrite","","The OpenSSL library wants to send data to the remote socket; the caller should wait for write readiness.",22,N],[4,"OpensslError","","An error from the OpenSSL library",N,N],[13,"UnknownError","","An unknown error",23,N],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",23,N],[12,"function","","The function reporting the error",23,N],[12,"reason","","The reason for the error",23,N],[11,"get_stack","openssl::ssl::error","Returns the contents of the OpenSSL error stack.",24,[[],["vec",["opensslerror"]]]],[11,"error_code","","Returns the raw OpenSSL error code for this error.",24,[[["self"]],["c_ulong"]]],[11,"library","","Returns the name of the library reporting the error.",24,[[["self"]],["str"]]],[11,"function","","Returns the name of the function reporting the error.",24,[[["self"]],["str"]]],[11,"reason","","Returns the reason for the error.",24,[[["self"]],["str"]]],[11,"from_error_code","","",23,[[["c_ulong"]],["opensslerror"]]],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error stack.",21,[[],["sslerror"]]],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",21,[[["c_ulong"]],["sslerror"]]],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates",N,N],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates when user-data should be carried for all verification process",N,N],[6,"ServerNameCallback","","The signature of functions that can be used to choose the context depending on the server name",N,N],[6,"ServerNameCallbackData","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_TLSEXT_PADDING","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_SSLV2","","",N,N],[17,"SSL_OP_NO_SSLV3","","",N,N],[17,"SSL_OP_NO_DTLSV1","","",N,N],[17,"SSL_OP_NO_TLSV1","","",N,N],[17,"SSL_OP_NO_DTLSV1_2","","",N,N],[17,"SSL_OP_NO_TLSV1_2","","",N,N],[17,"SSL_OP_NO_TLSV1_1","","",N,N],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",N,N],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",N,N],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",N,N],[17,"SSL_OP_PKCS1_CHECK_1","","",N,N],[17,"SSL_OP_PKCS1_CHECK_2","","",N,N],[17,"SSL_OP_EPHEMERAL_RSA","","",N,N],[17,"SSL_OP_ALL","","",N,N],[17,"SSL_OP_NO_SSL_MASK","","",N,N],[17,"SSL_VERIFY_PEER","","Verify that the server's certificate is trusted",N,N],[17,"SSL_VERIFY_NONE","","Do not verify the server's certificate",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate. Use together with SSL_VERIFY_PEER.",N,N],[8,"IntoSsl","","",N,N],[10,"into_ssl","","",25,[[["self"]],["result",["ssl","sslerror"]]]],[11,"empty","","Returns an empty set of flags.",26,[[],["sslcontextoptions"]]],[11,"all","","Returns the set containing all flags.",26,[[],["sslcontextoptions"]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,[[["u64"]],["option",["sslcontextoptions"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,[[["u64"]],["sslcontextoptions"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["self"],["sslcontextoptions"]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["self"],["sslcontextoptions"]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["self"],["sslcontextoptions"]]]],[11,"is_dtls","","",19,[[["self"]],["bool"]]],[11,"is_dtlsv1","","",19,[[["self"]],["bool"]]],[11,"is_dtlsv1_2","","",19,[[["self"]],["bool"]]],[11,"empty","","Returns an empty set of flags.",27,[[],["sslverifymode"]]],[11,"all","","Returns the set containing all flags.",27,[[],["sslverifymode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",27,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,[[["i32"]],["option",["sslverifymode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,[[["i32"]],["sslverifymode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",27,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",27,[[["self"],["sslverifymode"]]]],[11,"remove","","Removes the specified flags in-place.",27,[[["self"],["sslverifymode"]]]],[11,"toggle","","Toggles the specified flags in-place.",27,[[["self"],["sslverifymode"]]]],[11,"new","","Creates a new SSL context.",28,[[["sslmethod"]],["result",["sslcontext","sslerror"]]]],[11,"set_verify","","Configures the certificate verification method for new connections.",28,[[["self"],["sslverifymode"],["option",["verifycallback"]]]]],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also carrying supplied data.",28,[[["self"],["sslverifymode"],["verifycallbackdata"],["t"]]]],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections",28,[[["self"],["option",["servernamecallback"]]]]],[11,"set_servername_callback_with_data","","Configures the server name indication (SNI) callback for new connections carrying supplied data",28,[[["self"],["servernamecallbackdata"],["t"]]]],[11,"set_verify_depth","","Sets verification depth",28,[[["self"],["u32"]]]],[11,"set_read_ahead","","",28,[[["self"],["u32"]]]],[11,"set_tmp_dh","","",28,[[["self"],["dh"]],["result",["sslerror"]]]],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",28,[[["self"]],["result",["sslerror"]]]],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",28,[[["self"],["p"]],["result",["sslerror"]]]],[11,"set_session_id_context","","Set the context identifier for sessions",28,N],[11,"set_certificate_file","","Specifies the file that contains certificate",28,[[["self"],["p"],["x509filetype"]],["result",["sslerror"]]]],[11,"set_certificate_chain_file","","Specifies the file that contains certificate chain",28,[[["self"],["p"],["x509filetype"]],["result",["sslerror"]]]],[11,"set_certificate","","Specifies the certificate",28,[[["self"],["x509"]],["result",["sslerror"]]]],[11,"add_extra_chain_cert","","Adds a certificate to the certificate chain presented together with the certificate specified using set_certificate()",28,[[["self"],["x509"]],["result",["sslerror"]]]],[11,"set_private_key_file","","Specifies the file that contains private key",28,[[["self"],["p"],["x509filetype"]],["result",["sslerror"]]]],[11,"set_private_key","","Specifies the private key",28,[[["self"],["pkey"]],["result",["sslerror"]]]],[11,"check_private_key","","Check consistency of private key and certificate",28,[[["self"]],["result",["sslerror"]]]],[11,"set_cipher_list","","",28,[[["self"],["str"]],["result",["sslerror"]]]],[11,"set_options","","",28,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"get_options","","",28,[[["self"]],["sslcontextoptions"]]],[11,"clear_options","","",28,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"name","","Returns the name of cipher.",29,[[["self"]],["str"]]],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",29,[[["self"]],["str"]]],[11,"bits","","Returns the number of bits used for the cipher.",29,[[["self"]],["cipherbits"]]],[11,"description","","Returns a textual description of the cipher used",29,[[["self"]],["option",["string"]]]],[11,"new","","",30,[[["sslcontext"]],["result",["ssl","sslerror"]]]],[11,"set_verify","","Sets the verification mode to be used during the handshake process.",30,[[["self"],["sslverifymode"]]]],[11,"set_verify_callback","","Sets the certificate verification callback to be used during the handshake process.",30,[[["self"],["sslverifymode"],["f"]]]],[11,"get_current_cipher","","",30,[[["self"]],["option",["sslcipher"]]]],[11,"state_string","","",30,[[["self"]],["str"]]],[11,"state_string_long","","",30,[[["self"]],["str"]]],[11,"set_hostname","","Sets the host name to be used with SNI (Server Name Indication).",30,[[["self"],["str"]],["result",["sslerror"]]]],[11,"peer_certificate","","Returns the certificate of the peer, if present.",30,[[["self"]],["option",["x509"]]]],[11,"version","","Returns the name of the protocol used for the connection, e.g. \"TLSv1.2\", \"SSLv3\", etc.",30,[[["self"]],["str"]]],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",30,[[["self"]],["usize"]]],[11,"compression","","Returns the compression currently in use.",30,[[["self"]],["option",["string"]]]],[11,"get_ssl_method","","",30,[[["self"]],["option",["sslmethod"]]]],[11,"get_servername","","Returns the server's name for the current connection",30,[[["self"]],["option",["string"]]]],[11,"set_ssl_context","","change the context corresponding to the current connection",30,[[["self"],["sslcontext"]],["sslcontext"]]],[11,"get_ssl_context","","obtain the context corresponding to the current connection",30,[[["self"]],["sslcontext"]]],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",31,[[["t"],["s"]],["result",["sslerror"]]]],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",31,[[["t"],["s"]],["result",["sslerror"]]]],[11,"connect_generic","","Deprecated",31,[[["t"],["s"]],["result",["sslstream","sslerror"]]]],[11,"accept_generic","","Deprecated",31,[[["t"],["s"]],["result",["sslstream","sslerror"]]]],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",31,N],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",31,N],[11,"get_ref","","Returns a reference to the underlying stream.",31,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",31,[[["self"]],["s"]]],[11,"ssl","","Returns the OpenSSL `Ssl` object associated with this stream.",31,[[["self"]],["ssl"]]],[11,"try_clone","","Deprecated",31,[[["self"]],["result",["sslstream"]]]],[11,"get_ref","","Returns a reference to the underlying stream.",20,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",20,[[["self"]],["s"]]],[11,"try_clone","","Like `TcpStream::try_clone`.",20,[[["self"]],["result",["maybesslstream"]]]],[11,"try_clone","","",32,[[["self"]],["result",["nonblockingsslstream"]]]],[11,"get_ref","","Returns a reference to the underlying stream.",32,[[["self"]],["s"]]],[11,"get_mut","","Returns a mutable reference to the underlying stream.",32,[[["self"]],["s"]]],[11,"ssl","","Returns a reference to the Ssl.",32,[[["self"]],["ssl"]]],[11,"connect","","Create a new nonblocking client ssl connection on wrapped `stream`.",32,[[["t"],["s"]],["result",["nonblockingsslstream","sslerror"]]]],[11,"accept","","Create a new nonblocking server ssl connection on wrapped `stream`.",32,[[["t"],["s"]],["result",["nonblockingsslstream","sslerror"]]]],[11,"read","","Read bytes from the SSL stream into `buf`.",32,N],[11,"write","","Write bytes from `buf` to the SSL stream.",32,N],[0,"x509","openssl","",N,N],[3,"SslString","openssl::x509","",N,N],[3,"X509StoreContext","","",N,N],[3,"X509Generator","","Generator of private key/certificate pairs",N,N],[3,"X509","","A public key certificate",N,N],[3,"X509Name","","",N,N],[3,"X509NameEntry","","",N,N],[3,"X509Req","","A certificate signing request",N,N],[3,"GeneralNames","","A collection of OpenSSL `GENERAL_NAME`s.",N,N],[3,"GeneralNamesIter","","An iterator over OpenSSL `GENERAL_NAME`s.",N,N],[3,"GeneralName","","An OpenSSL `GENERAL_NAME`.",N,N],[4,"X509FileType","","",N,N],[13,"PEM","","",33,N],[13,"ASN1","","",33,N],[13,"Default","","",33,N],[4,"X509ValidationError","","",N,N],[13,"X509UnableToGetIssuerCert","","",34,N],[13,"X509UnableToGetCrl","","",34,N],[13,"X509UnableToDecryptCertSignature","","",34,N],[13,"X509UnableToDecryptCrlSignature","","",34,N],[13,"X509UnableToDecodeIssuerPublicKey","","",34,N],[13,"X509CertSignatureFailure","","",34,N],[13,"X509CrlSignatureFailure","","",34,N],[13,"X509CertNotYetValid","","",34,N],[13,"X509CertHasExpired","","",34,N],[13,"X509CrlNotYetValid","","",34,N],[13,"X509CrlHasExpired","","",34,N],[13,"X509ErrorInCertNotBeforeField","","",34,N],[13,"X509ErrorInCertNotAfterField","","",34,N],[13,"X509ErrorInCrlLastUpdateField","","",34,N],[13,"X509ErrorInCrlNextUpdateField","","",34,N],[13,"X509OutOfMem","","",34,N],[13,"X509DepthZeroSelfSignedCert","","",34,N],[13,"X509SelfSignedCertInChain","","",34,N],[13,"X509UnableToGetIssuerCertLocally","","",34,N],[13,"X509UnableToVerifyLeafSignature","","",34,N],[13,"X509CertChainTooLong","","",34,N],[13,"X509CertRevoked","","",34,N],[13,"X509InvalidCA","","",34,N],[13,"X509PathLengthExceeded","","",34,N],[13,"X509InvalidPurpose","","",34,N],[13,"X509CertUntrusted","","",34,N],[13,"X509CertRejected","","",34,N],[13,"X509SubjectIssuerMismatch","","",34,N],[13,"X509AkidSkidMismatch","","",34,N],[13,"X509AkidIssuerSerialMismatch","","",34,N],[13,"X509KeyusageNoCertsign","","",34,N],[13,"X509UnableToGetCrlIssuer","","",34,N],[13,"X509UnhandledCriticalExtension","","",34,N],[13,"X509KeyusageNoCrlSign","","",34,N],[13,"X509UnhandledCriticalCrlExtension","","",34,N],[13,"X509InvalidNonCA","","",34,N],[13,"X509ProxyPathLengthExceeded","","",34,N],[13,"X509KeyusageNoDigitalSignature","","",34,N],[13,"X509ProxyCertificatesNotAllowed","","",34,N],[13,"X509InvalidExtension","","",34,N],[13,"X509InavlidPolicyExtension","","",34,N],[13,"X509NoExplicitPolicy","","",34,N],[13,"X509DifferentCrlScope","","",34,N],[13,"X509UnsupportedExtensionFeature","","",34,N],[13,"X509UnnestedResource","","",34,N],[13,"X509PermittedVolation","","",34,N],[13,"X509ExcludedViolation","","",34,N],[13,"X509SubtreeMinmax","","",34,N],[13,"X509UnsupportedConstraintType","","",34,N],[13,"X509UnsupportedConstraintSyntax","","",34,N],[13,"X509UnsupportedNameSyntax","","",34,N],[13,"X509CrlPathValidationError","","",34,N],[13,"X509ApplicationVerification","","",34,N],[13,"X509UnknownError","","",34,N],[0,"extension","","",N,N],[4,"ExtensionType","openssl::x509::extension","Type-only version of the `Extension` enum.",N,N],[13,"KeyUsage","","",35,N],[13,"ExtKeyUsage","","",35,N],[13,"SubjectAltName","","",35,N],[13,"IssuerAltName","","",35,N],[13,"OtherNid","","",35,N],[13,"OtherStr","","",35,N],[4,"Extension","","A X.509 v3 certificate extension.",N,N],[13,"KeyUsage","","The purposes of the key contained in the certificate",36,N],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",36,N],[13,"SubjectAltName","","Subject Alternative Names",36,N],[13,"IssuerAltName","","Issuer Alternative Names",36,N],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",36,N],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",36,N],[4,"KeyUsageOption","","",N,N],[13,"DigitalSignature","","",37,N],[13,"NonRepudiation","","",37,N],[13,"KeyEncipherment","","",37,N],[13,"DataEncipherment","","",37,N],[13,"KeyAgreement","","",37,N],[13,"KeyCertSign","","",37,N],[13,"CRLSign","","",37,N],[13,"EncipherOnly","","",37,N],[13,"DecipherOnly","","",37,N],[4,"ExtKeyUsageOption","","",N,N],[13,"ServerAuth","","",38,N],[13,"ClientAuth","","",38,N],[13,"CodeSigning","","",38,N],[13,"EmailProtection","","",38,N],[13,"TimeStamping","","",38,N],[13,"MsCodeInd","","",38,N],[13,"MsCodeCom","","",38,N],[13,"MsCtlSign","","",38,N],[13,"MsSgc","","",38,N],[13,"MsEfs","","",38,N],[13,"NsSgc","","",38,N],[13,"Other","","An arbitrary key usage by OID.",38,N],[4,"AltNameOption","","",N,N],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",39,N],[13,"Email","","",39,N],[13,"DNS","","",39,N],[13,"Directory","","",39,N],[13,"URI","","",39,N],[13,"IPAddress","","",39,N],[13,"RegisteredID","","",39,N],[11,"get_type","","",36,[[["self"]],["extensiontype"]]],[11,"get_nid","","",35,[[["self"]],["option",["nid"]]]],[11,"get_name","","",35,[[["self"]],["option",["str"]]]],[11,"new","openssl::x509","",40,N],[11,"get_error","","",40,[[["self"]],["option",["x509validationerror"]]]],[11,"get_current_cert","","",40,[[["self"]],["option",["x509"]]]],[11,"error_depth","","",40,[[["self"]],["u32"]]],[11,"new","","Creates a new generator with the following defaults:",41,[[],["x509generator"]]],[11,"set_bitlength","","Sets desired bit length",41,[[["self"],["u32"]],["x509generator"]]],[11,"set_valid_period","","Sets certificate validity period in days since today",41,[[["self"],["u32"]],["x509generator"]]],[11,"add_name","","Add attribute to the name of the certificate",41,[[["self"],["string"],["string"]],["x509generator"]]],[11,"add_names","","Add multiple attributes to the name of the certificate",41,[[["self"],["i"]],["x509generator"]]],[11,"add_extension","","Add an extension to a certificate",41,[[["self"],["extension"]],["x509generator"]]],[11,"add_extensions","","Add multiple extensions to a certificate",41,[[["self"],["i"]],["x509generator"]]],[11,"set_sign_hash","","",41,[[["self"],["type"]],["x509generator"]]],[11,"generate","","Generates a private key and a self-signed certificate and returns them",41,[[["self"]],["result",["sslerror"]]]],[11,"sign","","Sets the certificate public-key, then self-sign and return it Note: That the bit-length of the private key is used (set_bitlength is ignored)",41,[[["self"],["pkey"]],["result",["x509","sslerror"]]]],[11,"request","","Obtain a certificate signing request (CSR)",41,[[["self"],["pkey"]],["result",["x509req","sslerror"]]]],[11,"new","","Creates new from handle with desired ownership.",42,N],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership of handle.",42,N],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",42,[[["r"]],["result",["x509","sslerror"]]]],[11,"get_handle","","",42,N],[11,"subject_name","","",42,[[["self"]],["x509name"]]],[11,"subject_alt_names","","Returns this certificate's SAN entries, if they exist.",42,[[["self"]],["option",["generalnames"]]]],[11,"public_key","","",42,[[["self"]],["pkey"]]],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",42,[[["self"],["type"]],["option",["vec"]]]],[11,"write_pem","","Writes certificate as PEM",42,[[["self"],["w"]],["result",["sslerror"]]]],[11,"text_by_nid","","",43,[[["self"],["nid"]],["option",["sslstring"]]]],[11,"new","","Creates new from handle",44,N],[11,"from_pem","","Reads CSR from PEM",44,[[["r"]],["result",["x509req","sslerror"]]]],[11,"write_pem","","Writes CSR as PEM",44,[[["self"],["w"]],["result",["sslerror"]]]],[11,"len","","Returns the number of `GeneralName`s in this structure.",45,[[["self"]],["usize"]]],[11,"get","","Returns the specified `GeneralName`.",45,[[["self"],["usize"]],["generalname"]]],[11,"iter","","Returns an iterator over the `GeneralName`s in this structure.",45,[[["self"]],["generalnamesiter"]]],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",46,[[["self"]],["option",["str"]]]],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",46,[[["self"]],["option"]]],[0,"nid","openssl","",N,N],[4,"Nid","openssl::nid","",N,N],[13,"Undefined","","",47,N],[13,"Rsadsi","","",47,N],[13,"Pkcs","","",47,N],[13,"MD2","","",47,N],[13,"MD4","","",47,N],[13,"MD5","","",47,N],[13,"RC4","","",47,N],[13,"RsaEncryption","","",47,N],[13,"RSA_MD2","","",47,N],[13,"RSA_MD5","","",47,N],[13,"PBE_MD2_DES","","",47,N],[13,"X500","","",47,N],[13,"x509","","",47,N],[13,"CN","","",47,N],[13,"C","","",47,N],[13,"L","","",47,N],[13,"ST","","",47,N],[13,"O","","",47,N],[13,"OU","","",47,N],[13,"RSA","","",47,N],[13,"Pkcs7","","",47,N],[13,"Pkcs7_data","","",47,N],[13,"Pkcs7_signedData","","",47,N],[13,"Pkcs7_envelopedData","","",47,N],[13,"Pkcs7_signedAndEnvelopedData","","",47,N],[13,"Pkcs7_digestData","","",47,N],[13,"Pkcs7_encryptedData","","",47,N],[13,"Pkcs3","","",47,N],[13,"DhKeyAgreement","","",47,N],[13,"DES_ECB","","",47,N],[13,"DES_CFB","","",47,N],[13,"DES_CBC","","",47,N],[13,"DES_EDE","","",47,N],[13,"DES_EDE3","","",47,N],[13,"IDEA_CBC","","",47,N],[13,"IDEA_CFB","","",47,N],[13,"IDEA_ECB","","",47,N],[13,"RC2_CBC","","",47,N],[13,"RC2_ECB","","",47,N],[13,"RC2_CFB","","",47,N],[13,"RC2_OFB","","",47,N],[13,"SHA","","",47,N],[13,"RSA_SHA","","",47,N],[13,"DES_EDE_CBC","","",47,N],[13,"DES_EDE3_CBC","","",47,N],[13,"DES_OFB","","",47,N],[13,"IDEA_OFB","","",47,N],[13,"Pkcs9","","",47,N],[13,"Email","","",47,N],[13,"UnstructuredName","","",47,N],[13,"ContentType","","",47,N],[13,"MessageDigest","","",47,N],[13,"SigningTime","","",47,N],[13,"CounterSignature","","",47,N],[13,"ChallengePassword","","",47,N],[13,"UnstructuredAddress","","",47,N],[13,"ExtendedCertificateAttributes","","",47,N],[13,"Netscape","","",47,N],[13,"NetscapeCertExtention","","",47,N],[13,"NetscapeDatatype","","",47,N],[13,"DES_EDE_CFB64","","",47,N],[13,"DES_EDE3_CFB64","","",47,N],[13,"DES_EDE_OFB64","","",47,N],[13,"DES_EDE3_OFB64","","",47,N],[13,"SHA1","","",47,N],[13,"RSA_SHA1","","",47,N],[13,"DSA_SHA","","",47,N],[13,"DSA_OLD","","",47,N],[13,"PBE_SHA1_RC2_64","","",47,N],[13,"PBKDF2","","",47,N],[13,"DSA_SHA1_OLD","","",47,N],[13,"NetscapeCertType","","",47,N],[13,"NetscapeBaseUrl","","",47,N],[13,"NetscapeRevocationUrl","","",47,N],[13,"NetscapeCARevocationUrl","","",47,N],[13,"NetscapeRenewalUrl","","",47,N],[13,"NetscapeCAPolicyUrl","","",47,N],[13,"NetscapeSSLServerName","","",47,N],[13,"NetscapeComment","","",47,N],[13,"NetscapeCertSequence","","",47,N],[13,"DESX_CBC","","",47,N],[13,"ID_CE","","",47,N],[13,"SubjectKeyIdentifier","","",47,N],[13,"KeyUsage","","",47,N],[13,"PrivateKeyUsagePeriod","","",47,N],[13,"SubjectAltName","","",47,N],[13,"IssuerAltName","","",47,N],[13,"BasicConstraints","","",47,N],[13,"CrlNumber","","",47,N],[13,"CertificatePolicies","","",47,N],[13,"AuthorityKeyIdentifier","","",47,N],[13,"BF_CBC","","",47,N],[13,"BF_ECB","","",47,N],[13,"BF_CFB","","",47,N],[13,"BF_OFB","","",47,N],[13,"MDC2","","",47,N],[13,"RSA_MDC2","","",47,N],[13,"RC4_40","","",47,N],[13,"RC2_40_CBC","","",47,N],[13,"G","","",47,N],[13,"S","","",47,N],[13,"I","","",47,N],[13,"UID","","uniqueIdentifier",47,N],[13,"CrlDistributionPoints","","",47,N],[13,"RSA_NP_MD5","","",47,N],[13,"SN","","",47,N],[13,"T","","",47,N],[13,"D","","",47,N],[13,"CAST5_CBC","","",47,N],[13,"CAST5_ECB","","",47,N],[13,"CAST5_CFB","","",47,N],[13,"CAST5_OFB","","",47,N],[13,"PbeWithMD5AndCast5CBC","","",47,N],[13,"DSA_SHA1","","",47,N],[13,"MD5_SHA1","","",47,N],[13,"RSA_SHA1_2","","",47,N],[13,"DSA","","",47,N],[13,"RIPEMD160","","",47,N],[13,"RSA_RIPEMD160","","",47,N],[13,"RC5_CBC","","",47,N],[13,"RC5_ECB","","",47,N],[13,"RC5_CFB","","",47,N],[13,"RC5_OFB","","",47,N],[13,"RLE","","",47,N],[13,"ZLIB","","",47,N],[13,"ExtendedKeyUsage","","",47,N],[13,"PKIX","","",47,N],[13,"ID_KP","","",47,N],[13,"ServerAuth","","",47,N],[13,"ClientAuth","","",47,N],[13,"CodeSigning","","",47,N],[13,"EmailProtection","","",47,N],[13,"TimeStamping","","",47,N],[13,"MsCodeInd","","",47,N],[13,"MsCodeCom","","",47,N],[13,"MsCtlSigh","","",47,N],[13,"MsSGC","","",47,N],[13,"MsEFS","","",47,N],[13,"NsSGC","","",47,N],[13,"DeltaCRL","","",47,N],[13,"CRLReason","","",47,N],[13,"InvalidityDate","","",47,N],[13,"SXNetID","","",47,N],[13,"PBE_SHA1_RC4_128","","",47,N],[13,"PBE_SHA1_RC4_40","","",47,N],[13,"PBE_SHA1_3DES","","",47,N],[13,"PBE_SHA1_2DES","","",47,N],[13,"PBE_SHA1_RC2_128","","",47,N],[13,"PBE_SHA1_RC2_40","","",47,N],[13,"KeyBag","","",47,N],[13,"Pkcs8ShroudedKeyBag","","",47,N],[13,"CertBag","","",47,N],[13,"CrlBag","","",47,N],[13,"SecretBag","","",47,N],[13,"SafeContentsBag","","",47,N],[13,"FriendlyName","","",47,N],[13,"LocalKeyID","","",47,N],[13,"X509Certificate","","",47,N],[13,"SdsiCertificate","","",47,N],[13,"X509Crl","","",47,N],[13,"PBES2","","",47,N],[13,"PBMAC1","","",47,N],[13,"HmacWithSha1","","",47,N],[13,"ID_QT_CPS","","",47,N],[13,"ID_QT_UNOTICE","","",47,N],[13,"RC2_64_CBC","","",47,N],[13,"SMIMECaps","","",47,N],[13,"PBE_MD2_RC2_64","","",47,N],[13,"PBE_MD5_RC2_64","","",47,N],[13,"PBE_SHA1_DES","","",47,N],[13,"MicrosoftExtensionRequest","","",47,N],[13,"ExtensionRequest","","",47,N],[13,"Name","","",47,N],[13,"DnQualifier","","",47,N],[13,"IdPe","","",47,N],[13,"IdAd","","",47,N],[13,"AuthorityInfoAccess","","",47,N],[13,"OCSP","","",47,N],[13,"CaIssuers","","",47,N],[13,"OCSPSigning","","",47,N],[13,"UserId","","Shown as UID in cert subject",47,N],[13,"SHA256","","",47,N],[13,"SHA384","","",47,N],[13,"SHA512","","",47,N],[13,"SHA224","","",47,N],[0,"version","openssl","",N,N],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",N,[[],["i64"]]],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",N,[[],["str"]]],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",N,[[],["str"]]],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",N,[[],["str"]]],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",N,[[],["str"]]],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",N,[[],["str"]]],[11,"from","openssl::asn1","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","openssl::bn","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","openssl::bio","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::hash","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::hmac","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::pkcs5","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::pkey","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::symm","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","openssl::crypto::rsa","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","openssl::dh","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","openssl::ssl","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","openssl::ssl::error","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","openssl::ssl","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","openssl::ssl::error","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","openssl::x509","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"into_iter","","",50,[[["self"]],["i"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","openssl::x509::extension","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","openssl::nid","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_ssl","openssl::ssl","",30,[[["self"]],["result",["ssl","sslerror"]]]],[11,"clone","openssl::bn","",1,[[["self"]],["rngproperty"]]],[11,"clone","","",2,[[["self"]],["bignum"]]],[11,"clone","openssl::crypto::hash","",4,[[["self"]],["type"]]],[11,"clone","","",5,[[["self"]],["hasher"]]],[11,"clone","openssl::crypto::hmac","",6,[[["self"]],["hmac"]]],[11,"clone","openssl::crypto::pkcs5","",7,[[["self"]],["keyivpair"]]],[11,"clone","openssl::crypto::pkey","",8,[[["self"]],["parts"]]],[11,"clone","","",9,[[["self"]],["role"]]],[11,"clone","","",10,[[["self"]],["encryptionpadding"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"clone","openssl::crypto::symm","",12,[[["self"]],["mode"]]],[11,"clone","","",13,[[["self"]],["type"]]],[11,"clone","openssl::ssl::error","",23,[[["self"]],["opensslerror"]]],[11,"clone","openssl::ssl","",26,[[["self"]],["sslcontextoptions"]]],[11,"clone","","",19,[[["self"]],["sslmethod"]]],[11,"clone","","",27,[[["self"]],["sslverifymode"]]],[11,"clone","","",28,[[["self"]],["self"]]],[11,"clone","","Deprecated",30,[[["self"]],["ssl"]]],[11,"clone","","",31,[[["self"]],["sslstream"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","openssl::x509::extension","",35,[[["self"]],["extensiontype"]]],[11,"clone","","",36,[[["self"]],["extension"]]],[11,"clone","","",37,[[["self"]],["keyusageoption"]]],[11,"clone","","",38,[[["self"]],["extkeyusageoption"]]],[11,"clone","","",39,[[["self"]],["altnameoption"]]],[11,"clone","openssl::x509","",33,[[["self"]],["x509filetype"]]],[11,"clone","","",42,[[["self"]],["x509"]]],[11,"clone","","",34,[[["self"]],["x509validationerror"]]],[11,"clone","openssl::nid","",47,[[["self"]],["nid"]]],[11,"extend","openssl::ssl","",26,[[["self"],["t"]]]],[11,"extend","","",27,[[["self"],["t"]]]],[11,"from","openssl::ssl::error","",22,[[["sslerror"]],["nonblockingsslerror"]]],[11,"drop","openssl::asn1","",0,[[["self"]]]],[11,"drop","openssl::bn","",2,[[["self"]]]],[11,"drop","openssl::bio","",3,[[["self"]]]],[11,"drop","openssl::crypto::hash","",5,[[["self"]]]],[11,"drop","openssl::crypto::hmac","",6,[[["self"]]]],[11,"drop","openssl::crypto::pkey","",11,[[["self"]]]],[11,"drop","openssl::crypto::symm","",14,[[["self"]]]],[11,"drop","openssl::crypto::rsa","",15,[[["self"]]]],[11,"drop","openssl::dh","",16,[[["self"]]]],[11,"drop","openssl::ssl","",28,[[["self"]]]],[11,"drop","","",30,[[["self"]]]],[11,"drop","openssl::x509","",48,[[["self"]]]],[11,"drop","","",42,[[["self"]]]],[11,"drop","","",44,[[["self"]]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"to_string","openssl::x509::extension","",36,[[["self"]],["string"]]],[11,"partial_cmp","openssl::bn","",2,[[["self"],["bignum"]],["option",["ordering"]]]],[11,"partial_cmp","openssl::ssl","",26,[[["self"],["sslcontextoptions"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"le","","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"gt","","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"ge","","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"partial_cmp","","",27,[[["self"],["sslverifymode"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"le","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"gt","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"ge","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"eq","openssl::bn","",2,[[["self"],["bignum"]],["bool"]]],[11,"eq","openssl::crypto::pkcs5","",7,[[["self"],["keyivpair"]],["bool"]]],[11,"ne","","",7,[[["self"],["keyivpair"]],["bool"]]],[11,"eq","openssl::ssl::error","",23,[[["self"],["opensslerror"]],["bool"]]],[11,"ne","","",23,[[["self"],["opensslerror"]],["bool"]]],[11,"eq","openssl::ssl","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"ne","","",26,[[["self"],["sslcontextoptions"]],["bool"]]],[11,"eq","","",19,[[["self"],["sslmethod"]],["bool"]]],[11,"eq","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"ne","","",27,[[["self"],["sslverifymode"]],["bool"]]],[11,"eq","openssl::x509::extension","",35,[[["self"],["extensiontype"]],["bool"]]],[11,"ne","","",35,[[["self"],["extensiontype"]],["bool"]]],[11,"eq","openssl::nid","",47,[[["self"],["nid"]],["bool"]]],[11,"cmp","openssl::bn","",2,[[["self"],["bignum"]],["ordering"]]],[11,"cmp","openssl::ssl","",26,[[["self"],["sslcontextoptions"]],["ordering"]]],[11,"cmp","","",27,[[["self"],["sslverifymode"]],["ordering"]]],[11,"hash","openssl::crypto::pkcs5","",7,N],[11,"hash","openssl::ssl","",26,N],[11,"hash","","",19,N],[11,"hash","","",27,N],[11,"hash","openssl::x509::extension","",35,N],[11,"hash","openssl::nid","",47,N],[11,"fmt","openssl::ssl::error","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::x509::extension","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","openssl::x509","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::bn","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::crypto::pkcs5","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::crypto::rsa","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::ssl::error","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::ssl","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","openssl::x509","",48,[[["self"],["formatter"]],["result"]]],[11,"sub","openssl::ssl","Returns the set difference of the two sets of flags.",26,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"sub","","Returns the set difference of the two sets of flags.",27,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"neg","openssl::bn","",2,[[["self"]],["bignum"]]],[11,"sub_assign","openssl::ssl","Disables all flags enabled in the set.",26,[[["self"],["sslcontextoptions"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",27,[[["self"],["sslverifymode"]]]],[11,"not","","Returns the complement of this set of flags.",26,[[["self"]],["sslcontextoptions"]]],[11,"not","","Returns the complement of this set of flags.",27,[[["self"]],["sslverifymode"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",26,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",27,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitor","","Returns the union of the two sets of flags.",26,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"bitor","","Returns the union of the two sets of flags.",27,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,[[["self"],["sslcontextoptions"]],["sslcontextoptions"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,[[["self"],["sslverifymode"]],["sslverifymode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",26,[[["self"],["sslcontextoptions"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",27,[[["self"],["sslverifymode"]]]],[11,"bitor_assign","","Adds the set of flags.",26,[[["self"],["sslcontextoptions"]]]],[11,"bitor_assign","","Adds the set of flags.",27,[[["self"],["sslverifymode"]]]],[11,"bitxor_assign","","Toggles the set of flags.",26,[[["self"],["sslcontextoptions"]]]],[11,"bitxor_assign","","Toggles the set of flags.",27,[[["self"],["sslverifymode"]]]],[11,"deref","openssl::x509","",48,[[["self"]],["str"]]],[11,"from_iter","openssl::ssl","",26,[[["t"]],["sslcontextoptions"]]],[11,"from_iter","","",27,[[["t"]],["sslverifymode"]]],[11,"write","openssl::bio","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"write","openssl::crypto::hash","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"write","openssl::crypto::hmac","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"write","openssl::ssl","",31,N],[11,"flush","","",31,[[["self"]],["result"]]],[11,"write","","",20,N],[11,"flush","","",20,[[["self"]],["result"]]],[11,"read","openssl::bio","",3,N],[11,"read","openssl::ssl","",31,N],[11,"read","","",20,N],[11,"description","openssl::ssl::error","",18,[[["self"]],["str"]]],[11,"cause","","",18,[[["self"]],["option",["error"]]]],[11,"description","","",24,[[["self"]],["str"]]],[11,"description","","",21,[[["self"]],["str"]]],[11,"cause","","",21,[[["self"]],["option",["error"]]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"cause","","",22,[[["self"]],["option",["error"]]]],[11,"as_raw_fd","openssl::ssl","",31,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",32,[[["self"]],["rawfd"]]]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[3,"KeyIvPair"],[4,"Parts"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[3,"RSA"],[3,"DH"],[3,"CipherBits"],[4,"Error"],[4,"SslMethod"],[4,"MaybeSslStream"],[4,"SslError"],[4,"NonblockingSslError"],[4,"OpensslError"],[3,"OpenSslError"],[8,"IntoSsl"],[3,"SslContextOptions"],[3,"SslVerifyMode"],[3,"SslContext"],[3,"SslCipher"],[3,"Ssl"],[3,"SslStream"],[3,"NonblockingSslStream"],[4,"X509FileType"],[4,"X509ValidationError"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"],[3,"X509Name"],[3,"X509Req"],[3,"GeneralNames"],[3,"GeneralName"],[4,"Nid"],[3,"SslString"],[3,"X509NameEntry"],[3,"GeneralNamesIter"]]};
searchIndex["openssl_sys"]={"doc":"","items":[[3,"PKCS12","openssl_sys","",N,N],[3,"stack_st_X509","","",N,N],[12,"stack","","",0,N],[3,"stack_st_X509_EXTENSION","","",N,N],[12,"stack","","",1,N],[3,"stack_st_GENERAL_NAME","","",N,N],[12,"stack","","",2,N],[3,"stack_st_void","","",N,N],[12,"stack","","",3,N],[3,"BIO_METHOD","","",N,N],[12,"type_","","",4,N],[12,"name","","",4,N],[12,"bwrite","","",4,N],[12,"bread","","",4,N],[12,"bputs","","",4,N],[12,"bgets","","",4,N],[12,"ctrl","","",4,N],[12,"create","","",4,N],[12,"destroy","","",4,N],[12,"callback_ctrl","","",4,N],[3,"_STACK","","",N,N],[12,"num","","",5,N],[12,"data","","",5,N],[12,"sorted","","",5,N],[12,"num_alloc","","",5,N],[12,"comp","","",5,N],[3,"RSA","","",N,N],[12,"pad","","",6,N],[12,"version","","",6,N],[12,"meth","","",6,N],[12,"engine","","",6,N],[12,"n","","",6,N],[12,"e","","",6,N],[12,"d","","",6,N],[12,"p","","",6,N],[12,"q","","",6,N],[12,"dmp1","","",6,N],[12,"dmq1","","",6,N],[12,"iqmp","","",6,N],[12,"ex_data","","",6,N],[12,"references","","",6,N],[12,"flags","","",6,N],[12,"_method_mod_n","","",6,N],[12,"_method_mod_p","","",6,N],[12,"_method_mod_q","","",6,N],[12,"bignum_data","","",6,N],[12,"blinding","","",6,N],[12,"mt_blinding","","",6,N],[3,"DSA","","",N,N],[12,"pad","","",7,N],[12,"version","","",7,N],[12,"write_params","","",7,N],[12,"p","","",7,N],[12,"q","","",7,N],[12,"g","","",7,N],[12,"pub_key","","",7,N],[12,"priv_key","","",7,N],[12,"kinv","","",7,N],[12,"r","","",7,N],[12,"flags","","",7,N],[12,"_method_mont_p","","",7,N],[12,"references","","",7,N],[12,"ex_data","","",7,N],[12,"meth","","",7,N],[12,"engine","","",7,N],[3,"EVP_PKEY","","",N,N],[12,"type_","","",8,N],[12,"save_type","","",8,N],[12,"references","","",8,N],[12,"ameth","","",8,N],[12,"engine","","",8,N],[12,"pkey","","",8,N],[12,"save_parameters","","",8,N],[12,"attributes","","",8,N],[3,"BIO","","",N,N],[12,"method","","",9,N],[12,"callback","","",9,N],[12,"cb_arg","","",9,N],[12,"init","","",9,N],[12,"shutdown","","",9,N],[12,"flags","","",9,N],[12,"retry_reason","","",9,N],[12,"num","","",9,N],[12,"ptr","","",9,N],[12,"next_bio","","",9,N],[12,"prev_bio","","",9,N],[12,"references","","",9,N],[12,"num_read","","",9,N],[12,"num_write","","",9,N],[12,"ex_data","","",9,N],[3,"CRYPTO_EX_DATA","","",N,N],[12,"sk","","",10,N],[12,"dummy","","",10,N],[3,"EVP_MD_CTX","","",N,N],[3,"EVP_CIPHER","","",N,N],[12,"nid","","",11,N],[12,"block_size","","",11,N],[12,"key_len","","",11,N],[12,"iv_len","","",11,N],[12,"flags","","",11,N],[12,"init","","",11,N],[12,"do_cipher","","",11,N],[12,"cleanup","","",11,N],[12,"ctx_size","","",11,N],[12,"set_asn1_parameters","","",11,N],[12,"get_asn1_parameters","","",11,N],[12,"ctrl","","",11,N],[12,"app_data","","",11,N],[3,"HMAC_CTX","","",N,N],[3,"X509V3_CTX","","",N,N],[3,"GENERAL_NAME","","",N,N],[12,"type_","","",12,N],[12,"d","","",12,N],[3,"BIGNUM","","",N,N],[12,"d","","",13,N],[12,"top","","",13,N],[12,"dmax","","",13,N],[12,"neg","","",13,N],[12,"flags","","",13,N],[5,"init","","",N,[[]]],[5,"BIO_get_mem_data","","",N,N],[5,"BIO_clear_retry_flags","","",N,N],[5,"BIO_set_retry_read","","",N,N],[5,"BIO_set_retry_write","","",N,N],[5,"SSL_CTX_set_mode","","",N,N],[5,"SSL_CTX_set_options","","",N,N],[5,"SSL_CTX_clear_options","","",N,N],[5,"SSL_CTX_get_options","","",N,N],[5,"SSL_CTX_set_read_ahead","","",N,N],[5,"SSL_CTX_set_tmp_dh","","",N,N],[5,"SSL_CTX_add_extra_chain_cert","","",N,N],[5,"SSL_CTX_set_tlsext_servername_callback","","",N,N],[5,"SSL_set_tlsext_host_name","","",N,N],[5,"EVP_CIPHER_block_size","","",N,N],[5,"EVP_CIPHER_key_length","","",N,N],[5,"EVP_CIPHER_iv_length","","",N,N],[5,"ASN1_INTEGER_set","","",N,N],[5,"ASN1_STRING_type_new","","",N,N],[5,"ASN1_TIME_free","","",N,N],[5,"ASN1_TIME_print","","",N,N],[5,"BIO_ctrl","","",N,N],[5,"BIO_free_all","","",N,N],[5,"BIO_new","","",N,N],[5,"BIO_new_fp","","",N,N],[5,"BIO_new_socket","","",N,N],[5,"BIO_read","","",N,N],[5,"BIO_write","","",N,N],[5,"BIO_s_file","","",N,N],[5,"BIO_s_mem","","",N,N],[5,"BIO_new_mem_buf","","",N,N],[5,"BIO_set_flags","","",N,N],[5,"BIO_clear_flags","","",N,N],[5,"BN_new","","",N,N],[5,"BN_dup","","",N,N],[5,"BN_clear_free","","",N,N],[5,"BN_CTX_new","","",N,N],[5,"BN_CTX_free","","",N,N],[5,"BN_num_bits","","",N,N],[5,"BN_set_negative","","",N,N],[5,"BN_set_word","","",N,N],[5,"BN_add","","",N,N],[5,"BN_div","","",N,N],[5,"BN_exp","","",N,N],[5,"BN_gcd","","",N,N],[5,"BN_mod_add","","",N,N],[5,"BN_mod_exp","","",N,N],[5,"BN_mod_inverse","","",N,N],[5,"BN_mod_mul","","",N,N],[5,"BN_mod_sqr","","",N,N],[5,"BN_mod_sub","","",N,N],[5,"BN_mul","","",N,N],[5,"BN_nnmod","","",N,N],[5,"BN_add_word","","",N,N],[5,"BN_sub_word","","",N,N],[5,"BN_mul_word","","",N,N],[5,"BN_div_word","","",N,N],[5,"BN_mod_word","","",N,N],[5,"BN_sqr","","",N,N],[5,"BN_sub","","",N,N],[5,"BN_clear_bit","","",N,N],[5,"BN_is_bit_set","","",N,N],[5,"BN_lshift","","",N,N],[5,"BN_lshift1","","",N,N],[5,"BN_mask_bits","","",N,N],[5,"BN_rshift","","",N,N],[5,"BN_set_bit","","",N,N],[5,"BN_rshift1","","",N,N],[5,"BN_cmp","","",N,N],[5,"BN_ucmp","","",N,N],[5,"BN_generate_prime_ex","","",N,N],[5,"BN_is_prime_ex","","",N,N],[5,"BN_is_prime_fasttest_ex","","",N,N],[5,"BN_rand","","",N,N],[5,"BN_pseudo_rand","","",N,N],[5,"BN_rand_range","","",N,N],[5,"BN_pseudo_rand_range","","",N,N],[5,"BN_bin2bn","","",N,N],[5,"BN_bn2bin","","",N,N],[5,"BN_dec2bn","","",N,N],[5,"BN_bn2dec","","",N,N],[5,"BN_hex2bn","","",N,N],[5,"BN_bn2hex","","",N,N],[5,"CRYPTO_num_locks","","",N,N],[5,"CRYPTO_set_locking_callback","","",N,N],[5,"CRYPTO_set_id_callback","","",N,N],[5,"CRYPTO_free","","",N,N],[5,"CRYPTO_memcmp","","",N,N],[5,"DH_free","","",N,N],[5,"DH_new_from_params","","",N,N],[5,"ERR_get_error","","",N,N],[5,"ERR_lib_error_string","","",N,N],[5,"ERR_func_error_string","","",N,N],[5,"ERR_reason_error_string","","",N,N],[5,"ERR_load_crypto_strings","","",N,N],[5,"EVP_md5","","",N,N],[5,"EVP_ripemd160","","",N,N],[5,"EVP_sha1","","",N,N],[5,"EVP_sha224","","",N,N],[5,"EVP_sha256","","",N,N],[5,"EVP_sha384","","",N,N],[5,"EVP_sha512","","",N,N],[5,"EVP_aes_128_cbc","","",N,N],[5,"EVP_aes_128_ecb","","",N,N],[5,"EVP_aes_128_cfb1","","",N,N],[5,"EVP_aes_128_cfb128","","",N,N],[5,"EVP_aes_128_cfb8","","",N,N],[5,"EVP_aes_256_cbc","","",N,N],[5,"EVP_aes_256_ecb","","",N,N],[5,"EVP_aes_256_cfb1","","",N,N],[5,"EVP_aes_256_cfb128","","",N,N],[5,"EVP_aes_256_cfb8","","",N,N],[5,"EVP_rc4","","",N,N],[5,"EVP_des_cbc","","",N,N],[5,"EVP_des_ecb","","",N,N],[5,"EVP_BytesToKey","","",N,N],[5,"EVP_CIPHER_CTX_new","","",N,N],[5,"EVP_CIPHER_CTX_set_padding","","",N,N],[5,"EVP_CIPHER_CTX_set_key_length","","",N,N],[5,"EVP_CIPHER_CTX_free","","",N,N],[5,"EVP_CipherInit","","",N,N],[5,"EVP_CipherInit_ex","","",N,N],[5,"EVP_CipherUpdate","","",N,N],[5,"EVP_CipherFinal","","",N,N],[5,"EVP_DigestInit","","",N,N],[5,"EVP_DigestInit_ex","","",N,N],[5,"EVP_DigestUpdate","","",N,N],[5,"EVP_DigestFinal","","",N,N],[5,"EVP_DigestFinal_ex","","",N,N],[5,"EVP_MD_CTX_create","","",N,N],[5,"EVP_MD_CTX_copy_ex","","",N,N],[5,"EVP_MD_CTX_destroy","","",N,N],[5,"EVP_PKEY_new","","",N,N],[5,"EVP_PKEY_free","","",N,N],[5,"EVP_PKEY_assign","","",N,N],[5,"EVP_PKEY_copy_parameters","","",N,N],[5,"EVP_PKEY_get1_RSA","","",N,N],[5,"EVP_PKEY_set1_RSA","","",N,N],[5,"EVP_PKEY_cmp","","",N,N],[5,"HMAC_CTX_init","","",N,N],[5,"HMAC_CTX_cleanup","","",N,N],[5,"PEM_read_bio_DHparams","","",N,N],[5,"PEM_read_bio_X509","","",N,N],[5,"PEM_read_bio_X509_REQ","","",N,N],[5,"PEM_read_bio_PrivateKey","","",N,N],[5,"PEM_read_bio_PUBKEY","","",N,N],[5,"PEM_read_bio_RSAPrivateKey","","",N,N],[5,"PEM_read_bio_RSA_PUBKEY","","",N,N],[5,"PEM_write_bio_PrivateKey","","",N,N],[5,"PEM_write_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_RSAPrivateKey","","",N,N],[5,"PEM_write_bio_RSAPublicKey","","",N,N],[5,"PEM_write_bio_RSA_PUBKEY","","",N,N],[5,"PEM_read_bio_DSAPrivateKey","","",N,N],[5,"PEM_read_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_DSAPrivateKey","","",N,N],[5,"PEM_write_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_X509","","",N,N],[5,"PEM_write_bio_X509_REQ","","",N,N],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",N,N],[5,"RAND_bytes","","",N,N],[5,"RSA_new","","",N,N],[5,"RSA_free","","",N,N],[5,"RSA_generate_key","","",N,N],[5,"RSA_generate_key_ex","","",N,N],[5,"RSA_private_decrypt","","",N,N],[5,"RSA_public_decrypt","","",N,N],[5,"RSA_private_encrypt","","",N,N],[5,"RSA_public_encrypt","","",N,N],[5,"RSA_sign","","",N,N],[5,"RSA_size","","",N,N],[5,"RSA_verify","","",N,N],[5,"DSA_new","","",N,N],[5,"DSA_free","","",N,N],[5,"DSA_size","","",N,N],[5,"DSA_generate_parameters_ex","","",N,N],[5,"DSA_generate_key","","",N,N],[5,"DSA_sign","","",N,N],[5,"DSA_verify","","",N,N],[5,"SSL_library_init","","",N,N],[5,"SSL_load_error_strings","","",N,N],[5,"OPENSSL_add_all_algorithms_noconf","","",N,N],[5,"SSLv3_method","","",N,N],[5,"TLSv1_method","","",N,N],[5,"SSLv23_method","","",N,N],[5,"SSL_new","","",N,N],[5,"SSL_pending","","",N,N],[5,"SSL_free","","",N,N],[5,"SSL_set_bio","","",N,N],[5,"SSL_get_rbio","","",N,N],[5,"SSL_get_wbio","","",N,N],[5,"SSL_accept","","",N,N],[5,"SSL_connect","","",N,N],[5,"SSL_do_handshake","","",N,N],[5,"SSL_ctrl","","",N,N],[5,"SSL_get_error","","",N,N],[5,"SSL_read","","",N,N],[5,"SSL_write","","",N,N],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",N,N],[5,"SSL_get_SSL_CTX","","",N,N],[5,"SSL_set_SSL_CTX","","",N,N],[5,"SSL_get_current_compression","","",N,N],[5,"SSL_get_peer_certificate","","",N,N],[5,"SSL_get_ssl_method","","",N,N],[5,"SSL_get_version","","",N,N],[5,"SSL_state_string","","",N,N],[5,"SSL_state_string_long","","",N,N],[5,"SSL_set_verify","","",N,N],[5,"SSL_get_ex_new_index","","",N,N],[5,"SSL_set_ex_data","","",N,N],[5,"SSL_get_ex_data","","",N,N],[5,"SSL_get_servername","","",N,N],[5,"SSL_COMP_get_name","","",N,N],[5,"SSL_get_current_cipher","","",N,N],[5,"SSL_CIPHER_get_name","","",N,N],[5,"SSL_CIPHER_get_bits","","",N,N],[5,"SSL_CIPHER_get_version","","",N,N],[5,"SSL_CIPHER_description","","",N,N],[5,"SSL_CTX_new","","",N,N],[5,"SSL_CTX_free","","",N,N],[5,"SSL_CTX_ctrl","","",N,N],[5,"SSL_CTX_callback_ctrl","","",N,N],[5,"SSL_CTX_set_verify","","",N,N],[5,"SSL_CTX_set_verify_depth","","",N,N],[5,"SSL_CTX_load_verify_locations","","",N,N],[5,"SSL_CTX_set_default_verify_paths","","",N,N],[5,"SSL_CTX_get_ex_new_index","","",N,N],[5,"SSL_CTX_set_ex_data","","",N,N],[5,"SSL_CTX_get_ex_data","","",N,N],[5,"SSL_CTX_set_session_id_context","","",N,N],[5,"SSL_CTX_use_certificate_file","","",N,N],[5,"SSL_CTX_use_certificate_chain_file","","",N,N],[5,"SSL_CTX_use_certificate","","",N,N],[5,"SSL_CTX_use_PrivateKey_file","","",N,N],[5,"SSL_CTX_use_PrivateKey","","",N,N],[5,"SSL_CTX_check_private_key","","",N,N],[5,"SSL_CTX_set_cipher_list","","",N,N],[5,"X509_add_ext","","",N,N],[5,"X509_digest","","",N,N],[5,"X509_free","","",N,N],[5,"X509_REQ_free","","",N,N],[5,"X509_get_serialNumber","","",N,N],[5,"X509_get_subject_name","","",N,N],[5,"X509_gmtime_adj","","",N,N],[5,"X509_new","","",N,N],[5,"X509_set_issuer_name","","",N,N],[5,"X509_set_notAfter","","",N,N],[5,"X509_set_notBefore","","",N,N],[5,"X509_set_version","","",N,N],[5,"X509_set_pubkey","","",N,N],[5,"X509_sign","","",N,N],[5,"X509_get_pubkey","","",N,N],[5,"X509_to_X509_REQ","","",N,N],[5,"X509_get_ext_d2i","","",N,N],[5,"X509_EXTENSION_free","","",N,N],[5,"X509_NAME_add_entry_by_txt","","",N,N],[5,"X509_NAME_get_index_by_NID","","",N,N],[5,"X509_NAME_get_entry","","",N,N],[5,"X509_NAME_ENTRY_get_data","","",N,N],[5,"ASN1_STRING_to_UTF8","","",N,N],[5,"ASN1_STRING_length","","",N,N],[5,"ASN1_STRING_data","","",N,N],[5,"X509_STORE_CTX_get_current_cert","","",N,N],[5,"X509_STORE_CTX_get_error","","",N,N],[5,"X509_STORE_CTX_get_ex_data","","",N,N],[5,"X509_STORE_CTX_get_error_depth","","",N,N],[5,"X509V3_EXT_conf_nid","","",N,N],[5,"X509V3_EXT_conf","","",N,N],[5,"X509V3_set_ctx","","",N,N],[5,"X509_REQ_add_extensions","","",N,N],[5,"X509_REQ_sign","","",N,N],[5,"d2i_X509","","",N,N],[5,"i2d_X509_bio","","",N,N],[5,"i2d_X509_REQ_bio","","",N,N],[5,"i2d_RSA_PUBKEY","","",N,N],[5,"d2i_RSA_PUBKEY","","",N,N],[5,"i2d_RSAPrivateKey","","",N,N],[5,"d2i_RSAPrivateKey","","",N,N],[5,"d2i_PKCS12","","",N,N],[5,"PKCS12_parse","","",N,N],[5,"PKCS12_free","","",N,N],[5,"sk_free","","",N,N],[5,"sk_pop_free","","",N,N],[5,"sk_pop","","",N,N],[5,"GENERAL_NAME_free","","",N,N],[5,"SSLeay","","",N,N],[5,"SSLeay_version","","",N,N],[0,"probe","","",N,N],[3,"ProbeResult","openssl_sys::probe","",N,N],[12,"cert_file","","",14,N],[12,"cert_dir","","",14,N],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be found.",N,[[],["vec",["pathbuf"]]]],[5,"init_ssl_cert_env_vars","","",N,[[]]],[5,"probe","","",N,[[],["proberesult"]]],[6,"ASN1_INTEGER","openssl_sys","",N,N],[6,"ASN1_STRING","","",N,N],[6,"ASN1_TIME","","",N,N],[6,"ASN1_TYPE","","",N,N],[6,"BN_CTX","","",N,N],[6,"BN_GENCB","","",N,N],[6,"COMP_METHOD","","",N,N],[6,"DH","","",N,N],[6,"ENGINE","","",N,N],[6,"EVP_CIPHER_CTX","","",N,N],[6,"EVP_MD","","",N,N],[6,"EVP_PKEY_CTX","","",N,N],[6,"SSL","","",N,N],[6,"SSL_CIPHER","","",N,N],[6,"SSL_CTX","","",N,N],[6,"SSL_METHOD","","",N,N],[6,"X509","","",N,N],[6,"X509_CRL","","",N,N],[6,"X509_EXTENSION","","",N,N],[6,"X509_NAME","","",N,N],[6,"X509_NAME_ENTRY","","",N,N],[6,"X509_REQ","","",N,N],[6,"X509_STORE_CTX","","",N,N],[6,"bio_st","","",N,N],[6,"bio_info_cb","","",N,N],[6,"CRYPTO_EX_new","","",N,N],[6,"CRYPTO_EX_dup","","",N,N],[6,"CRYPTO_EX_free","","",N,N],[6,"PasswordCallback","","",N,N],[17,"BIO_TYPE_NONE","","",N,N],[17,"BIO_CTRL_EOF","","",N,N],[17,"BIO_CTRL_INFO","","",N,N],[17,"BIO_CTRL_FLUSH","","",N,N],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",N,N],[17,"BIO_FLAGS_READ","","",N,N],[17,"BIO_FLAGS_WRITE","","",N,N],[17,"BIO_FLAGS_IO_SPECIAL","","",N,N],[17,"BIO_FLAGS_RWS","","",N,N],[17,"BIO_FLAGS_SHOULD_RETRY","","",N,N],[17,"CRYPTO_LOCK","","",N,N],[17,"EVP_MAX_MD_SIZE","","",N,N],[17,"EVP_PKEY_RSA","","",N,N],[17,"MBSTRING_ASC","","",N,N],[17,"MBSTRING_BMP","","",N,N],[17,"MBSTRING_FLAG","","",N,N],[17,"MBSTRING_UNIV","","",N,N],[17,"MBSTRING_UTF8","","",N,N],[17,"NID_rsaEncryption","","",N,N],[17,"NID_ext_key_usage","","",N,N],[17,"NID_key_usage","","",N,N],[17,"PKCS5_SALT_LEN","","",N,N],[17,"RSA_F4","","",N,N],[17,"SSL_CTRL_SET_TMP_DH","","",N,N],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",N,N],[17,"SSL_CTRL_OPTIONS","","",N,N],[17,"SSL_CTRL_MODE","","",N,N],[17,"SSL_CTRL_SET_READ_AHEAD","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",N,N],[17,"SSL_CTRL_CLEAR_OPTIONS","","",N,N],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",N,N],[17,"SSL_MODE_AUTO_RETRY","","",N,N],[17,"SSL_ERROR_NONE","","",N,N],[17,"SSL_ERROR_SSL","","",N,N],[17,"SSL_ERROR_SYSCALL","","",N,N],[17,"SSL_ERROR_WANT_ACCEPT","","",N,N],[17,"SSL_ERROR_WANT_CONNECT","","",N,N],[17,"SSL_ERROR_WANT_READ","","",N,N],[17,"SSL_ERROR_WANT_WRITE","","",N,N],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",N,N],[17,"SSL_ERROR_ZERO_RETURN","","",N,N],[17,"SSL_VERIFY_NONE","","",N,N],[17,"SSL_VERIFY_PEER","","",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_TLSEXT_PADDING","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_ALL","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_SSLv2","","",N,N],[17,"SSL_OP_NO_SSLv3","","",N,N],[17,"SSL_OP_NO_TLSv1","","",N,N],[17,"TLSEXT_NAMETYPE_host_name","","",N,N],[17,"SSL_TLSEXT_ERR_OK","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",N,N],[17,"SSL_TLSEXT_ERR_NOACK","","",N,N],[17,"SSLEAY_VERSION","","",N,N],[17,"SSLEAY_CFLAGS","","",N,N],[17,"SSLEAY_BUILT_ON","","",N,N],[17,"SSLEAY_PLATFORM","","",N,N],[17,"SSLEAY_DIR","","",N,N],[17,"V_ASN1_GENERALIZEDTIME","","",N,N],[17,"V_ASN1_UTCTIME","","",N,N],[17,"X509_FILETYPE_ASN1","","",N,N],[17,"X509_FILETYPE_DEFAULT","","",N,N],[17,"X509_FILETYPE_PEM","","",N,N],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",N,N],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",N,N],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",N,N],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CERT_REJECTED","","",N,N],[17,"X509_V_ERR_CERT_REVOKED","","",N,N],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CERT_UNTRUSTED","","",N,N],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",N,N],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",N,N],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",N,N],[17,"X509_V_ERR_INVALID_CA","","",N,N],[17,"X509_V_ERR_INVALID_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_NON_CA","","",N,N],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_PURPOSE","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",N,N],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",N,N],[17,"X509_V_ERR_OUT_OF_MEM","","",N,N],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",N,N],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",N,N],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",N,N],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",N,N],[17,"X509_V_ERR_SUBTREE_MINMAX","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",N,N],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",N,N],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",N,N],[17,"X509_V_OK","","",N,N],[17,"GEN_OTHERNAME","","",N,N],[17,"GEN_EMAIL","","",N,N],[17,"GEN_DNS","","",N,N],[17,"GEN_X400","","",N,N],[17,"GEN_DIRNAME","","",N,N],[17,"GEN_EDIPARTY","","",N,N],[17,"GEN_URI","","",N,N],[17,"GEN_IPADD","","",N,N],[17,"GEN_RID","","",N,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","openssl_sys::probe","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"clone","openssl_sys","",4,[[["self"]],["bio_method"]]],[11,"clone","","",16,[[["self"]],["evp_md_ctx"]]],[11,"clone","","",11,[[["self"]],["evp_cipher"]]],[11,"clone","","",17,[[["self"]],["hmac_ctx"]]],[11,"clone","","",12,[[["self"]],["general_name"]]],[11,"clone","","",18,[[["self"]],["x509v3_ctx"]]],[11,"clone","","",13,[[["self"]],["bignum"]]]],"paths":[[3,"stack_st_X509"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"BIO_METHOD"],[3,"_STACK"],[3,"RSA"],[3,"DSA"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"EVP_CIPHER"],[3,"GENERAL_NAME"],[3,"BIGNUM"],[3,"ProbeResult"],[3,"PKCS12"],[3,"EVP_MD_CTX"],[3,"HMAC_CTX"],[3,"X509V3_CTX"]]};
searchIndex["openssl_sys_extras"]={"doc":"","items":[[5,"SSL_CTX_set_options","openssl_sys_extras","",N,N],[5,"SSL_CTX_get_options","","",N,N],[5,"SSL_CTX_clear_options","","",N,N],[5,"HMAC_Init_ex","","",N,N],[5,"HMAC_Final","","",N,N],[5,"HMAC_Update","","",N,N],[5,"HMAC_CTX_copy","","",N,N],[5,"BIO_eof","","",N,N],[5,"BIO_set_nbio","","",N,N],[5,"BIO_set_mem_eof_return","","",N,N],[5,"BIO_clear_retry_flags","","",N,N],[5,"BIO_set_retry_read","","",N,N],[5,"BIO_set_retry_write","","",N,N],[5,"BIO_flush","","",N,N],[5,"SSL_CTX_set_options_shim","","",N,N],[5,"SSL_CTX_get_options_shim","","",N,N],[5,"SSL_CTX_clear_options_shim","","",N,N],[5,"SSL_CTX_set_mode","","",N,N],[5,"SSL_CTX_add_extra_chain_cert","","",N,N],[5,"SSL_CTX_set_read_ahead","","",N,N],[5,"SSL_set_tlsext_host_name","","",N,N],[5,"SSL_CTX_set_tmp_dh","","",N,N],[5,"X509_get_extensions","","",N,N],[5,"SSL_CTX_set_tlsext_servername_callback","","",N,N],[5,"SSL_CTX_set_tlsext_servername_arg","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_TLSEXT_PADDING","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_SSLv2","","",N,N],[17,"SSL_OP_NO_SSLv3","","",N,N],[17,"SSL_OP_NO_DTLSv1","","",N,N],[17,"SSL_OP_NO_TLSv1","","",N,N],[17,"SSL_OP_NO_DTLSv1_2","","",N,N],[17,"SSL_OP_NO_TLSv1_2","","",N,N],[17,"SSL_OP_NO_TLSv1_1","","",N,N],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",N,N],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",N,N],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",N,N],[17,"SSL_OP_PKCS1_CHECK_1","","",N,N],[17,"SSL_OP_PKCS1_CHECK_2","","",N,N],[17,"SSL_OP_EPHEMERAL_RSA","","",N,N]],"paths":[]};
searchIndex["openssl_verify"]={"doc":"Hostname verification for OpenSSL.","items":[[5,"verify_callback","openssl_verify","A convenience wrapper around verify_hostname that implements the logic for OpenSSL's certificate verification callback.",N,[[["str"],["bool"],["x509storecontext"]],["bool"]]],[5,"verify_hostname","","Validates that the certificate matches the provided fully qualified domain name.",N,[[["str"],["x509"]],["bool"]]]],"paths":[]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",1,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",1,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",1,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"contains","","",6,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["simple_encode_set"]]],[11,"clone","","",3,[[["self"]],["query_encode_set"]]],[11,"clone","","",4,[[["self"]],["default_encode_set"]]],[11,"clone","","",5,[[["self"]],["path_segment_encode_set"]]],[11,"clone","","",6,[[["self"]],["userinfo_encode_set"]]],[11,"clone","","",7,[[["self"]],["percentencode"]]],[11,"clone","","",1,[[["self"]],["percentdecode"]]],[11,"next","","",7,[[["self"]],["option",["str"]]]],[11,"size_hint","","",7,N],[11,"next","","",1,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[8,"EncodeSet"],[3,"PercentDecode"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"]]};
searchIndex["phf"]={"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",N,N],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,N],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,N],[3,"Map","","An immutable map constructed at compile time.",N,N],[3,"Set","","An immutable set constructed at compile time.",N,N],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",N,N],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",N,N],[0,"map","","An immutable map constructed at compile time.",N,N],[3,"Map","phf::map","An immutable map constructed at compile time.",N,N],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",N,N],[3,"Keys","","An iterator over the keys in a `Map`.",N,N],[3,"Values","","An iterator over the values in a `Map`.",N,N],[11,"is_empty","","Returns true if the `Map` is empty.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of entries in the `Map`.",1,[[["self"]],["usize"]]],[11,"contains_key","","Determines if `key` is in the `Map`.",1,[[["self"],["t"]],["bool"]]],[11,"get","","Returns a reference to the value that `key` maps to.",1,[[["self"],["t"]],["option"]]],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,[[["self"],["t"]],["option"]]],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,[[["self"],["t"]],["option"]]],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,[[["self"]],["entries"]]],[11,"keys","","Returns an iterator over the keys in the map.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator over the values in the map.",1,[[["self"]],["values"]]],[0,"set","phf","An immutable set constructed at compile time.",N,N],[3,"Set","phf::set","An immutable set constructed at compile time.",N,N],[3,"Iter","","An iterator over the values in a `Set`.",N,N],[11,"len","","Returns the number of elements in the `Set`.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Set` contains no elements.",2,[[["self"]],["bool"]]],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",2,[[["self"],["u"]],["option"]]],[11,"contains","","Returns true if `value` is in the `Set`.",2,[[["self"],["u"]],["bool"]]],[11,"iter","","Returns an iterator over the values in the set.",2,[[["self"]],["iter"]]],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",2,[[["self"],["set"]],["bool"]]],[11,"is_subset","","Returns true if `other` contains all values in `self`.",2,[[["self"],["set"]],["bool"]]],[11,"is_superset","","Returns true if `self` contains all values in `other`.",2,[[["self"],["set"]],["bool"]]],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",N,N],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",N,N],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",N,N],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",N,N],[3,"Values","","An iterator over the values in a `OrderedMap`.",N,N],[11,"len","","Returns the number of entries in the `Map`.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Map` is empty.",3,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the value that `key` maps to.",3,[[["self"],["t"]],["option"]]],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",3,[[["self"],["t"]],["option"]]],[11,"contains_key","","Determines if `key` is in the `Map`.",3,[[["self"],["t"]],["bool"]]],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",3,[[["self"],["t"]],["option",["usize"]]]],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",3,[[["self"],["usize"]],["option"]]],[11,"get_entry","","Like `get`, but returns both the key and the value.",3,[[["self"],["t"]],["option"]]],[11,"entries","","Returns an iterator over the key/value pairs in the map.",3,[[["self"]],["entries"]]],[11,"keys","","Returns an iterator over the keys in the map.",3,[[["self"]],["keys"]]],[11,"values","","Returns an iterator over the values in the map.",3,[[["self"]],["values"]]],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",N,N],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",N,N],[3,"Iter","","An iterator over the values in a `OrderedSet`.",N,N],[11,"len","","Returns the number of elements in the `OrderedSet`.",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",4,[[["self"]],["bool"]]],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",4,[[["self"],["u"]],["option"]]],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",4,[[["self"],["u"]],["option",["usize"]]]],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",4,[[["self"],["usize"]],["option"]]],[11,"contains","","Returns true if `value` is in the `Set`.",4,[[["self"],["u"]],["bool"]]],[11,"iter","","Returns an iterator over the values in the set.",4,[[["self"]],["iter"]]],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",4,[[["self"],["orderedset"]],["bool"]]],[11,"is_subset","","Returns true if `other` contains all values in `self`.",4,[[["self"],["orderedset"]],["bool"]]],[11,"is_superset","","Returns true if `self` contains all values in `other`.",4,[[["self"],["orderedset"]],["bool"]]],[11,"from","phf::map","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","phf::set","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","phf::ordered_map","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","phf::ordered_set","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","phf::map","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","phf::set","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","phf::ordered_map","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","phf::ordered_set","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"next","phf::map","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next","phf::set","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next","phf::ordered_map","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next","phf::ordered_set","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","phf::map","",5,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next_back","phf::set","",8,[[["self"]],["option"]]],[11,"next_back","phf::ordered_map","",9,[[["self"]],["option"]]],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next_back","phf::ordered_set","",12,[[["self"]],["option"]]],[11,"fmt","phf::map","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","phf::set","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","phf::ordered_map","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","phf::ordered_set","",4,[[["self"],["formatter"]],["result"]]],[11,"index","phf::map","",1,[[["self"],["t"]],["v"]]],[11,"index","phf::ordered_map","",3,[[["self"],["t"]],["v"]]]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Set"],[3,"OrderedMap"],[3,"OrderedSet"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Iter"]]};
searchIndex["phf_shared"]={"doc":"","items":[[5,"displace","phf_shared","",N,[[["u32"],["u32"],["u32"],["u32"]],["u32"]]],[5,"split","","",N,N],[5,"hash","","`key` is from `phf_generator::HashState::key`.",N,[[["t"],["u64"]],["u64"]]],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",N,N],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",N,N],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,[[["self"],["h"]]]],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,N]],"paths":[[8,"PhfHash"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",1,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[8,"Rng","rand","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",2,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",2,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",2,N],[11,"gen","","Return a random value of a `Rand` type.",2,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",2,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,N],[11,"shuffle","","Shuffle a mutable slice in place.",2,N],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,[[["r"]],["self"]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",4,N],[10,"from_seed","","Create a new RNG with the given seed.",4,[[["seed"]],["self"]]],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",5,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",6,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,[[["range"],["r"]],["self"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",8,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",9,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",11,[[["self"],["r"]],["support"]]],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",12,N],[12,"item","","The actual item which is being weighted",12,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[11,"from","rand::os","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","rand::isaac","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","rand::chacha","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","rand::reseeding","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","rand::read","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","rand","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","rand::distributions::range","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","rand::distributions::gamma","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","rand::distributions::normal","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","rand::distributions::exponential","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","rand::distributions::normal","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","rand::distributions::exponential","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","rand::distributions","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"reseed","rand::reseeding","",17,N],[11,"clone","rand::distributions::exponential","",31,[[["self"]],["exp"]]],[11,"clone","rand::isaac","",14,[[["self"]],["isaacrng"]]],[11,"clone","rand::distributions::normal","",29,[[["self"]],["normal"]]],[11,"clone","rand::distributions::gamma","",27,[[["self"]],["fisherf"]]],[11,"clone","","",26,[[["self"]],["chisquared"]]],[11,"clone","rand::isaac","",15,[[["self"]],["isaac64rng"]]],[11,"clone","rand","",23,[[["self"]],["threadrng"]]],[11,"clone","rand::chacha","",16,[[["self"]],["chacharng"]]],[11,"clone","rand::distributions::range","",24,[[["self"]],["range"]]],[11,"clone","rand::distributions","",12,[[["self"]],["weighted"]]],[11,"clone","rand::distributions::normal","",8,[[["self"]],["standardnormal"]]],[11,"clone","rand","",21,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::distributions::normal","",30,[[["self"]],["lognormal"]]],[11,"clone","rand::distributions::gamma","",28,[[["self"]],["studentt"]]],[11,"clone","","",25,[[["self"]],["gamma"]]],[11,"clone","rand::distributions::exponential","",9,[[["self"]],["exp1"]]],[11,"clone","rand","",22,[[["self"]],["stdrng"]]],[11,"clone","rand::distributions","",32,[[["self"]],["randsample"]]],[11,"clone","rand::reseeding","",17,[[["self"]],["reseedwithdefault"]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,N],[11,"next_u32","rand::isaac","",14,[[["self"]],["u32"]]],[11,"next_u32","rand::read","",18,[[["self"]],["u32"]]],[11,"next_u64","","",18,[[["self"]],["u64"]]],[11,"fill_bytes","","",18,N],[11,"next_u32","rand","",22,[[["self"]],["u32"]]],[11,"next_u64","","",22,[[["self"]],["u64"]]],[11,"next_u32","rand::os","",13,[[["self"]],["u32"]]],[11,"next_u64","","",13,[[["self"]],["u64"]]],[11,"fill_bytes","","",13,N],[11,"next_u32","rand","",21,[[["self"]],["u32"]]],[11,"next_u32","rand::isaac","",15,[[["self"]],["u32"]]],[11,"next_u64","","",15,[[["self"]],["u64"]]],[11,"next_u32","rand::chacha","",16,[[["self"]],["u32"]]],[11,"next_u32","rand","",23,[[["self"]],["u32"]]],[11,"next_u64","","",23,[[["self"]],["u64"]]],[11,"fill_bytes","","",23,N],[11,"default","rand::reseeding","",17,[[],["reseedwithdefault"]]],[11,"ind_sample","rand::distributions::gamma","",26,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions::gamma","",28,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::exponential","",31,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",27,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",25,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::range","",24,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::normal","",29,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",32,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::normal","",30,[[["self"],["r"]],["f64"]]],[11,"fmt","rand::read","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::chacha","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::os","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::range","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","","",20,[[["self"]],["option",["char"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"rand","rand::distributions::exponential","",9,[[["r"]],["exp1"]]],[11,"rand","rand::isaac","",15,[[["r"]],["isaac64rng"]]],[11,"rand","rand::distributions::normal","",8,[[["r"]],["standardnormal"]]],[11,"rand","rand","",6,[[["r"]],["closed01",["f32"]]]],[11,"rand","","",21,[[["r"]],["xorshiftrng"]]],[11,"rand","rand::isaac","",14,[[["r"]],["isaacrng"]]],[11,"rand","rand","",5,[[["r"]],["open01",["f64"]]]],[11,"rand","","",5,[[["r"]],["open01",["f32"]]]],[11,"rand","","",6,[[["r"]],["closed01",["f64"]]]],[11,"rand","rand::chacha","",16,[[["r"]],["chacharng"]]],[11,"reseed","rand","",22,N],[11,"from_seed","","",22,N],[11,"reseed","rand::chacha","",16,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",16,N],[11,"reseed","rand::isaac","",14,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",14,N],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",21,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",21,N],[11,"reseed","rand::reseeding","",0,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,N],[11,"reseed","rand::isaac","",15,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",15,N],[11,"sample","rand::distributions","",32,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::normal","",29,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::gamma","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::exponential","",31,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::normal","",30,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::gamma","",28,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::range","",24,[[["self"],["r"]],["sup"]]],[11,"new","rand::os","Create a new `OsRng`.",13,[[],["result",["osrng","error"]]]],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",14,[[],["isaacrng"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",15,[[],["isaac64rng"]]],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",16,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",16,N],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,N],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",18,[[["r"]],["readrng"]]],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",21,[[],["xorshiftrng"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",22,[[],["result",["stdrng","error"]]]],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",24,[[["x"],["x"]],["range"]]],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",25,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",26,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",27,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",28,[[["f64"]],["studentt"]]],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",29,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",30,[[["f64"],["f64"]],["lognormal"]]],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",31,[[["f64"]],["exp"]]],[11,"new","rand::distributions","",32,[[],["randsample"]]],[11,"new","","Create a new `WeightedChoice`.",33,N]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedWithDefault"],[3,"ReadRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Normal"],[3,"LogNormal"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"]]};
searchIndex["regex"]={"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"NoExpand","","NoExpand indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,N],[5,"quote","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",N,[[["str"],["str"]],["result",["bool","error"]]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Splits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"new","","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,N],[11,"shortest_match","","Returns the end location of a match in the text given.",6,N],[11,"as_str","","Returns the original string of this regex.",6,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",6,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",6,[[["self"]],["usize"]]],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",7,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",7,[[["self"],["usize"]],["option"]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",7,[[["self"],["str"]],["option"]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",7,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",7,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",7,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",7,N],[11,"len","","Returns the number of captured groups.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",7,[[["self"]],["bool"]]],[11,"new","regex","Create a new regex set with the given regular expressions.",8,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",8,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",8,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",8,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",9,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",9,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",9,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",9,[[["self"]],["setmatchesiter"]]],[11,"new","regex::bytes","Create a new regex set with the given regular expressions.",10,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",10,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",10,N],[11,"len","","Returns the total number of regular expressions in this set.",10,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",11,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",11,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",11,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",11,[[["self"]],["setmatchesiter"]]],[11,"new","regex","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",12,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",12,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",12,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",12,[[["self"],["str"]],["option"]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",12,[[["self"],["str"]],["findmatches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",12,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",12,[[["self"],["str"]],["findcaptures"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",12,[[["self"],["str"]],["regexsplits"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",12,[[["self"],["str"],["usize"]],["regexsplitsn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",12,[[["self"],["str"],["r"]],["string"]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",12,[[["self"],["str"],["r"]],["string"]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",12,[[["self"],["str"],["usize"],["r"]],["string"]]],[11,"shortest_match","","Returns the end location of a match in the text given.",12,[[["self"],["str"]],["option",["usize"]]]],[11,"as_str","","Returns the original string of this regex.",12,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",12,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",12,[[["self"]],["usize"]]],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",13,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",13,[[["self"],["usize"]],["option",["str"]]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",13,[[["self"],["str"]],["option",["str"]]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",13,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",13,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",13,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",13,[[["self"],["str"]],["string"]]],[11,"len","","Returns the number of captured groups.",13,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",13,[[["self"]],["bool"]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",14,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",14,[[["self"]],["option",["cow"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"into_iter","","",23,[[["self"]],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","regex::bytes","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"into_iter","","",25,[[["self"]],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"into_iter","","",27,[[["self"]],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"reg_replace","regex","",0,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","",0,[[["self"]],["option",["cow"]]]],[11,"clone","regex::bytes","",6,[[["self"]],["regex"]]],[11,"clone","regex","",8,[[["self"]],["regexset"]]],[11,"clone","","",9,[[["self"]],["setmatches"]]],[11,"clone","","",16,[[["self"]],["setmatchesiter"]]],[11,"clone","regex::bytes","",10,[[["self"]],["regexset"]]],[11,"clone","","",11,[[["self"]],["setmatches"]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"clone","regex","",12,[[["self"]],["regex"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"next","regex::bytes","",27,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option",["captures"]]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"next","","",31,[[["self"]],["option",["option"]]]],[11,"size_hint","","",31,N],[11,"next","","",32,[[["self"]],["option",["option"]]]],[11,"next","","",33,[[["self"]],["option",["option"]]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"next","regex","",15,[[["self"]],["option",["usize"]]]],[11,"next","","",16,[[["self"]],["option",["usize"]]]],[11,"next","regex::bytes","",25,[[["self"]],["option",["usize"]]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"next","regex","",20,[[["self"]],["option",["option"]]]],[11,"size_hint","","",20,N],[11,"next","","",23,[[["self"]],["option",["str"]]]],[11,"next","","",24,[[["self"]],["option",["str"]]]],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"next","","",18,[[["self"]],["option",["option"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"next","","",21,[[["self"]],["option",["captures"]]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"eq","","",12,[[["self"],["regex"]],["bool"]]],[11,"next_back","","",15,[[["self"]],["option",["usize"]]]],[11,"next_back","","",16,[[["self"]],["option",["usize"]]]],[11,"next_back","regex::bytes","",25,[[["self"]],["option",["usize"]]]],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"into_iter","regex","",9,N],[11,"into_iter","regex::bytes","",11,N],[11,"fmt","regex","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",6,[[["str"]],["result",["regex","error"]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",12,[[["str"]],["result",["regex","error"]]]],[11,"index","regex::bytes","",7,N],[11,"index","","",7,N],[11,"index","regex","",13,[[["self"],["usize"]],["str"]]],[11,"index","","",13,[[["self"],["str"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",14,[[["self"]],["option",["cow"]]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"Regex"],[3,"Captures"],[8,"Replacer"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"CaptureNames"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",N,N],[3,"CharClass","","A character class.",N,N],[3,"ClassRange","","A single inclusive range in a character class.",N,N],[12,"start","","The start character of the range.",0,N],[12,"end","","The end character of the range.",0,N],[3,"ByteClass","","A byte class for byte ranges only.",N,N],[3,"ByteRange","","A single inclusive range in a byte class.",N,N],[12,"start","","The start byte of the range.",1,N],[12,"end","","The end byte of the range.",1,N],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",N,N],[3,"Error","","A parse error.",N,N],[4,"Expr","","A regular expression abstract syntax tree.",N,N],[13,"Empty","","An empty regex (which never matches any text).",2,N],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,N],[12,"chars","regex_syntax::Expr","The characters.",2,N],[12,"casei","","Whether to match case insensitively.",2,N],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,N],[12,"bytes","regex_syntax::Expr","The bytes.",2,N],[12,"casei","","Whether to match case insensitively.",2,N],[13,"AnyChar","regex_syntax","Match any character.",2,N],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,N],[13,"AnyByte","","Match any byte.",2,N],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,N],[13,"Class","","A character class.",2,N],[13,"ClassBytes","","A character class with byte ranges only.",2,N],[13,"StartLine","","Match the start of a line or beginning of input.",2,N],[13,"EndLine","","Match the end of a line or end of input.",2,N],[13,"StartText","","Match the beginning of input.",2,N],[13,"EndText","","Match the end of input.",2,N],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,N],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,N],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,N],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,N],[13,"Group","","A group, possibly non-capturing.",2,N],[12,"e","regex_syntax::Expr","The expression inside the group.",2,N],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,N],[12,"name","","The capture name, only for capturing named groups.",2,N],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,N],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,N],[12,"r","","The type of repeat operator used.",2,N],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,N],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,N],[13,"Alternate","","An alternation of expressions. Only one must match.",2,N],[4,"Repeater","","The type of a repeat operator expression.",N,N],[13,"ZeroOrOne","","Match zero or one (`?`).",3,N],[13,"ZeroOrMore","","Match zero or more (`*`).",3,N],[13,"OneOrMore","","Match one or more (`+`).",3,N],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,N],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,N],[12,"max","","Optional upper bound on the number of matches.",3,N],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",N,N],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,N],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,N],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,N],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,N],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,N],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,N],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,N],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,N],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,N],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,N],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,N],[12,"end","","The second character specified in the range.",4,N],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,N],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,N],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,N],[12,"max","","The second number specified in the repetition.",4,N],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,N],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,N],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,N],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,N],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,N],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,N],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,N],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,N],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,N],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,N],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,N],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,N],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,N],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,N],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,N],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,N],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,N],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,N],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,N],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,N],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,N],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,N],[5,"quote","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[11,"empty","","Returns a new empty set of literals using default limits.",5,[[],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",5,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,N],[11,"min_len","","Returns the length of the smallest literal.",5,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",5,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",5,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,[[["self"],["expr"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,[[["self"],["expr"]],["bool"]]],[11,"union","","Unions this set with another set.",5,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",5,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,N],[11,"add","","Adds the given literal to this set.",5,[[["self"],["lit"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,[[["self"],["charclass"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,[[["self"],["byteclass"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,[[["self"]]]],[11,"reverse","","Reverses all members in place.",5,[[["self"]]]],[11,"clear","","Clears this set of all members.",5,[[["self"]]]],[11,"new","","Returns a new complete literal with the bytes given.",6,[[["vec",["u8"]]],["lit"]]],[11,"empty","","Returns a new complete empty literal.",6,[[],["lit"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",6,[[["self"]]]],[6,"Result","","An alias for computations that can return a `Error`.",N,N],[11,"new","","Create a new builder for configuring expression parsing.",7,[[],["exprbuilder"]]],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",7,[[["self"],["bool"]],["exprbuilder"]]],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",7,[[["self"],["usize"]],["exprbuilder"]]],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",7,[[["self"],["str"]],["result",["expr"]]]],[11,"parse","","Parses a string in a regular expression syntax tree.",2,[[["str"]],["result",["expr"]]]],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,[[["self"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,[[["self"]],["literals"]]],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,[[["self"]],["bool"]]],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,[[["self"]],["bool"]]],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,[[["self"]],["bool"]]],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,[[["self"]],["bool"]]],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,[[["self"]],["bool"]]],[11,"new","","Create a new class from an existing set of ranges.",8,[[["vec",["classrange"]]],["charclass"]]],[11,"matches","","Returns true if `c` is matched by this character class.",8,[[["self"],["char"]],["bool"]]],[11,"remove","","Removes the given character from the class if it exists.",8,[[["self"],["char"]]]],[11,"negate","","Negates the character class.",8,[[["self"]],["charclass"]]],[11,"case_fold","","Apply case folding to this character class.",8,[[["self"]],["charclass"]]],[11,"new","","Create a new class from an existing set of ranges.",9,[[["vec",["byterange"]]],["byteclass"]]],[11,"matches","","Returns true if `b` is matched by this byte class.",9,[[["self"],["u8"]],["bool"]]],[11,"remove","","Removes the given byte from the class if it exists.",9,[[["self"],["u8"]]]],[11,"negate","","Negates the byte class.",9,[[["self"]],["byteclass"]]],[11,"case_fold","","Apply case folding to this byte class.",9,[[["self"]],["byteclass"]]],[11,"position","","Returns an approximate character offset at which the error occurred.",10,[[["self"]],["usize"]]],[11,"kind","","Returns the type of the regex parse error.",10,[[["self"]],["errorkind"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",5,[[["self"]],["literals"]]],[11,"clone","","",6,[[["self"]],["lit"]]],[11,"clone","","",2,[[["self"]],["expr"]]],[11,"clone","","",3,[[["self"]],["repeater"]]],[11,"clone","","",8,[[["self"]],["charclass"]]],[11,"clone","","",0,[[["self"]],["classrange"]]],[11,"clone","","",9,[[["self"]],["byteclass"]]],[11,"clone","","",1,[[["self"]],["byterange"]]],[11,"clone","","",7,[[["self"]],["exprbuilder"]]],[11,"clone","","",10,[[["self"]],["error"]]],[11,"clone","","",4,[[["self"]],["errorkind"]]],[11,"as_ref","","",6,N],[11,"partial_cmp","","",6,[[["self"],["lit"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["classrange"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["classrange"]],["bool"]]],[11,"le","","",0,[[["self"],["classrange"]],["bool"]]],[11,"gt","","",0,[[["self"],["classrange"]],["bool"]]],[11,"ge","","",0,[[["self"],["classrange"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["byterange"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["byterange"]],["bool"]]],[11,"le","","",1,[[["self"],["byterange"]],["bool"]]],[11,"gt","","",1,[[["self"],["byterange"]],["bool"]]],[11,"ge","","",1,[[["self"],["byterange"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["char"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["u8"]],["option",["ordering"]]]],[11,"eq","","",5,[[["self"],["literals"]],["bool"]]],[11,"ne","","",5,[[["self"],["literals"]],["bool"]]],[11,"eq","","",6,[[["self"],["lit"]],["bool"]]],[11,"eq","","",2,[[["self"],["expr"]],["bool"]]],[11,"ne","","",2,[[["self"],["expr"]],["bool"]]],[11,"eq","","",3,[[["self"],["repeater"]],["bool"]]],[11,"ne","","",3,[[["self"],["repeater"]],["bool"]]],[11,"eq","","",8,[[["self"],["charclass"]],["bool"]]],[11,"ne","","",8,[[["self"],["charclass"]],["bool"]]],[11,"eq","","",0,[[["self"],["classrange"]],["bool"]]],[11,"ne","","",0,[[["self"],["classrange"]],["bool"]]],[11,"eq","","",9,[[["self"],["byteclass"]],["bool"]]],[11,"ne","","",9,[[["self"],["byteclass"]],["bool"]]],[11,"eq","","",1,[[["self"],["byterange"]],["bool"]]],[11,"ne","","",1,[[["self"],["byterange"]],["bool"]]],[11,"eq","","",0,[[["self"],["char"]],["bool"]]],[11,"eq","","",1,[[["self"],["u8"]],["bool"]]],[11,"eq","","",10,[[["self"],["error"]],["bool"]]],[11,"ne","","",10,[[["self"],["error"]],["bool"]]],[11,"eq","","",4,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorkind"]],["bool"]]],[11,"into_iter","","",8,[[["self"]],["intoiter",["classrange"]]]],[11,"into_iter","","",9,[[["self"]],["intoiter",["byterange"]]]],[11,"cmp","","",6,[[["self"],["lit"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["classrange"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["byterange"]],["ordering"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"deref","","",6,[[["self"]],["vec"]]],[11,"deref","","",8,[[["self"]],["vec"]]],[11,"deref","","",9,[[["self"]],["vec"]]],[11,"deref_mut","","",6,[[["self"]],["vec"]]],[11,"description","","",10,[[["self"]],["str"]]]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"ExprBuilder"],[3,"CharClass"],[3,"ByteClass"],[3,"Error"]]};
searchIndex["remove_dir_all"]={"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",N,[[["p"]],["result",["error"]]]]],"paths":[]};
searchIndex["rustc_serialize"]={"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",N,N],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",N,N],[12,"char_set","","Character set to use",0,N],[12,"newline","","Newline to use",0,N],[12,"pad","","True to pad output with `=` characters",0,N],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[4,"Newline","","Available newline types",N,N],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,N],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,N],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",N,N],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,N],[13,"InvalidBase64Length","","The input had an invalid length",3,N],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",N,N],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",N,N],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",N,N],[8,"ToBase64","","A trait for converting a value to base64 encoding.",N,N],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,[[["self"],["config"]],["string"]]],[8,"FromBase64","","A trait for converting from base64 encoded values.",N,N],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,[[["self"]],["result",["vec","frombase64error"]]]],[0,"hex","rustc_serialize","Hex binary-to-text encoding",N,N],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",N,N],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,N],[13,"InvalidHexLength","","The input had an invalid length",6,N],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",N,N],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,[[["self"]],["string"]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",N,N],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,[[["self"]],["result",["vec","fromhexerror"]]]],[0,"json","rustc_serialize","JSON parsing and serialization",N,N],[3,"PrettyJson","rustc_serialize::json","",N,N],[3,"AsJson","","",N,N],[3,"AsPrettyJson","","",N,N],[3,"Encoder","","A structure for implementing serialization to JSON.",N,N],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",N,N],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",N,N],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",N,N],[3,"Decoder","","A structure to decode JSON to values in rust.",N,N],[4,"Json","","Represents a json value",N,N],[13,"I64","","",9,N],[13,"U64","","",9,N],[13,"F64","","",9,N],[13,"String","","",9,N],[13,"Boolean","","",9,N],[13,"Array","","",9,N],[13,"Object","","",9,N],[13,"Null","","",9,N],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",N,N],[13,"InvalidSyntax","","",10,N],[13,"InvalidNumber","","",10,N],[13,"EOFWhileParsingObject","","",10,N],[13,"EOFWhileParsingArray","","",10,N],[13,"EOFWhileParsingValue","","",10,N],[13,"EOFWhileParsingString","","",10,N],[13,"KeyMustBeAString","","",10,N],[13,"ExpectedColon","","",10,N],[13,"TrailingCharacters","","",10,N],[13,"TrailingComma","","",10,N],[13,"InvalidEscape","","",10,N],[13,"InvalidUnicodeCodePoint","","",10,N],[13,"LoneLeadingSurrogateInHexEscape","","",10,N],[13,"UnexpectedEndOfHexEscape","","",10,N],[13,"UnrecognizedHex","","",10,N],[13,"NotFourDigit","","",10,N],[13,"ControlCharacterInString","","",10,N],[13,"NotUtf8","","",10,N],[4,"ParserError","","",N,N],[13,"SyntaxError","","msg, line, col",11,N],[13,"IoError","","",11,N],[4,"DecoderError","","",N,N],[13,"ParseError","","",12,N],[13,"ExpectedError","","",12,N],[13,"MissingFieldError","","",12,N],[13,"UnknownVariantError","","",12,N],[13,"ApplicationError","","",12,N],[13,"EOF","","",12,N],[4,"EncoderError","","",N,N],[13,"FmtError","","",13,N],[13,"BadHashmapKey","","",13,N],[4,"JsonEvent","","The output of the streaming parser.",N,N],[13,"ObjectStart","","",14,N],[13,"ObjectEnd","","",14,N],[13,"ArrayStart","","",14,N],[13,"ArrayEnd","","",14,N],[13,"BooleanValue","","",14,N],[13,"I64Value","","",14,N],[13,"U64Value","","",14,N],[13,"F64Value","","",14,N],[13,"StringValue","","",14,N],[13,"NullValue","","",14,N],[13,"Error","","",14,N],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",N,N],[13,"Index","","",15,N],[13,"Key","","",15,N],[5,"error_str","","Returns a readable error string for a given error code.",N,[[["errorcode"]],["str"]]],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",N,[[["str"]],["decoderesult"]]],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",N,[[["t"]],["encoderesult",["string"]]]],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asjson"]]],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",N,[[["t"]],["asprettyjson"]]],[6,"Array","","",N,N],[6,"Object","","",N,N],[6,"BuilderError","","",N,N],[6,"EncodeResult","","",N,N],[6,"DecodeResult","","",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,[[["self"]],["json"]]],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,[[["write"]],["encoder"]]],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,[[["self"],["u32"]],["result"]]],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,[[["read"]],["result",["buildererror"]]]],[11,"from_str","","Decodes a json value from a string",9,[[["str"]],["result",["buildererror"]]]],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,[[["self"]],["prettyjson"]]],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,N],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,[[["self"],["str"]],["option",["json"]]]],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,[[["self"]],["option",["object"]]]],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,[[["self"]],["option",["array"]]]],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,[[["self"]],["option"]]],[11,"new","","",18,[[],["stack"]]],[11,"len","","Returns The number of elements in the Stack.",18,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the stack is empty.",18,[[["self"]],["bool"]]],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,[[["self"],["usize"]],["stackelement"]]],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,N],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,N],[11,"top","","Returns the top-most element (if any).",18,[[["self"]],["option",["stackelement"]]]],[11,"new","","Creates the JSON parser.",19,[[["t"]],["parser"]]],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,[[["self"]],["stack"]]],[11,"new","","Create a JSON Builder.",20,[[["t"]],["builder"]]],[11,"build","","",20,[[["self"]],["result",["json","buildererror"]]]],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,[[["json"]],["decoder"]]],[11,"indent","","Set the indentation level for the emitted JSON",22,[[["self"],["u32"]],["asprettyjson"]]],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",N,N],[16,"Error","","The error type for method results.",23,N],[10,"read_nil","","Read a nil value.",23,[[["self"]],["result"]]],[10,"read_usize","","Read a usize value.",23,[[["self"]],["result",["usize"]]]],[10,"read_u64","","Read a u64 value.",23,[[["self"]],["result",["u64"]]]],[10,"read_u32","","Read a u32 value.",23,[[["self"]],["result",["u32"]]]],[10,"read_u16","","Read a u16 value.",23,[[["self"]],["result",["u16"]]]],[10,"read_u8","","Read a u8 value.",23,[[["self"]],["result",["u8"]]]],[10,"read_isize","","Read a isize value.",23,[[["self"]],["result",["isize"]]]],[10,"read_i64","","Read a i64 value.",23,[[["self"]],["result",["i64"]]]],[10,"read_i32","","Read a i32 value.",23,[[["self"]],["result",["i32"]]]],[10,"read_i16","","Read a i16 value.",23,[[["self"]],["result",["i16"]]]],[10,"read_i8","","Read a i8 value.",23,[[["self"]],["result",["i8"]]]],[10,"read_bool","","Read a bool value.",23,[[["self"]],["result",["bool"]]]],[10,"read_f64","","Read a f64 value.",23,[[["self"]],["result",["f64"]]]],[10,"read_f32","","Read a f32 value.",23,[[["self"]],["result",["f32"]]]],[10,"read_char","","Read a char value.",23,[[["self"]],["result",["char"]]]],[10,"read_str","","Read a string value.",23,[[["self"]],["result",["string"]]]],[10,"read_enum","","Read an enumeration value.",23,[[["self"],["str"],["f"]],["result"]]],[10,"read_enum_variant","","Read an enumeration value.",23,N],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_enum_struct_variant","","Read an enumeration value.",23,N],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",23,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct","","Read an struct value.",23,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_struct_field","","Read a field for a struct value.",23,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple","","Read a tuple value.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_arg","","Read a data item for a tuple.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct","","Read a tuple struct value.",23,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_option","","Read an optional value.",23,[[["self"],["f"]],["result"]]],[10,"read_seq","","Read a sequence of values.",23,[[["self"],["f"]],["result"]]],[10,"read_seq_elt","","Read an element in the sequence.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map","","Read an associative container (map).",23,[[["self"],["f"]],["result"]]],[10,"read_map_elt_key","","Read the key for an entry in a map.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"read_map_elt_val","","Read the value for an entry in a map.",23,[[["self"],["usize"],["f"]],["result"]]],[10,"error","","Record a decoding error.",23,N],[8,"Encoder","","Trait for writing out an encoding when serializing.",N,N],[16,"Error","","The error type for method results.",24,N],[10,"emit_nil","","Emit a nil value.",24,[[["self"]],["result"]]],[10,"emit_usize","","Emit a usize value.",24,[[["self"],["usize"]],["result"]]],[10,"emit_u64","","Emit a u64 value.",24,[[["self"],["u64"]],["result"]]],[10,"emit_u32","","Emit a u32 value.",24,[[["self"],["u32"]],["result"]]],[10,"emit_u16","","Emit a u16 value.",24,[[["self"],["u16"]],["result"]]],[10,"emit_u8","","Emit a u8 value.",24,[[["self"],["u8"]],["result"]]],[10,"emit_isize","","Emit a isize value.",24,[[["self"],["isize"]],["result"]]],[10,"emit_i64","","Emit a i64 value.",24,[[["self"],["i64"]],["result"]]],[10,"emit_i32","","Emit a i32 value.",24,[[["self"],["i32"]],["result"]]],[10,"emit_i16","","Emit a i16 value.",24,[[["self"],["i16"]],["result"]]],[10,"emit_i8","","Emit a i8 value.",24,[[["self"],["i8"]],["result"]]],[10,"emit_bool","","Emit a bool value.",24,[[["self"],["bool"]],["result"]]],[10,"emit_f64","","Emit a f64 value.",24,[[["self"],["f64"]],["result"]]],[10,"emit_f32","","Emit a f32 value.",24,[[["self"],["f32"]],["result"]]],[10,"emit_char","","Emit a char value.",24,[[["self"],["char"]],["result"]]],[10,"emit_str","","Emit a string value.",24,[[["self"],["str"]],["result"]]],[10,"emit_enum","","Emit an enumeration value.",24,[[["self"],["str"],["f"]],["result"]]],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",24,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",24,[[["self"],["str"],["usize"],["usize"],["f"]],["result"]]],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",24,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct","","Emit a struct value.",24,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_struct_field","","Emit a field item for a struct.",24,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple","","Emit a tuple value.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_arg","","Emit a data item for a tuple.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct","","Emit a tuple struct value.",24,[[["self"],["str"],["usize"],["f"]],["result"]]],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_option","","Emit an optional value.",24,[[["self"],["f"]],["result"]]],[10,"emit_option_none","","Emit the `None` optional value.",24,[[["self"]],["result"]]],[10,"emit_option_some","","Emit the `Some(x)` optional value.",24,[[["self"],["f"]],["result"]]],[10,"emit_seq","","Emit a sequence of values.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_seq_elt","","Emit an element in a sequence.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map","","Emit an associative container (map).",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",24,[[["self"],["usize"],["f"]],["result"]]],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",24,[[["self"],["usize"],["f"]],["result"]]],[8,"Decodable","","Trait for deserializing a type.",N,N],[10,"decode","","Deserialize a value using a `Decoder`.",25,[[["d"]],["result"]]],[8,"Encodable","","Trait for serializing a type.",N,N],[10,"encode","","Serialize a value using an `Encoder`.",26,[[["self"],["s"]],["result"]]],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",N,N],[10,"read_to_vec","","Read a sequence into a vector.",27,[[["self"],["f"]],["result",["vec"]]]],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",N,N],[10,"emit_from_vec","","Emit a vector as a sequence.",28,N],[11,"from","rustc_serialize::base64","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","rustc_serialize::hex","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","rustc_serialize::json","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"emit_nil","","",17,[[["self"]],["encoderesult"]]],[11,"emit_usize","","",17,[[["self"],["usize"]],["encoderesult"]]],[11,"emit_u64","","",17,[[["self"],["u64"]],["encoderesult"]]],[11,"emit_u32","","",17,[[["self"],["u32"]],["encoderesult"]]],[11,"emit_u16","","",17,[[["self"],["u16"]],["encoderesult"]]],[11,"emit_u8","","",17,[[["self"],["u8"]],["encoderesult"]]],[11,"emit_isize","","",17,[[["self"],["isize"]],["encoderesult"]]],[11,"emit_i64","","",17,[[["self"],["i64"]],["encoderesult"]]],[11,"emit_i32","","",17,[[["self"],["i32"]],["encoderesult"]]],[11,"emit_i16","","",17,[[["self"],["i16"]],["encoderesult"]]],[11,"emit_i8","","",17,[[["self"],["i8"]],["encoderesult"]]],[11,"emit_bool","","",17,[[["self"],["bool"]],["encoderesult"]]],[11,"emit_f64","","",17,[[["self"],["f64"]],["encoderesult"]]],[11,"emit_f32","","",17,[[["self"],["f32"]],["encoderesult"]]],[11,"emit_char","","",17,[[["self"],["char"]],["encoderesult"]]],[11,"emit_str","","",17,[[["self"],["str"]],["encoderesult"]]],[11,"emit_enum","","",17,[[["self"],["str"],["f"]],["encoderesult"]]],[11,"emit_enum_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_variant_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant","","",17,[[["self"],["str"],["usize"],["usize"],["f"]],["encoderesult"]]],[11,"emit_enum_struct_variant_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_struct_field","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct","","",17,[[["self"],["str"],["usize"],["f"]],["encoderesult"]]],[11,"emit_tuple_struct_arg","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_option","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_option_none","","",17,[[["self"]],["encoderesult"]]],[11,"emit_option_some","","",17,[[["self"],["f"]],["encoderesult"]]],[11,"emit_seq","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_seq_elt","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_key","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"emit_map_elt_val","","",17,[[["self"],["usize"],["f"]],["encoderesult"]]],[11,"read_nil","","",21,[[["self"]],["decoderesult"]]],[11,"read_usize","","",21,[[["self"]],["decoderesult",["usize"]]]],[11,"read_u8","","",21,[[["self"]],["decoderesult",["u8"]]]],[11,"read_u16","","",21,[[["self"]],["decoderesult",["u16"]]]],[11,"read_u32","","",21,[[["self"]],["decoderesult",["u32"]]]],[11,"read_u64","","",21,[[["self"]],["decoderesult",["u64"]]]],[11,"read_isize","","",21,[[["self"]],["decoderesult",["isize"]]]],[11,"read_i8","","",21,[[["self"]],["decoderesult",["i8"]]]],[11,"read_i16","","",21,[[["self"]],["decoderesult",["i16"]]]],[11,"read_i32","","",21,[[["self"]],["decoderesult",["i32"]]]],[11,"read_i64","","",21,[[["self"]],["decoderesult",["i64"]]]],[11,"read_f32","","",21,[[["self"]],["decoderesult",["f32"]]]],[11,"read_f64","","",21,[[["self"]],["decoderesult",["f64"]]]],[11,"read_bool","","",21,[[["self"]],["decoderesult",["bool"]]]],[11,"read_char","","",21,[[["self"]],["decoderesult",["char"]]]],[11,"read_str","","",21,[[["self"]],["decoderesult",["string"]]]],[11,"read_enum","","",21,[[["self"],["str"],["f"]],["decoderesult"]]],[11,"read_enum_variant","","",21,N],[11,"read_enum_variant_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_enum_struct_variant","","",21,N],[11,"read_enum_struct_variant_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_struct_field","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct","","",21,[[["self"],["str"],["usize"],["f"]],["decoderesult"]]],[11,"read_tuple_struct_arg","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_option","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_seq_elt","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map","","",21,[[["self"],["f"]],["decoderesult"]]],[11,"read_map_elt_key","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"read_map_elt_val","","",21,[[["self"],["usize"],["f"]],["decoderesult"]]],[11,"error","","",21,[[["self"],["str"]],["decodererror"]]],[11,"encode","","",9,[[["self"],["s"]],["result"]]],[11,"to_json","","",9,[[["self"]],["json"]]],[11,"clone","rustc_serialize::base64","",1,[[["self"]],["characterset"]]],[11,"clone","","",2,[[["self"]],["newline"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"clone","","",3,[[["self"]],["frombase64error"]]],[11,"clone","rustc_serialize::hex","",6,[[["self"]],["fromhexerror"]]],[11,"clone","rustc_serialize::json","",9,[[["self"]],["json"]]],[11,"clone","","",10,[[["self"]],["errorcode"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"clone","","",15,[[["self"]],["stackelement"]]],[11,"from","","",12,[[["parsererror"]],["decodererror"]]],[11,"from","","",11,[[["error"]],["parsererror"]]],[11,"from","","",13,[[["error"]],["encodererror"]]],[11,"next","","",19,[[["self"]],["option",["jsonevent"]]]],[11,"partial_cmp","","",9,[[["self"],["json"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["json"]],["bool"]]],[11,"le","","",9,[[["self"],["json"]],["bool"]]],[11,"gt","","",9,[[["self"],["json"]],["bool"]]],[11,"ge","","",9,[[["self"],["json"]],["bool"]]],[11,"eq","","",9,[[["self"],["json"]],["bool"]]],[11,"ne","","",9,[[["self"],["json"]],["bool"]]],[11,"eq","","",10,[[["self"],["errorcode"]],["bool"]]],[11,"eq","","",11,[[["self"],["parsererror"]],["bool"]]],[11,"eq","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"ne","","",12,[[["self"],["decodererror"]],["bool"]]],[11,"eq","","",13,[[["self"],["encodererror"]],["bool"]]],[11,"eq","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"ne","","",14,[[["self"],["jsonevent"]],["bool"]]],[11,"eq","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"ne","","",15,[[["self"],["stackelement"]],["bool"]]],[11,"fmt","rustc_serialize::base64","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustc_serialize::hex","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustc_serialize::json","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Encodes a json value into a string",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustc_serialize::base64","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustc_serialize::hex","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustc_serialize::json","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["json","parsererror"]]]],[11,"index","","",9,[[["self"],["str"]],["json"]]],[11,"index","","",9,[[["self"],["usize"]],["json"]]],[11,"description","rustc_serialize::base64","",3,[[["self"]],["str"]]],[11,"description","rustc_serialize::hex","",6,[[["self"]],["str"]]],[11,"description","rustc_serialize::json","",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],["option",["stderror"]]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"description","","",13,[[["self"]],["str"]]]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"],[3,"PrettyJson"],[3,"AsJson"]]};
searchIndex["serde"]={"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",N,N],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",N,N],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",N,N],[3,"Bytes","","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",N,N],[11,"new","","Construct a new, empty `ByteBuf`.",0,[[],["self"]]],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,[[["usize"]],["self"]]],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,[[["t"]],["self"]]],[11,"new","","Wrap an existing `&[u8]`.",1,N],[0,"de","serde","Generic deserialization framework.",N,N],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by `Error::invalid_type`.",N,N],[13,"Bool","","Represents a `bool` type.",2,N],[13,"Usize","","Represents a `usize` type.",2,N],[13,"U8","","Represents a `u8` type.",2,N],[13,"U16","","Represents a `u16` type.",2,N],[13,"U32","","Represents a `u32` type.",2,N],[13,"U64","","Represents a `u64` type.",2,N],[13,"Isize","","Represents a `isize` type.",2,N],[13,"I8","","Represents a `i8` type.",2,N],[13,"I16","","Represents a `i16` type.",2,N],[13,"I32","","Represents a `i32` type.",2,N],[13,"I64","","Represents a `i64` type.",2,N],[13,"F32","","Represents a `f32` type.",2,N],[13,"F64","","Represents a `f64` type.",2,N],[13,"Char","","Represents a `char` type.",2,N],[13,"Str","","Represents a `&str` type.",2,N],[13,"String","","Represents a `String` type.",2,N],[13,"Unit","","Represents a `()` type.",2,N],[13,"Option","","Represents an `Option<T>` type.",2,N],[13,"Seq","","Represents a sequence type.",2,N],[13,"Map","","Represents a map type.",2,N],[13,"UnitStruct","","Represents a unit struct type.",2,N],[13,"NewtypeStruct","","Represents a newtype type.",2,N],[13,"TupleStruct","","Represents a tuple struct type.",2,N],[13,"Struct","","Represents a struct type.",2,N],[13,"FieldName","","Represents a struct field name.",2,N],[13,"Tuple","","Represents a tuple type.",2,N],[13,"Enum","","Represents an `enum` type.",2,N],[13,"VariantName","","Represents an enum variant name.",2,N],[13,"StructVariant","","Represents a struct variant.",2,N],[13,"TupleVariant","","Represents a tuple variant.",2,N],[13,"UnitVariant","","Represents a unit variant.",2,N],[13,"Bytes","","Represents a `&[u8]` type.",2,N],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",N,N],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",N,N],[3,"BoolVisitor","","A visitor that produces a `bool`.",N,N],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",N,N],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",N,N],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",N,N],[3,"LinkedListVisitor","","A visitor that produces a sequence.",N,N],[3,"HashSetVisitor","","A visitor that produces a sequence.",N,N],[3,"VecVisitor","","A visitor that produces a sequence.",N,N],[3,"VecDequeVisitor","","A visitor that produces a sequence.",N,N],[3,"TupleVisitor1","","Construct a tuple visitor.",N,N],[3,"TupleVisitor2","","Construct a tuple visitor.",N,N],[3,"TupleVisitor3","","Construct a tuple visitor.",N,N],[3,"TupleVisitor4","","Construct a tuple visitor.",N,N],[3,"TupleVisitor5","","Construct a tuple visitor.",N,N],[3,"TupleVisitor6","","Construct a tuple visitor.",N,N],[3,"TupleVisitor7","","Construct a tuple visitor.",N,N],[3,"TupleVisitor8","","Construct a tuple visitor.",N,N],[3,"TupleVisitor9","","Construct a tuple visitor.",N,N],[3,"TupleVisitor10","","Construct a tuple visitor.",N,N],[3,"TupleVisitor11","","Construct a tuple visitor.",N,N],[3,"TupleVisitor12","","Construct a tuple visitor.",N,N],[3,"TupleVisitor13","","Construct a tuple visitor.",N,N],[3,"TupleVisitor14","","Construct a tuple visitor.",N,N],[3,"TupleVisitor15","","Construct a tuple visitor.",N,N],[3,"TupleVisitor16","","Construct a tuple visitor.",N,N],[3,"BTreeMapVisitor","","A visitor that produces a map.",N,N],[3,"HashMapVisitor","","A visitor that produces a map.",N,N],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements Deserialize and silently eats data given to it.",N,N],[11,"new","","Construct a new sequence visitor.",3,[[],["self"]]],[11,"new","","Construct a new sequence visitor.",4,[[],["self"]]],[11,"new","","Construct a new sequence visitor.",5,[[],["self"]]],[11,"new","","Construct a new sequence visitor.",6,[[],["self"]]],[11,"new","","Construct a new sequence visitor.",7,[[],["self"]]],[11,"new","","Construct a new sequence visitor.",8,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",9,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",10,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",11,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",12,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",13,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",14,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",15,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",16,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",17,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",18,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",19,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",20,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",21,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",22,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",23,[[],["self"]]],[11,"new","","Construct a `TupleVisitor*<T>`.",24,[[],["self"]]],[11,"new","","Construct a `MapVisitor*<T>`.",25,[[],["self"]]],[11,"new","","Construct a `MapVisitor*<T>`.",26,[[],["self"]]],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",N,N],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",N,N],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",N,N],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",N,N],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",N,N],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",N,N],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",N,N],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",N,N],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",N,N],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",N,N],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",N,N],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",N,N],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",N,N],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",N,N],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",N,N],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",N,N],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",N,N],[13,"Custom","","The value had some custom error.",27,N],[13,"InvalidType","","The value had an incorrect type.",27,N],[13,"InvalidLength","","The value had an invalid length.",27,N],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",27,N],[13,"EndOfStream","","EOF while deserializing a value.",27,N],[13,"UnknownVariant","","Unknown variant in enum.",27,N],[13,"UnknownField","","Unknown field in struct.",27,N],[13,"MissingField","","Struct is missing a field.",27,N],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",N,N],[16,"Deserializer","","The actual deserializer type.",28,N],[10,"into_deserializer","","Convert this value into a deserializer.",28,N],[11,"new","","Construct a new `SeqDeserializer<I>`.",29,[[["i"],["usize"]],["self"]]],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",30,[[["v_"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>` with a specific length.",31,[[["i"],["usize"]],["self"]]],[11,"unbounded","","Construct a new `MapDeserializer<I, K, V, E>` that is not bounded by a specific length and that delegates to `iter` for its size hint.",31,[[["i"]],["self"]]],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",32,[[["v_"]],["self"]]],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a `Deserializer` error.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",33,[[["t"]],["self"]]],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",33,[[],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",33,[[["type"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",33,[[["str"]],["self"]]],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",33,[[["usize"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",33,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",33,[[["str"]],["self"]]],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",33,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same struct field.",33,[[["str"]],["self"]]],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",N,N],[10,"deserialize","","Deserialize this value given this `Deserializer`.",34,[[["d"]],["result"]]],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a value. It supports two entry point styles which enables different kinds of deserialization.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value. A reasonable default is to forward to `deserialize_u64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value. A reasonable default is to forward to `deserialize_u64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value. A reasonable default is to forward to `deserialize_u64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value. A reasonable default is to forward to `deserialize_u64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value. A reasonable default is to forward to `deserialize_i64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value. A reasonable default is to forward to `deserialize_i64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value. A reasonable default is to forward to `deserialize_i64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value. A reasonable default is to forward to `deserialize_i64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value. A reasonable default is to forward to `deserialize_f64`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows deserializers that encode an optional value as a nullable value to convert the null value into a `None`, and a regular value as `Some(value)`.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows deserializers to parse sequences that aren't tagged as sequences.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows deserializers to parse arrays that aren't tagged as arrays.",35,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows deserializers that provide a custom byte vector serialization to properly deserialize the type.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows deserializers to parse sequences that aren't tagged as maps.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows deserializers to a unit struct that aren't tagged as a unit struct.",35,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows deserializers to a newtype struct that aren't tagged as a newtype struct. A reasonable default is to simply deserialize the expected value directly.",35,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows deserializers to parse sequences that aren't tagged as sequences.",35,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows deserializers to parse sequences that aren't tagged as maps.",35,N],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field name.  This allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a struct field.",35,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows deserializers that provide a custom tuple serialization to properly deserialize the type.",35,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows deserializers that provide a custom enumeration serialization to properly deserialize the type.",35,N],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",35,[[["self"],["v"]],["result"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",36,N],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",36,[[["self"],["bool"]],["result"]]],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",36,[[["self"],["isize"]],["result"]]],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",36,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",36,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",36,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",36,[[["self"],["i64"]],["result"]]],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",36,[[["self"],["usize"]],["result"]]],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",36,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",36,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",36,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",36,[[["self"],["u64"]],["result"]]],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",36,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",36,[[["self"],["f64"]],["result"]]],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",36,[[["self"],["char"]],["result"]]],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",36,[[["self"],["str"]],["result"]]],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid a copy if it is deserializing a string from a `String` type.  By default it passes a `&str` to the `visit_str` method.",36,[[["self"],["string"]],["result"]]],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",36,[[["self"]],["result"]]],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",36,[[["self"],["str"]],["result"]]],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",36,[[["self"]],["result"]]],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",36,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",36,[[["self"],["d"]],["result"]]],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",36,[[["self"],["v"]],["result"]]],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",36,[[["self"],["v"]],["result"]]],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",36,N],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",36,[[["self"],["vec",["u8"]]],["result"]]],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",37,[[["self"]],["result",["option"]]]],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",37,[[["self"]],["result"]]],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",37,N],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",38,N],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",38,[[["self"]],["result",["option"]]]],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining items.",38,[[["self"]],["result",["option"]]]],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",38,[[["self"]],["result"]]],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",38,[[["self"]],["result"]]],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",38,N],[11,"missing_field","","Report that the struct has a field that wasn't deserialized",38,[[["self"],["str"]],["result"]]],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the `Deserializer` in order to deserialize enums.",N,N],[16,"Value","","The value produced by this visitor.",39,N],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",39,[[["self"],["v"]],["result"]]],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to deserialize a specific enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",40,N],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",40,[[["self"]],["result"]]],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",40,[[["self"]],["result"]]],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. A good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",40,[[["self"]],["result"]]],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant. If no tuple variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",40,[[["self"],["usize"],["v"]],["result"]]],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant. If no struct variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",40,N],[0,"iter","serde","Module that contains helper iterators.",N,N],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",N,N],[11,"new","","Construct a new `LineColIterator<Iter>`.",41,[[["iter"]],["linecoliterator"]]],[11,"line","","Report the current line inside the iterator.",41,[[["self"]],["usize"]]],[11,"col","","Report the current column inside the iterator.",41,[[["self"]],["usize"]]],[11,"get_ref","","Gets a reference to the underlying iterator.",41,[[["self"]],["iter"]]],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",41,[[["self"]],["iter"]]],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",41,[[["self"]],["iter"]]],[11,"peek","","peeks at the next value",41,[[["self"]],["option",["result"]]]],[0,"ser","serde","Generic serialization framework. # For Developers who want to serialize objects Implement the `Serialize` trait for the type of objects you want to serialize. Call methods of the `serializer` object. For which methods to call and how to do so, look at the documentation of the `Serializer` trait.",N,N],[0,"impls","serde::ser","Implementations for all of Rust's builtin types. Tuples implement the `Serialize` trait if they have at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less. You can always forward array serialization to slice serialization, which works for any length. Long tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In that case the number of fields is irrelevant.",N,N],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a `Serializer` error.",N,N],[10,"custom","","Raised when there is a general error when serializing a type.",42,[[["t"]],["self"]]],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",42,[[["str"]],["self"]]],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",N,N],[10,"serialize","","Serializes this value into this serializer.",43,[[["self"],["s"]],["result"]]],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",N,N],[16,"Error","","The error type that can be returned if some error occurs during serialization.",44,N],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to `serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no state is required.",44,N],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to `serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()` if no state is required.",44,N],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed to `serialize_tuple_struct_elt`, and consumed by `serialize_tuple_struct_end`. Use `()` if no state is required.",44,N],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed to `serialize_tuple_variant_elt`, and consumed by `serialize_tuple_variant_end`. Use `()` if no state is required.",44,N],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to `serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no state is required.",44,N],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to `serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()` if no state is required.",44,N],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed to `serialize_struct_variant_elt`, and consumed by `serialize_struct_variant_end`. Use `()` if no state is required.",44,N],[10,"serialize_bool","","Serializes a `bool` value.",44,[[["self"],["bool"]],["result"]]],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate between `isize` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",44,[[["self"],["isize"]],["result"]]],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between `i8` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",44,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between `i16` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",44,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between `i32` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",44,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serializes an `i64` value.",44,[[["self"],["i64"]],["result"]]],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between `usize` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",44,[[["self"],["usize"]],["result"]]],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between `u8` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",44,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between `u16` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",44,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between `u32` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",44,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","`Serializes a`u64` value.",44,[[["self"],["u64"]],["result"]]],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between `f32` and `f64`, a reasonable implementation would be to cast the value to `f64` and forward to `serialize_f64`.",44,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serializes an `f64` value.",44,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serializes a character. If the format does not support characters, it is reasonable to serialize it as a single element `str` or a `u32`.",44,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serializes a `&str`.",44,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more efficiently than other types of slices. If no efficient implementation is available, a reasonable implementation would be to forward to `serialize_seq`. If forwarded, the implementation looks usually just like this: `rust let mut state = try!(self.serialize_seq(value)); for b in value { try!(self.serialize_seq_elt(&mut state, b)); } self.serialize_seq_end(state)`",44,N],[10,"serialize_unit","","Serializes a `()` value. It's reasonable to just not serialize anything.",44,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to forward to `serialize_unit`.",44,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments. A reasonable implementation would be to forward to `serialize_unit`.",44,[[["self"],["str"],["usize"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype struct, to be more efficiently serialized than a tuple struct with multiple items. A reasonable implementation would be to forward to `serialize_tuple_struct` or to just serialize the inner value without wrapping.",44,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized than a variant with multiple items. A reasonable implementation would be to forward to `serialize_tuple_variant`.",44,[[["self"],["str"],["usize"],["str"],["t"]],["result"]]],[10,"serialize_none","","Serializes a `None` value.",44,[[["self"]],["result"]]],[10,"serialize_some","","Serializes a `Some(...)` value.",44,[[["self"],["t"]],["result"]]],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",44,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called `serialize_seq`.",44,N],[10,"serialize_seq_end","","Finishes serializing a sequence.",44,N],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at deserialization time. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable implementation would be to forward to `serialize_seq`.",44,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more calls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A reasonable implementation would be to forward to `serialize_seq`.",44,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called `serialize_tuple`.",44,N],[10,"serialize_tuple_end","","Finishes serializing a tuple.",44,N],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero or more calls to `serialize_tuple_struct_elt`, then a call to `serialize_tuple_struct_end`. A reasonable implementation would be to forward to `serialize_tuple`.",44,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called `serialize_tuple_struct`.",44,N],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",44,N],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero or more calls to `serialize_tuple_variant_elt`, then a call to `serialize_tuple_variant_end`. A reasonable implementation would be to forward to `serialize_tuple_struct`.",44,[[["self"],["str"],["usize"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called `serialize_tuple_variant`.",44,N],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",44,N],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more calls to `serialize_map_key` and `serialize_map_value`, then a call to `serialize_map_end`.",44,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",44,N],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",44,N],[10,"serialize_map_end","","Finishes serializing a map.",44,N],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more calls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",44,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called `serialize_struct`.",44,N],[10,"serialize_struct_end","","Finishes serializing a struct.",44,N],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero or more calls to `serialize_struct_variant_elt`, then a call to `serialize_struct_variant_end`.",44,[[["self"],["str"],["usize"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called `serialize_struct_variant`.",44,N],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",44,N],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`. Every given method ignores all arguments and forwards to `deserialize`. Note that `deserialize_enum` simply returns an `Error::invalid_type`; a better approach is tracked in [serde-rs/serde#521][1].",N,N],[11,"from","serde::bytes","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","serde::de","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","serde::de::impls","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","serde::de::value","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","serde::iter","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into_deserializer","serde::bytes","",1,[[["self"]],["bytesdeserializer"]]],[11,"into_deserializer","","",0,N],[11,"custom","serde::de::value","",27,[[["t"]],["self"]]],[11,"end_of_stream","","",27,[[],["self"]]],[11,"invalid_type","","",27,[[["type"]],["self"]]],[11,"invalid_value","","",27,[[["str"]],["self"]]],[11,"invalid_length","","",27,[[["usize"]],["self"]]],[11,"unknown_variant","","",27,[[["str"]],["self"]]],[11,"unknown_field","","",27,[[["str"]],["self"]]],[11,"missing_field","","",27,[[["str"]],["self"]]],[11,"deserialize","serde::bytes","",0,[[["d"]],["result",["bytebuf"]]]],[11,"deserialize","serde::de::impls","",49,[[["d"]],["result",["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",50,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",50,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",50,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",50,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",50,N],[11,"deserialize_struct_field","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",50,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",50,N],[11,"deserialize_ignored_any","","",50,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",50,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",50,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",51,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",51,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",51,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",51,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",51,N],[11,"deserialize_struct_field","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",51,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",51,N],[11,"deserialize_ignored_any","","",51,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",51,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",52,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",52,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",52,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",52,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",52,N],[11,"deserialize_struct_field","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",52,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",52,N],[11,"deserialize_ignored_any","","",52,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",52,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",53,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",53,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",53,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",53,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",53,N],[11,"deserialize_struct_field","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",53,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",53,N],[11,"deserialize_ignored_any","","",53,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",53,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",54,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",54,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",54,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",54,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",54,N],[11,"deserialize_struct_field","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",54,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",54,N],[11,"deserialize_ignored_any","","",54,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",54,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",55,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",55,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",55,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",55,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",55,N],[11,"deserialize_struct_field","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",55,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",55,N],[11,"deserialize_ignored_any","","",55,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",55,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",56,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",56,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",56,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",56,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",56,N],[11,"deserialize_struct_field","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",56,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",56,N],[11,"deserialize_ignored_any","","",56,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",56,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",57,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",57,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",57,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",57,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",57,N],[11,"deserialize_struct_field","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",57,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",57,N],[11,"deserialize_ignored_any","","",57,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",57,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",58,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",58,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",58,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",58,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",58,N],[11,"deserialize_struct_field","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",58,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",58,N],[11,"deserialize_ignored_any","","",58,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",58,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",59,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",59,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",59,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",59,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",59,N],[11,"deserialize_struct_field","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",59,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",59,N],[11,"deserialize_ignored_any","","",59,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",59,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",60,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",60,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",60,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",60,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",60,N],[11,"deserialize_struct_field","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",60,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",60,N],[11,"deserialize_ignored_any","","",60,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",60,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",61,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",61,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",61,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",61,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",61,N],[11,"deserialize_struct_field","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",61,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",61,N],[11,"deserialize_ignored_any","","",61,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",61,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",62,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",62,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",62,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",62,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",62,N],[11,"deserialize_struct_field","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",62,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",62,N],[11,"deserialize_ignored_any","","",62,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",62,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",63,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",63,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",63,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",63,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",63,N],[11,"deserialize_struct_field","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",63,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",63,N],[11,"deserialize_ignored_any","","",63,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",63,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",64,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",64,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",64,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",64,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",64,N],[11,"deserialize_struct_field","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",64,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",64,N],[11,"deserialize_ignored_any","","",64,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",64,[[["self"],["v"]],["result"]]],[11,"deserialize","","",65,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",65,N],[11,"deserialize_bool","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",65,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",65,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",65,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",65,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",65,N],[11,"deserialize_struct_field","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",65,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",65,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",66,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",66,N],[11,"deserialize_bool","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",66,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",66,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",66,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",66,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",66,N],[11,"deserialize_struct_field","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",66,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",66,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",67,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",67,N],[11,"deserialize_bool","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",67,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",67,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",67,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",67,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",67,N],[11,"deserialize_struct_field","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",67,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",67,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",29,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",29,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",29,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",29,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",29,N],[11,"deserialize_struct_field","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",29,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",29,N],[11,"deserialize_ignored_any","","",29,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",30,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",30,N],[11,"deserialize_struct_field","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",30,N],[11,"deserialize_ignored_any","","",30,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",31,[[["self"],["v_"]],["result"]]],[11,"deserialize_seq","","",31,[[["self"],["v_"]],["result"]]],[11,"deserialize_seq_fixed_size","","",31,[[["self"],["usize"],["v_"]],["result"]]],[11,"deserialize_bool","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",31,N],[11,"deserialize_struct_field","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",31,N],[11,"deserialize_ignored_any","","",31,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",32,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",32,N],[11,"deserialize_struct_field","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",32,N],[11,"deserialize_ignored_any","","",32,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",68,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",68,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",68,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",68,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",68,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",68,N],[11,"deserialize_struct_field","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",68,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",68,N],[11,"deserialize_ignored_any","","",68,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",69,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_option","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",69,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",69,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_newtype_struct","","",69,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",69,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",69,N],[11,"deserialize_struct_field","","",69,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",69,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_enum","","",69,N],[11,"deserialize_ignored_any","","",69,[[["self"],["__v"]],["result"]]],[11,"visit_unit","serde::bytes","",45,[[["self"]],["result",["bytebuf"]]]],[11,"visit_seq","","",45,[[["self"],["v"]],["result",["bytebuf"]]]],[11,"visit_bytes","","",45,N],[11,"visit_byte_buf","","",45,[[["self"],["vec",["u8"]]],["result",["bytebuf"]]]],[11,"visit_str","","",45,[[["self"],["str"]],["result",["bytebuf"]]]],[11,"visit_string","","",45,[[["self"],["string"]],["result",["bytebuf"]]]],[11,"visit_unit","serde::de::impls","",46,[[["self"]],["result"]]],[11,"visit_seq","","",46,[[["self"],["v"]],["result"]]],[11,"visit_bool","","",47,[[["self"],["bool"]],["result",["bool"]]]],[11,"visit_str","","",47,[[["self"],["str"]],["result",["bool"]]]],[11,"visit_unit","","",48,[[["self"]],["result",["phantomdata"]]]],[11,"visit_unit","","",3,[[["self"]],["result",["binaryheap"]]]],[11,"visit_seq","","",3,[[["self"],["v"]],["result",["binaryheap"]]]],[11,"visit_unit","","",4,[[["self"]],["result",["btreeset"]]]],[11,"visit_seq","","",4,[[["self"],["v"]],["result",["btreeset"]]]],[11,"visit_unit","","",5,[[["self"]],["result",["linkedlist"]]]],[11,"visit_seq","","",5,[[["self"],["v"]],["result",["linkedlist"]]]],[11,"visit_unit","","",6,[[["self"]],["result",["hashset"]]]],[11,"visit_seq","","",6,[[["self"],["v"]],["result",["hashset"]]]],[11,"visit_unit","","",7,[[["self"]],["result",["vec"]]]],[11,"visit_seq","","",7,[[["self"],["v"]],["result",["vec"]]]],[11,"visit_unit","","",8,[[["self"]],["result",["vecdeque"]]]],[11,"visit_seq","","",8,[[["self"],["v"]],["result",["vecdeque"]]]],[11,"visit_seq","","",9,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",10,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",11,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",12,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",13,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",14,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",15,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",16,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",17,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",18,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",19,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",20,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",21,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",22,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",23,[[["self"],["v"]],["result"]]],[11,"visit_seq","","",24,[[["self"],["v"]],["result"]]],[11,"visit_unit","","",25,[[["self"]],["result",["btreemap"]]]],[11,"visit_map","","",25,[[["self"],["visitor"]],["result",["btreemap"]]]],[11,"visit_unit","","",26,[[["self"]],["result",["hashmap"]]]],[11,"visit_map","","",26,[[["self"],["visitor"]],["result",["hashmap"]]]],[11,"visit","serde::de::value","",29,[[["self"]],["result",["option"]]]],[11,"end","","",29,[[["self"]],["result"]]],[11,"size_hint","","",29,N],[11,"visit","","",31,[[["self"]],["result",["option"]]]],[11,"end","","",31,[[["self"]],["result"]]],[11,"size_hint","","",31,N],[11,"visit_key","","",31,[[["self"]],["result",["option"]]]],[11,"visit_value","","",31,[[["self"]],["result"]]],[11,"end","","",31,[[["self"]],["result"]]],[11,"size_hint","","",31,N],[11,"visit_variant","","",65,[[["self"]],["result"]]],[11,"visit_unit","","",65,[[["self"]],["result"]]],[11,"visit_newtype","","",65,[[["self"]],["result"]]],[11,"visit_tuple","","",65,[[["self"],["usize"],["v"]],["result"]]],[11,"visit_struct","","",65,N],[11,"visit_variant","","",66,[[["self"]],["result"]]],[11,"visit_unit","","",66,[[["self"]],["result"]]],[11,"visit_newtype","","",66,[[["self"]],["result"]]],[11,"visit_tuple","","",66,[[["self"],["usize"],["v"]],["result"]]],[11,"visit_struct","","",66,N],[11,"visit_variant","","",67,[[["self"]],["result"]]],[11,"visit_unit","","",67,[[["self"]],["result"]]],[11,"visit_newtype","","",67,[[["self"]],["result"]]],[11,"visit_tuple","","",67,[[["self"],["usize"],["v"]],["result"]]],[11,"visit_struct","","",67,N],[11,"serialize","serde::bytes","",1,[[["self"],["s"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"clone","","",0,[[["self"]],["bytebuf"]]],[11,"clone","serde::de::value","",27,[[["self"]],["error"]]],[11,"clone","serde::de","",2,[[["self"]],["type"]]],[11,"from","serde::bytes","",1,N],[11,"from","","",1,[[["vec"]],["self"]]],[11,"from","","",0,[[["vec",["u8"]]],["self"]]],[11,"into","","",1,N],[11,"into","","",0,[[["self"]],["vec",["u8"]]]],[11,"next","serde::iter","",41,[[["self"]],["option",["result"]]]],[11,"as_ref","serde::bytes","",0,[[["self"]],["vec"]]],[11,"as_ref","","",0,N],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["bytes"]],["bool"]]],[11,"le","","",1,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",1,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["bytebuf"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"le","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"gt","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"ge","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"default","","",0,[[],["bytebuf"]]],[11,"as_mut","","",0,[[["self"]],["vec"]]],[11,"as_mut","","",0,N],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",1,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"eq","serde::de::value","",27,[[["self"],["error"]],["bool"]]],[11,"ne","","",27,[[["self"],["error"]],["bool"]]],[11,"eq","serde::de","",2,[[["self"],["type"]],["bool"]]],[11,"cmp","serde::bytes","",1,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["bytebuf"]],["ordering"]]],[11,"hash","","",1,N],[11,"hash","","",0,N],[11,"fmt","serde::de::value","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde::de","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde::bytes","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de::value","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de","",2,[[["self"],["formatter"]],["result"]]],[11,"deref","serde::bytes","",1,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"description","serde::de::value","",27,[[["self"]],["str"]]],[11,"cause","","",27,[[["self"]],["option",["error"]]]]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Type"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[4,"Error"],[8,"ValueDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[3,"ByteBufVisitor"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"IgnoredAny"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"]]};
searchIndex["serde_json"]={"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",N,N],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",N,N],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",N,N],[11,"new","","Construct an `ObjectBuilder`.",0,[[],["arraybuilder"]]],[11,"build","","Return the constructed `Value`.",0,[[["self"]],["value"]]],[11,"push","","Insert a value into the array.",0,[[["self"],["t"]],["arraybuilder"]]],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"new","","Construct an `ObjectBuilder`.",1,[[],["objectbuilder"]]],[11,"build","","Return the constructed `Value`.",1,[[["self"]],["value"]]],[11,"insert","","Insert a key-value pair into the object.",1,[[["self"],["s"],["v"]],["objectbuilder"]]],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[0,"de","serde_json","JSON Deserialization",N,N],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_iter","","Decodes a json value from an iterator over an iterator `Iterator<Item=io::Result<u8>>`.",N,[[["i"]],["result"]]],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",N,[[["r"]],["result"]]],[5,"from_slice","","Decodes a json value from a byte slice `&[u8]`.",N,N],[5,"from_str","","Decodes a json value from a `&str`.",N,[[["str"]],["result"]]],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,[[["iter"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,[[["self"]],["result"]]],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over `Iterator<Item=io::Result<u8>>`.",3,[[["iter"]],["streamdeserializer"]]],[0,"error","serde_json","JSON Errors",N,N],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",N,N],[13,"Custom","","Catchall for syntax error messages",4,N],[13,"InvalidType","","Incorrect type from value",4,N],[13,"InvalidValue","","Incorrect value",4,N],[13,"InvalidLength","","Invalid length",4,N],[13,"UnknownVariant","","Unknown variant in an enum.",4,N],[13,"UnknownField","","Unknown field in struct.",4,N],[13,"MissingField","","Struct is missing a field.",4,N],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,N],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,N],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,N],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,N],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,N],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,N],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,N],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,N],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,N],[13,"InvalidEscape","","Invalid hex escape code.",4,N],[13,"InvalidNumber","","Invalid number.",4,N],[13,"NumberOutOfRange","","Number is bigger than the maximum value of its type.",4,N],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,N],[13,"KeyMustBeAString","","Object key is not a string.",4,N],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,N],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,N],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,N],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",N,N],[13,"Syntax","","The JSON value had some syntatic error.",5,N],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,N],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",N,N],[0,"ser","serde_json","JSON Serialization",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[5,"escape_str","","Serializes and escapes a `&str` into a JSON string.",N,[[["w"],["str"]],["result"]]],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Encode the specified struct into a json `String` buffer.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[10,"open","","Called when serializing a '{' or '['.",6,[[["self"],["w"],["u8"]],["result"]]],[10,"comma","","Called when serializing a ','.",6,[[["self"],["w"],["bool"]],["result"]]],[10,"colon","","Called when serializing a ':'.",6,[[["self"],["w"]],["result"]]],[10,"close","","Called when serializing a '}' or ']'.",6,[[["self"],["w"],["u8"]],["result"]]],[11,"new","","Creates a new JSON serializer.",7,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",7,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",7,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,[[["self"]],["w"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",8,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",8,N],[0,"value","serde_json","JSON Value",N,N],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",N,N],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",N,N],[4,"Value","","Represents a JSON value",N,N],[13,"Null","","Represents a JSON null value",9,N],[13,"Bool","","Represents a JSON Boolean",9,N],[13,"I64","","Represents a JSON signed integer",9,N],[13,"U64","","Represents a JSON unsigned integer",9,N],[13,"F64","","Represents a JSON floating point number",9,N],[13,"String","","Represents a JSON string",9,N],[13,"Array","","Represents a JSON array",9,N],[13,"Object","","Represents a JSON object",9,N],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",N,[[["t"]],["value"]]],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",N,[[["value"]],["result",["error"]]]],[6,"Map","","Represents a key/value type.",N,N],[6,"MapIntoIter","","Represents the `IntoIter` type.",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",10,[[["self"]],["value"]]],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,[[["self"],["str"]],["option",["value"]]]],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",9,N],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",9,[[["self"],["str"]],["option",["value"]]]],[11,"pointer","","Looks up a value by a JSON Pointer.",9,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",9,[[["self"],["str"]],["option",["value"]]]],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",9,[[["self"],["str"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",9,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",9,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",9,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",9,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",9,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",9,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",9,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",9,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",9,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",9,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",9,[[["self"]],["option"]]],[11,"new","","Construct a new `Serializer`.",11,[[],["serializer"]]],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",11,[[["self"]],["value"]]],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",12,[[["value"]],["deserializer"]]],[11,"from","serde_json::builder","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","serde_json::de","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","serde_json::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","serde_json::ser","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","serde_json::value","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_json","","",9,[[["self"]],["value"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"open","serde_json::ser","",13,[[["self"],["w"],["u8"]],["result"]]],[11,"comma","","",13,[[["self"],["w"],["bool"]],["result"]]],[11,"colon","","",13,[[["self"],["w"]],["result"]]],[11,"close","","",13,[[["self"],["w"],["u8"]],["result"]]],[11,"open","","",8,[[["self"],["w"],["u8"]],["result"]]],[11,"comma","","",8,[[["self"],["w"],["bool"]],["result"]]],[11,"colon","","",8,[[["self"],["w"]],["result"]]],[11,"close","","",8,[[["self"],["w"],["u8"]],["result"]]],[11,"clone","serde_json::error","",4,[[["self"]],["errorcode"]]],[11,"clone","serde_json::ser","",13,[[["self"]],["compactformatter"]]],[11,"clone","","",8,[[["self"]],["prettyformatter"]]],[11,"clone","serde_json::value","",9,[[["self"]],["value"]]],[11,"from","serde_json::error","",5,[[["error"]],["error"]]],[11,"from","","",5,[[["error"]],["error"]]],[11,"next","serde_json::de","",3,[[["self"]],["option",["result"]]]],[11,"default","serde_json::builder","",0,[[],["arraybuilder"]]],[11,"default","","",1,[[],["objectbuilder"]]],[11,"default","serde_json::ser","",8,[[],["self"]]],[11,"default","serde_json::value","",11,[[],["self"]]],[11,"eq","serde_json::error","",4,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorcode"]],["bool"]]],[11,"eq","serde_json::value","",9,[[["self"],["value"]],["bool"]]],[11,"ne","","",9,[[["self"],["value"]],["bool"]]],[11,"fmt","serde_json::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","Serializes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::ser","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","Serializes a json value into a string",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["value","error"]]]],[11,"description","serde_json::error","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"custom","","Raised when there is general error when deserializing a type.",5,[[["t"]],["error"]]],[11,"serialize","serde_json::value","",9,[[["self"],["s"]],["result"]]],[11,"serialize_bool","serde_json::ser","",7,[[["self"],["bool"]],["result"]]],[11,"serialize_isize","","",7,[[["self"],["isize"]],["result"]]],[11,"serialize_i8","","",7,[[["self"],["i8"]],["result"]]],[11,"serialize_i16","","",7,[[["self"],["i16"]],["result"]]],[11,"serialize_i32","","",7,[[["self"],["i32"]],["result"]]],[11,"serialize_i64","","",7,[[["self"],["i64"]],["result"]]],[11,"serialize_usize","","",7,[[["self"],["usize"]],["result"]]],[11,"serialize_u8","","",7,[[["self"],["u8"]],["result"]]],[11,"serialize_u16","","",7,[[["self"],["u16"]],["result"]]],[11,"serialize_u32","","",7,[[["self"],["u32"]],["result"]]],[11,"serialize_u64","","",7,[[["self"],["u64"]],["result"]]],[11,"serialize_f32","","",7,[[["self"],["f32"]],["result"]]],[11,"serialize_f64","","",7,[[["self"],["f64"]],["result"]]],[11,"serialize_char","","",7,[[["self"],["char"]],["result"]]],[11,"serialize_str","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_bytes","","",7,N],[11,"serialize_unit","","",7,[[["self"]],["result"]]],[11,"serialize_unit_struct","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_unit_variant","","",7,[[["self"],["str"],["usize"],["str"]],["result"]]],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,[[["self"],["str"],["t"]],["result"]]],[11,"serialize_newtype_variant","","",7,[[["self"],["str"],["usize"],["str"],["t"]],["result"]]],[11,"serialize_none","","",7,[[["self"]],["result"]]],[11,"serialize_some","","",7,[[["self"],["t"]],["result"]]],[11,"serialize_seq","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_seq_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_seq_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_seq_fixed_size","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_struct_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_variant_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_variant_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_map","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_map_key","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_value","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_variant_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_variant_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_bool","serde_json::value","",11,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_isize","","",11,[[["self"],["isize"]],["result",["error"]]]],[11,"serialize_i8","","",11,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","",11,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","",11,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","",11,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_usize","","",11,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_u8","","",11,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","",11,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","",11,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","",11,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","",11,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","",11,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","",11,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","",11,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_bytes","","",11,N],[11,"serialize_unit","","",11,[[["self"]],["result",["error"]]]],[11,"serialize_unit_struct","","",11,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","",11,[[["self"],["str"],["usize"],["str"]],["result",["error"]]]],[11,"serialize_newtype_struct","","",11,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_newtype_variant","","",11,[[["self"],["str"],["usize"],["str"],["t"]],["result",["error"]]]],[11,"serialize_none","","",11,[[["self"]],["result",["error"]]]],[11,"serialize_some","","",11,[[["self"],["v"]],["result",["error"]]]],[11,"serialize_seq","","",11,[[["self"],["option",["usize"]]],["result",["vec","error"]]]],[11,"serialize_seq_elt","","",11,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_seq_end","","",11,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_seq_fixed_size","","",11,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple","","",11,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_elt","","",11,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_end","","",11,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_struct","","",11,[[["self"],["str"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_struct_elt","","",11,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_struct_end","","",11,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_variant","","",11,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["tuplevariantstate","error"]]]],[11,"serialize_tuple_variant_elt","","",11,[[["self"],["tuplevariantstate"],["t"]],["result",["error"]]]],[11,"serialize_tuple_variant_end","","",11,[[["self"],["tuplevariantstate"]],["result",["error"]]]],[11,"serialize_map","","",11,[[["self"],["option",["usize"]]],["result",["mapstate","error"]]]],[11,"serialize_map_key","","",11,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_value","","",11,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_end","","",11,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct","","",11,[[["self"],["str"],["usize"]],["result",["mapstate","error"]]]],[11,"serialize_struct_elt","","",11,[[["self"],["mapstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_end","","",11,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct_variant","","",11,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["structvariantstate","error"]]]],[11,"serialize_struct_variant_elt","","",11,[[["self"],["structvariantstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_variant_end","","",11,[[["self"],["structvariantstate"]],["result",["error"]]]],[11,"custom","serde_json::error","",5,[[["t"]],["error"]]],[11,"end_of_stream","","",5,[[],["error"]]],[11,"invalid_type","","",5,[[["type"]],["error"]]],[11,"invalid_value","","",5,[[["str"]],["error"]]],[11,"invalid_length","","",5,[[["usize"]],["error"]]],[11,"unknown_variant","","",5,[[["str"]],["error"]]],[11,"unknown_field","","",5,[[["str"]],["error"]]],[11,"missing_field","","",5,[[["str"]],["error"]]],[11,"deserialize","serde_json::de","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,[[["self"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,N],[11,"deserialize_bool","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",2,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_struct_field","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["__v"]],["result"]]],[11,"deserialize","serde_json::value","",12,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",12,N],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",12,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["__v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["__v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_struct_field","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result",["value"]]]]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"],[3,"CompactFormatter"]]};
searchIndex["siphasher"]={"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",N,N],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",N,N],[3,"SipHasher24","","An implementation of SipHash 2-4.",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",0,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",0,[[["u64"],["u64"]],["siphasher"]]],[11,"keys","","Get the keys used by this hasher",0,N],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",1,[[],["siphasher13"]]],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",1,[[["u64"],["u64"]],["siphasher13"]]],[11,"keys","","Get the keys used by this hasher",1,N],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",2,[[],["siphasher24"]]],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",2,[[["u64"],["u64"]],["siphasher24"]]],[11,"keys","","Get the keys used by this hasher",2,N],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",N,N],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",N,N],[12,"h1","","",3,N],[12,"h2","","",3,N],[3,"SipHasher13","","An implementation of SipHash128 1-3.",N,N],[3,"SipHasher24","","An implementation of SipHash128 2-4.",N,N],[3,"SipHasher","","An implementation of SipHash128 2-4.",N,N],[8,"Hasher128","","",N,N],[10,"finish128","","Return a 128-bit hash",4,[[["self"]],["hash128"]]],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",5,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",5,[[["u64"],["u64"]],["siphasher"]]],[11,"keys","","Get the keys used by this hasher",5,N],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",6,[[],["siphasher13"]]],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",6,[[["u64"],["u64"]],["siphasher13"]]],[11,"keys","","Get the keys used by this hasher",6,N],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",7,[[],["siphasher24"]]],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",7,[[["u64"],["u64"]],["siphasher24"]]],[11,"keys","","Get the keys used by this hasher",7,N],[11,"as_bytes","","Convert into a 16-bytes vector",3,N],[11,"try_from","siphasher::sip","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","siphasher::sip128","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"finish128","","Return a 128-bit hash",5,[[["self"]],["hash128"]]],[11,"finish128","","Return a 128-bit hash",6,[[["self"]],["hash128"]]],[11,"finish128","","Return a 128-bit hash",7,[[["self"]],["hash128"]]],[11,"fmt","siphasher::sip","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","siphasher::sip128","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"write","siphasher::sip","",0,N],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",1,N],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"write","","",2,N],[11,"finish","","",2,[[["self"]],["u64"]]],[11,"write","siphasher::sip128","",5,N],[11,"finish","","",5,[[["self"]],["u64"]]],[11,"write","","",6,N],[11,"finish","","",6,[[["self"]],["u64"]]],[11,"write","","",7,N],[11,"finish","","",7,[[["self"]],["u64"]]],[11,"clone","siphasher::sip","",1,[[["self"]],["siphasher13"]]],[11,"clone","","",2,[[["self"]],["siphasher24"]]],[11,"clone","","",0,[[["self"]],["siphasher"]]],[11,"clone","siphasher::sip128","",3,[[["self"]],["hash128"]]],[11,"clone","","",6,[[["self"]],["siphasher13"]]],[11,"clone","","",7,[[["self"]],["siphasher24"]]],[11,"clone","","",5,[[["self"]],["siphasher"]]],[11,"default","siphasher::sip","",1,[[],["siphasher13"]]],[11,"default","","",2,[[],["siphasher24"]]],[11,"default","","",0,[[],["siphasher"]]],[11,"default","siphasher::sip128","",3,[[],["hash128"]]],[11,"default","","",6,[[],["siphasher13"]]],[11,"default","","",7,[[],["siphasher24"]]],[11,"default","","",5,[[],["siphasher"]]]],"paths":[[3,"SipHasher"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher"],[3,"SipHasher13"],[3,"SipHasher24"]]};
searchIndex["solicit"]={"doc":"","items":[[0,"http","solicit","The module implements the framing layer of HTTP/2 and exposes an API for using it.",N,N],[3,"Response","solicit::http","A struct representing the full raw response received on an HTTP/2 connection.",N,N],[12,"stream_id","","The ID of the stream to which the response is associated. HTTP/1.1 does not really have an equivalent to this.",0,N],[12,"headers","","Exposes all the raw response headers, including the meta-headers. (For now the only meta header allowed in HTTP/2 responses is the `:status`.)",0,N],[12,"body","","The full body of the response as an uninterpreted sequence of bytes.",0,N],[3,"Request","","A struct representing a full HTTP/2 request, along with the full body, as a sequence of bytes.",N,N],[12,"stream_id","","",1,N],[12,"headers","","",1,N],[12,"body","","",1,N],[4,"HttpError","","An enum representing errors that can arise when performing operations involving an HTTP/2 connection.",N,N],[13,"IoError","","",2,N],[13,"InvalidFrame","","",2,N],[13,"CompressionError","","",2,N],[13,"UnknownStreamId","","",2,N],[13,"UnableToConnect","","",2,N],[13,"MalformedResponse","","",2,N],[13,"Other","","",2,N],[4,"HttpScheme","","An enum representing the two possible HTTP schemes.",N,N],[13,"Http","","The variant corresponding to `http://`",3,N],[13,"Https","","The variant corresponding to `https://`",3,N],[0,"frame","","The module contains the implementation of HTTP/2 frames.",N,N],[3,"RawFrame","solicit::http::frame","A struct that defines the format of the raw HTTP/2 frame, i.e. the frame as it is read from the wire.",N,N],[5,"unpack_header","","Deconstructs a `FrameHeader` into its corresponding 4 components, represented as a 4-tuple: `(length, frame_type, flags, stream_id)`.",N,[[["frameheaderbuffer"]],["frameheader"]]],[5,"pack_header","","Constructs a buffer of 9 bytes that represents the given `FrameHeader`.",N,[[["frameheader"]],["frameheaderbuffer"]]],[0,"data","","The module contains the implementation of the `DATA` frame and associated flags.",N,N],[3,"DataFrame","solicit::http::frame::data","A struct representing the DATA frames of HTTP/2, as defined in the HTTP/2 spec, section 6.1.",N,N],[12,"data","","The data found in the frame as an opaque byte sequence. It never includes padding bytes.",4,N],[4,"DataFlag","","An enum representing the flags that a `DataFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"EndStream","","",5,N],[13,"Padded","","",5,N],[11,"new","","Creates a new empty `DataFrame`, associated to the stream with the given ID.",4,[[["streamid"]],["dataframe"]]],[11,"is_padded","","Returns `true` if the DATA frame is padded, otherwise false.",4,[[["self"]],["bool"]]],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",4,[[["self"]],["bool"]]],[11,"set_padding","","Sets the number of bytes that should be used as padding for this frame.",4,[[["self"],["u8"]]]],[0,"headers","solicit::http::frame","The module contains the implementation of the `HEADERS` frame and associated flags.",N,N],[3,"StreamDependency","solicit::http::frame::headers","The struct represents the dependency information that can be attached to a stream and sent within a HEADERS frame (one with the Priority flag set).",N,N],[12,"stream_id","","The ID of the stream that a particular stream depends on",6,N],[12,"weight","","The weight for the stream. The value exposed (and set) here is always in the range [0, 255], instead of [1, 256] (as defined in section 5.3.2.) so that the value fits into a `u8`.",6,N],[12,"is_exclusive","","A flag indicating whether the stream dependency is exclusive.",6,N],[3,"HeadersFrame","","A struct representing the HEADERS frames of HTTP/2, as defined in the HTTP/2 spec, section 6.2.",N,N],[12,"header_fragment","","The header fragment bytes stored within the frame.",7,N],[12,"stream_id","","The ID of the stream with which this frame is associated",7,N],[12,"stream_dep","","The stream dependency information, if any.",7,N],[12,"padding_len","","The length of the padding, if any.",7,N],[4,"HeadersFlag","","An enum representing the flags that a `HeadersFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"EndStream","","",8,N],[13,"EndHeaders","","",8,N],[13,"Padded","","",8,N],[13,"Priority","","",8,N],[11,"new","","Creates a new `StreamDependency` with the given stream ID, weight, and exclusivity.",6,[[["streamid"],["u8"],["bool"]],["streamdependency"]]],[11,"parse","","Parses the first 5 bytes in the buffer as a `StreamDependency`. (Each 5-byte sequence is always decodable into a stream dependency structure).",6,N],[11,"serialize","","Serializes the `StreamDependency` into a 5-byte buffer representing the dependency description, as described in section 6.2. of the HTTP/2 spec:",6,N],[11,"new","","Creates a new `HeadersFrame` with the given header fragment and stream ID. No padding, no stream dependency, and no flags are set.",7,[[["vec",["u8"]],["streamid"]],["headersframe"]]],[11,"with_dependency","","Creates a new `HeadersFrame` with the given header fragment, stream ID and stream dependency information. No padding and no flags are set.",7,[[["vec",["u8"]],["streamid"],["streamdependency"]],["headersframe"]]],[11,"is_headers_end","","Returns whether this frame ends the headers. If not, there MUST be a number of follow up CONTINUATION frames that send the rest of the header data.",7,[[["self"]],["bool"]]],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",7,[[["self"]],["bool"]]],[11,"set_padding","","Sets the padding length for the frame, as well as the corresponding Padded flag.",7,[[["self"],["u8"]]]],[0,"settings","solicit::http::frame","The module contains the implementation of the `SETTINGS` frame and associated flags.",N,N],[3,"SettingsFrame","solicit::http::frame::settings","A struct representing the SETTINGS frames of HTTP/2, as defined in the HTTP/2 spec, section 6.5.",N,N],[12,"settings","","Contains all the settings that are currently set in the frame. It is safe to access this field (to read, add, or remove settings), even though a helper method `add_setting` exists.",9,N],[4,"HttpSetting","","An enum that lists all valid settings that can be sent in a SETTINGS frame.",N,N],[13,"HeaderTableSize","","",10,N],[13,"EnablePush","","",10,N],[13,"MaxConcurrentStreams","","",10,N],[13,"InitialWindowSize","","",10,N],[13,"MaxFrameSize","","",10,N],[13,"MaxHeaderListSize","","",10,N],[4,"SettingsFlag","","An enum representing the flags that a `SettingsFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"Ack","","",11,N],[11,"from_id","","Creates a new `HttpSetting` with the correct variant corresponding to the given setting id, based on the settings IDs defined in section 6.5.2.",10,[[["u16"],["u32"]],["option",["httpsetting"]]]],[11,"get_id","","Returns the setting ID as an unsigned 16 bit integer, as defined in section 6.5.2.",10,[[["self"]],["u16"]]],[11,"get_val","","Gets the setting value by unpacking it from the wrapped `u32`.",10,[[["self"]],["u32"]]],[11,"new","","Creates a new `SettingsFrame`",9,[[],["settingsframe"]]],[11,"new_ack","","A convenience constructor that returns a `SettingsFrame` with the ACK flag already set and no settings.",9,[[],["settingsframe"]]],[11,"add_setting","","Adds the given setting to the frame.",9,[[["self"],["httpsetting"]]]],[11,"set_ack","","Sets the ACK flag for the frame. This method is just a convenience method for calling `frame.set_flag(SettingsFlag::Ack)`.",9,[[["self"]]]],[11,"is_ack","","Checks whether the `SettingsFrame` has an ACK attached to it.",9,[[["self"]],["bool"]]],[6,"FrameHeaderBuffer","solicit::http::frame","An alias for the 9-byte buffer that each HTTP/2 frame header must be stored in.",N,N],[6,"FrameHeader","","An alias for the 4-tuple representing the components of each HTTP/2 frame header.",N,N],[8,"Flag","","A trait that all HTTP/2 frame header flags need to implement.",N,N],[10,"bitmask","","Returns a bit mask that represents the flag.",12,[[["self"]],["u8"]]],[8,"Frame","","A trait that all HTTP/2 frame structs need to implement.",N,N],[16,"FlagType","","The type that represents the flags that the particular `Frame` can take. This makes sure that only valid `Flag`s are used with each `Frame`.",13,N],[10,"from_raw","","Creates a new `Frame` from the given `RawFrame` (i.e. header and payload), if possible.",13,[[["rawframe"]],["option"]]],[10,"is_set","","Tests if the given flag is set for the frame.",13,N],[10,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated",13,[[["self"]],["streamid"]]],[10,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",13,[[["self"]],["frameheader"]]],[10,"set_flag","","Sets the given flag for the frame.",13,N],[10,"serialize","","Returns a `Vec` with the serialized representation of the frame.",13,[[["self"]],["vec",["u8"]]]],[11,"new","","Creates a new `RawFrame` with the given `FrameHeader`. The payload is left empty.",14,[[["frameheader"]],["rawframe"]]],[11,"with_payload","","Creates a new `RawFrame` with the given header and payload. Does not do any validation to determine whether the frame is in a correct state as constructed.",14,[[["frameheader"],["vec",["u8"]]],["rawframe"]]],[11,"from_buf","","Creates a new `RawFrame` by parsing the given buffer.",14,N],[11,"serialize","","Returns a `Vec` of bytes representing the serialized (on-the-wire) representation of this raw frame.",14,[[["self"]],["vec",["u8"]]]],[11,"header","","Returns a `FrameHeader` instance corresponding to the headers of the `RawFrame`.",14,[[["self"]],["frameheader"]]],[11,"payload","","Returns a slice representing the payload of the `RawFrame`.",14,N],[0,"transport","solicit::http","The module contains implementations of the transport layer functionality that HTTP/2 requires. It exposes APIs that allow the HTTP/2 connection to use the transport layer without requiring it to know which exact implementation they are using (e.g. a clear-text TCP connection, a TLS protected connection, or even a mock implementation).",N,N],[8,"TransportStream","solicit::http::transport","A trait that any struct that wants to provide the transport layer for HTTP/2 needs to implement.",N,N],[11,"read_exact","","A convenience method that performs as many `read` calls on the underlying `Read` implementation as it takes to fill the given buffer.",15,N],[10,"try_split","","Attempts to split the `TransportStream` instance into a new independently owned handle to the same underlying stream.",15,[[["self"]],["result",["error"]]]],[10,"close","","Attempts to shutdown both ends of the transport stream.",15,[[["self"]],["result",["error"]]]],[0,"connection","solicit::http","The module contains the implementation of an HTTP/2 connection.",N,N],[3,"HttpConnection","solicit::http::connection","The struct implements the HTTP/2 connection level logic.",N,N],[12,"receiver","","The instance handling the reading of frames.",16,N],[12,"sender","","The instance handling the writing of frames.",16,N],[12,"scheme","","The scheme of the connection",16,N],[3,"DataChunk","","The struct represents a chunk of data that should be sent to the peer on a particular stream.",N,N],[12,"data","","The data that should be sent.",17,N],[12,"stream_id","","The ID of the stream on which the data should be sent.",17,N],[12,"end_stream","","Whether the data chunk will also end the stream.",17,N],[4,"HttpFrame","","An enum representing all frame variants that can be returned by an `HttpConnection`.",N,N],[13,"DataFrame","","",18,N],[13,"HeadersFrame","","",18,N],[13,"SettingsFrame","","",18,N],[13,"UnknownFrame","","",18,N],[4,"SendStatus","","The enum represents the success status of the operation of sending a next data chunk on an HTTP/2 connection.",N,N],[13,"Sent","","Indicates that a DATA frame was successfully sent",19,N],[13,"Nothing","","Indicates that nothing was sent, but that no errors occurred.",19,N],[4,"EndStream","","An enum indicating whether the `HttpConnection` send operation should end the stream.",N,N],[13,"Yes","","The stream should be closed",20,N],[13,"No","","The stream should still be kept open",20,N],[8,"SendFrame","","A trait that should be implemented by types that can provide the functionality of sending HTTP/2 frames.",N,N],[10,"send_raw_frame","","Sends the given raw frame.",21,[[["self"],["rawframe"]],["httpresult"]]],[11,"send_frame","","Sends the given concrete frame.",21,[[["self"],["f"]],["httpresult"]]],[8,"ReceiveFrame","","A trait that should be implemented by types that can provide the functionality of receiving HTTP/2 frames.",N,N],[10,"recv_frame","","Return a new `HttpFrame` instance. Unknown frames can be wrapped in the `HttpFrame::UnknownFrame` variant (i.e. their `RawFrame` representation).",22,[[["self"]],["httpresult",["httpframe"]]]],[11,"from_raw","","",18,[[["rawframe"]],["httpresult",["httpframe"]]]],[11,"new","","Creates a new `DataChunk`.",17,[[["cow"],["streamid"],["endstream"]],["datachunk"]]],[11,"new_borrowed","","Creates a new `DataChunk` from a borrowed slice. This method should become obsolete if we can take an `Into<Cow<_, _>>` without using unstable features.",17,[[["d"],["streamid"],["endstream"]],["datachunk"]]],[11,"new","","Creates a new `HttpConnection` that will use the given sender and receiver instances for writing and reading frames, respectively.",16,[[["s"],["r"],["httpscheme"]],["httpconnection"]]],[11,"with_stream","","Creates a new `HttpConnection` that will use the given stream as its underlying transport layer.",16,[[["ts"],["httpscheme"]],["httpconnection"]]],[11,"send_headers","","A helper function that inserts the frames required to send the given headers onto the `SendFrame` stream.",16,[[["self"],["h"],["streamid"],["endstream"]],["httpresult"]]],[11,"send_data","","A helper function that inserts a frame representing the given data into the `SendFrame` stream.",16,[[["self"],["datachunk"]],["httpresult"]]],[11,"send_next_data","","Sends the chunk of data provided by the given `DataPrioritizer`.",16,[[["self"],["p"]],["httpresult",["sendstatus"]]]],[11,"expect_settings","","The method processes the next incoming frame, expecting it to be a SETTINGS frame. Additionally, the frame cannot be an ACK settings frame, but rather it should contain the peer's settings.",16,[[["self"],["sess"]],["httpresult"]]],[11,"handle_next_frame","","Handles the next frame incoming on the `ReceiveFrame` instance.",16,[[["self"],["sess"]],["httpresult"]]],[0,"session","solicit::http","Defines the interface for the session-level management of HTTP/2 communication. This is effectively an API that allows hooking into an HTTP/2 connection in order to handle events arising on the connection.",N,N],[3,"StreamIter","solicit::http::session","A newtype for an iterator over `Stream`s saved in a `SessionState`.",N,N],[3,"DefaultSessionState","","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`, mapping the stream ID to the concrete `Stream` instance.",N,N],[3,"DefaultStream","","An implementation of the `Stream` trait that saves all headers and data in memory.",N,N],[12,"stream_id","","The ID of the stream",23,N],[12,"headers","","The headers associated with the stream (i.e. the response headers)",23,N],[12,"body","","The body of the stream (i.e. the response body)",23,N],[12,"state","","The current stream state.",23,N],[4,"StreamState","","The enum represents all the states that an HTTP/2 stream can be found in.",N,N],[13,"Idle","","",24,N],[13,"ReservedLocal","","",24,N],[13,"ReservedRemote","","",24,N],[13,"Open","","",24,N],[13,"HalfClosedRemote","","",24,N],[13,"HalfClosedLocal","","",24,N],[13,"Closed","","",24,N],[4,"StreamDataError","","The enum represents errors that can be returned from the `Stream::get_data_chunk` method.",N,N],[13,"Closed","","Indicates that the stream cannot provide any data, since it is closed for further writes from the peer's side.",25,N],[13,"Other","","A different error while trying to obtain the data chunk. Wraps a boxed `Error` impl.",25,N],[4,"StreamDataChunk","","The enum represents the successful completion of the `Stream::get_data_chunk` method.",N,N],[13,"Chunk","","A data chunk of the given size, after which more chunks can follow.",26,N],[13,"Last","","The chunk was the last one that the stream will ever write.",26,N],[13,"Unavailable","","No data currently available, but the stream isn't closed yet",26,N],[8,"Session","","A trait that defines the interface between an `HttpConnection` and the higher-levels that use it. Essentially, it allows the `HttpConnection` to pass information onto those higher levels through a well-defined interface.",N,N],[10,"new_data_chunk","","Notifies the `Session` that a new data chunk has arrived on the connection for a particular stream. Only the raw data is passed to the callback (all padding is already discarded by the connection).",27,N],[10,"new_headers","","Notifies the `Session` that headers have arrived for a particular stream. The given list of headers is already decoded by the connection.",27,[[["self"],["streamid"],["vec",["header"]]]]],[10,"end_of_stream","","Notifies the `Session` that a particular stream got closed by the peer.",27,[[["self"],["streamid"]]]],[8,"SessionState","","A trait defining a set of methods for accessing and influencing an HTTP/2 session's state.",N,N],[16,"Stream","","The type of the `Stream` that the `SessionState` manages.",28,N],[10,"insert_stream","","Inserts the given `Stream` into the session's state, starting to track it.",28,N],[10,"get_stream_ref","","Returns a reference to a `Stream` with the given `StreamId`, if it is found in the current session.",28,[[["self"],["streamid"]],["option"]]],[10,"get_stream_mut","","Returns a mutable reference to a `Stream` with the given `StreamId`, if it is found in the current session.",28,[[["self"],["streamid"]],["option"]]],[10,"remove_stream","","Removes the stream with the given `StreamId` from the session. If the stream was found in the session, it is returned in the result.",28,[[["self"],["streamid"]],["option"]]],[10,"iter","","Returns an iterator over the streams currently found in the session.",28,[[["self"]],["streamiter"]]],[11,"get_closed","","Returns all streams that are closed and tracked by the session state.",28,[[["self"]],["vec"]]],[8,"Stream","","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of streams.",N,N],[10,"new","","Create a new stream with the given ID",29,[[["streamid"]],["self"]]],[10,"new_data_chunk","","Handle a new data chunk that has arrived for the stream.",29,N],[10,"set_headers","","Set headers for a stream. A stream is only allowed to have one set of headers.",29,[[["self"],["vec",["header"]]]]],[10,"set_state","","Sets the stream state to the newly provided state.",29,[[["self"],["streamstate"]]]],[10,"get_data_chunk","","Places the next data chunk that should be written onto the stream into the given buffer.",29,N],[10,"id","","Returns the ID of the stream.",29,[[["self"]],["streamid"]]],[10,"state","","Returns the current state of the stream.",29,[[["self"]],["streamstate"]]],[11,"close","","Transitions the stream state to closed. After this, the stream is considered to be closed for any further reads or writes.",29,[[["self"]]]],[11,"close_local","","Updates the `Stream` status to indicate that it is closed locally.",29,[[["self"]]]],[11,"close_remote","","Updates the `Stream` status to indicate that it is closed on the remote peer's side.",29,[[["self"]]]],[11,"is_closed","","Returns whether the stream is closed.",29,[[["self"]],["bool"]]],[11,"is_closed_local","","Returns whether the stream is closed locally.",29,[[["self"]],["bool"]]],[11,"is_closed_remote","","Returns whether the remote peer has closed the stream. This includes a fully closed stream.",29,[[["self"]],["bool"]]],[11,"new","","Creates a new `DefaultSessionState` with no known streams.",30,[[],["defaultsessionstate"]]],[11,"new","","Create a new `DefaultStream` with the given ID.",23,[[["streamid"]],["defaultstream"]]],[11,"set_full_data","","Sets the outgoing data of the stream to the given `Vec`.",23,[[["self"],["vec",["u8"]]]]],[0,"priority","solicit::http","The module exposes an API for defining data prioritization strategies.",N,N],[3,"SimplePrioritizer","solicit::http::priority","An implementation of the `DataPrioritizer` trait that is based on finding the first stream from the given `SessionState` instance that can send data and returning this chunk.",N,N],[8,"DataPrioritizer","","A trait that types that want to provide data to an HTTP/2 connection need to implement.",N,N],[10,"get_next_chunk","","Returns the next `DataChunk` that should be sent on the HTTP/2 connection. `None` indicates that currently there was no data that could be sent at that point.",31,[[["self"]],["httpresult",["option"]]]],[11,"new","","Creates a new `SimplePrioritizer` that will use the given state to find stream data that should be sent and use the given buffer to hold the data of the returned chunk.",32,N],[0,"client","solicit::http","The module contains a number of reusable components for implementing the client side of an HTTP/2 connection.",N,N],[3,"ClientStream","solicit::http::client","A convenience wrapper type that represents an established client network transport stream. It wraps the stream itself, the scheme of the protocol to be used, and the remote host name.",N,N],[12,"0","","",33,N],[12,"1","","",33,N],[12,"2","","",33,N],[3,"CleartextConnector","","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2 connection. Defaults to using port 80.",N,N],[12,"host","","The host to which the connection should be established",34,N],[12,"port","","The port on which the connection should be established",34,N],[3,"CleartextConnectError","","A newtype wrapping the `io::Error`, as it occurs when attempting to establish an HTTP/2 connection over cleartext TCP (with prior knowledge).",N,N],[3,"RequestStream","","A struct representing a request stream. It provides the headers that are to be sent when initiating the request, as well as a `Stream` instance that handles the received response and provides the request body.",N,N],[12,"headers","","The list of headers that will be sent with the request.",35,N],[12,"stream","","The underlying `Stream` instance, which will handle the response, as well as optionally provide the body of the request.",35,N],[3,"ClientConnection","","The struct extends the `HttpConnection` API with client-specific methods (such as `start_request`) and wires the `HttpConnection` to the client `Session` callbacks.",N,N],[12,"state","","The state of the session associated to this client connection. Maintains the status of the connection streams.",36,N],[3,"ClientSession","","An implementation of the `Session` trait specific to handling client HTTP/2 connections.",N,N],[5,"write_preface","","Writes the client preface to the underlying HTTP/2 connection.",N,[[["w"]],["result",["error"]]]],[8,"HttpConnectError","","A marker trait for errors raised by attempting to establish an HTTP/2 connection.",N,N],[8,"HttpConnect","","A trait that can be implemented by structs that want to provide the functionality of establishing network connections for use by HTTP/2 connections.",N,N],[16,"Stream","","The type of the underlying transport stream that the `HttpConnection`s produced by this `HttpConnect` implementation will be based on.",37,N],[16,"Err","","The type of the error that can be produced by trying to establish the connection (i.e. calling the `connect` method).",37,N],[10,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",37,[[["self"]],["result",["clientstream"]]]],[11,"new","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given host on port 80.",34,[[["str"]],["cleartextconnector"]]],[11,"with_port","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given host on the given port.",34,[[["str"],["u16"]],["cleartextconnector"]]],[11,"with_connection","","Creates a new `ClientConnection` that will use the given `HttpConnection` for all its underlying HTTP/2 communication.",36,[[["httpconnection"],["state"]],["clientconnection"]]],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",36,[[["self"]],["httpscheme"]]],[11,"init","","Performs the initialization of the `ClientConnection`.",36,[[["self"]],["httpresult"]]],[11,"start_request","","Starts a new request based on the given `RequestStream`.",36,[[["self"],["requeststream"]],["httpresult"]]],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session` instance.",36,[[["self"]],["httpresult"]]],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",36,[[["self"]],["httpresult",["sendstatus"]]]],[11,"new","","Returns a new `ClientSession` associated to the given state.",38,[[["state"]],["clientsession"]]],[0,"server","solicit::http","The module contains a number of reusable components for implementing the server side of an HTTP/2 connection.",N,N],[3,"ServerSession","solicit::http::server","An implementation of the `Session` trait for a server-side HTTP/2 connection.",N,N],[3,"ServerConnection","","The struct provides a more convenient API for server-related functionality of an HTTP/2 connection, such as sending a response back to the client.",N,N],[12,"state","","The state of the session associated to this client connection. Maintains the status of the connection streams.",39,N],[11,"new","","",40,[[["state"]],["serversession"]]],[11,"with_connection","","Creates a new `ServerConnection` that will use the given `HttpConnection` for its underlying HTTP/2 communication.",39,[[["httpconnection"],["state"]],["serverconnection"]]],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",39,[[["self"]],["httpscheme"]]],[11,"init","","Initializes the `ServerConnection` by sending the server's settings and processing the client's. If the client does not provide a settings frame, returns an error.",39,[[["self"]],["httpresult"]]],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session` instance.",39,[[["self"]],["httpresult"]]],[11,"start_response","","Starts a response on the stream with the given ID by sending the given headers.",39,[[["self"],["vec",["header"]],["streamid"],["endstream"]],["httpresult"]]],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",39,[[["self"]],["httpresult",["sendstatus"]]]],[6,"StreamId","solicit::http","An alias for the type that represents the ID of an HTTP/2 stream",N,N],[6,"Header","","An alias for the type that represents HTTP/2 headers. For now we only alias the tuple of byte vectors instead of going with a full struct representation.",N,N],[6,"HttpResult","","A convenience `Result` type that has the `HttpError` type as the error type and a generic Ok result type.",N,N],[17,"ALPN_PROTOCOLS","","A set of protocol names that the library should use to indicate that HTTP/2 is supported during protocol negotiation (NPN or ALPN). We include some of the drafts' protocol names, since there is basically no difference for all intents and purposes (and some servers out there still only officially advertise draft support). TODO: Eventually only use \"h2\".",N,N],[11,"as_bytes","","Returns a byte string representing the scheme.",3,N],[11,"new","","Creates a new `Response` with all the components already provided.",0,[[["streamid"],["vec",["header"]],["vec",["u8"]]],["response"]]],[11,"status_code","","Gets the response status code from the pseudo-header. If the response does not contain the response as the first pseuo-header, an error is returned as such a response is malformed.",0,[[["self"]],["httpresult",["u16"]]]],[0,"client","solicit","The module contains implementations of HTTP/2 clients that could be directly used to access HTTP/2 servers, i.e. send requests and read responses.",N,N],[3,"SimpleClient","solicit::client","A struct implementing a simple HTTP/2 client.",N,N],[3,"Client","","A struct representing an HTTP/2 client that receives responses to its requests asynchronously. Additionally, this client can be cloned and all clones can issue (concurrently) requests to the server, using the same underlying HTTP/2 connection.",N,N],[11,"with_connection","","Create a new `SimpleClient` instance that will use the given `HttpConnection` to communicate to the server.",41,[[["httpconnection"],["string"]],["httpresult",["simpleclient"]]]],[11,"with_connector","","A convenience constructor that first tries to establish an HTTP/2 connection by using the given connector instance (an implementation of the `HttpConnect` trait).",41,[[["c"]],["httpresult",["simpleclient"]]]],[11,"request","","Send a request to the server. Blocks until the entire request has been sent.",41,N],[11,"get_response","","Gets the response for the stream with the given ID. If a valid stream ID is given, it blocks until a response is received.",41,[[["self"],["streamid"]],["httpresult",["response"]]]],[11,"get","","Performs a GET request on the given path. This is a shortcut method for calling `request` followed by `get_response` for the returned stream ID.",41,N],[11,"post","","Performs a POST request on the given path.",41,N],[11,"with_connector","","Creates a brand new HTTP/2 client. This means that a new HTTP/2 connection will be established behind the scenes. A thread is spawned to handle the connection in the background, so that the thread that creates the client can use it asynchronously.",42,[[["c"]],["option",["client"]]]],[11,"request","","Issues a new request to the server.",42,N],[11,"get","","Issues a GET request to the server.",42,N],[11,"post","","Issues a POST request to the server.",42,N],[0,"server","solicit","The module contains a simple HTTP/2 server implementation.",N,N],[3,"ServerRequest","solicit::server","The struct represents a fully received request.",N,N],[12,"stream_id","","",43,N],[12,"headers","","",43,N],[12,"body","","",43,N],[3,"SimpleServer","","The struct implements a simple HTTP/2 server that allows users to register a request handler (a callback taking a `ServerRequest` and returning a `Response`) which is run on all received requests.",N,N],[11,"new","","Creates a new `SimpleServer` that will use the given `TransportStream` to communicate to the client. Assumes that the stream is fully uninitialized -- no preface sent or read yet.",44,[[["ts"],["h"]],["httpresult",["simpleserver"]]]],[11,"handle_next","","Handles the next incoming frame, blocking to receive it if nothing is available on the underlying stream.",44,[[["self"]],["httpresult"]]],[11,"from","solicit::http","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame::data","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame::headers","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame::settings","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","solicit::http::connection","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","solicit::http::session","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"into_iter","","",45,[[["self"]],["i"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","solicit::http::priority","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","solicit::http::client","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","solicit::http::server","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","solicit::client","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","solicit::server","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"bitmask","solicit::http::frame::data","",5,[[["self"]],["u8"]]],[11,"bitmask","solicit::http::frame::headers","",8,[[["self"]],["u8"]]],[11,"bitmask","solicit::http::frame::settings","",11,[[["self"]],["u8"]]],[11,"from_raw","solicit::http::frame::data","Creates a new `DataFrame` from the given `RawFrame` (i.e. header and payload), if possible.  Returns `None` if a valid `DataFrame` cannot be constructed from the given `RawFrame`.",4,[[["rawframe"]],["option",["dataframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",4,[[["self"],["dataflag"]],["bool"]]],[11,"set_flag","","Sets the given flag for the frame.",4,[[["self"],["dataflag"]]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",4,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the frame.",4,[[["self"]],["frameheader"]]],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",4,[[["self"]],["vec",["u8"]]]],[11,"from_raw","solicit::http::frame::headers","Creates a new `HeadersFrame` with the given `RawFrame` (i.e. header and payload), if possible.",7,[[["rawframe"]],["option",["headersframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",7,[[["self"],["headersflag"]],["bool"]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",7,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",7,[[["self"]],["frameheader"]]],[11,"set_flag","","Sets the given flag for the frame.",7,[[["self"],["headersflag"]]]],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",7,[[["self"]],["vec",["u8"]]]],[11,"from_raw","solicit::http::frame::settings","Creates a new `SettingsFrame` with the given `RawFrame` (i.e. header and payload), if possible.",9,[[["rawframe"]],["option",["settingsframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",9,[[["self"],["settingsflag"]],["bool"]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",9,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",9,[[["self"]],["frameheader"]]],[11,"set_flag","","Sets the given flag for the frame.",9,[[["self"],["settingsflag"]]]],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",9,[[["self"]],["vec",["u8"]]]],[11,"new_data_chunk","solicit::http::client","",38,N],[11,"new_headers","","",38,[[["self"],["streamid"],["vec",["header"]]]]],[11,"end_of_stream","","",38,[[["self"],["streamid"]]]],[11,"new_data_chunk","solicit::http::server","",40,N],[11,"new_headers","","",40,[[["self"],["streamid"],["vec",["header"]]]]],[11,"end_of_stream","","",40,[[["self"],["streamid"]]]],[11,"insert_stream","solicit::http::session","",30,N],[11,"get_stream_ref","","",30,[[["self"],["streamid"]],["option"]]],[11,"get_stream_mut","","",30,[[["self"],["streamid"]],["option"]]],[11,"remove_stream","","",30,[[["self"],["streamid"]],["option"]]],[11,"iter","","",30,[[["self"]],["streamiter"]]],[11,"new","","",23,[[["streamid"]],["defaultstream"]]],[11,"new_data_chunk","","",23,N],[11,"set_headers","","",23,[[["self"],["vec",["header"]]]]],[11,"set_state","","",23,[[["self"],["streamstate"]]]],[11,"id","","",23,[[["self"]],["streamid"]]],[11,"state","","",23,[[["self"]],["streamstate"]]],[11,"get_data_chunk","","",23,N],[11,"get_next_chunk","solicit::http::priority","",32,[[["self"]],["httpresult",["option"]]]],[11,"connect","solicit::http::client","Establishes a cleartext TCP connection based on the host and port. If it is not possible, returns an `HttpError`.",34,[[["self"]],["result",["clientstream","cleartextconnecterror"]]]],[11,"clone","solicit::http::frame::data","",5,[[["self"]],["dataflag"]]],[11,"clone","","",4,[[["self"]],["dataframe"]]],[11,"clone","solicit::http::frame::headers","",8,[[["self"]],["headersflag"]]],[11,"clone","","",6,[[["self"]],["streamdependency"]]],[11,"clone","","",7,[[["self"]],["headersframe"]]],[11,"clone","solicit::http::frame::settings","",10,[[["self"]],["httpsetting"]]],[11,"clone","","",11,[[["self"]],["settingsflag"]]],[11,"clone","","",9,[[["self"]],["settingsframe"]]],[11,"clone","solicit::http::frame","",14,[[["self"]],["rawframe"]]],[11,"clone","solicit::http::connection","",18,[[["self"]],["httpframe"]]],[11,"clone","","",19,[[["self"]],["sendstatus"]]],[11,"clone","","",20,[[["self"]],["endstream"]]],[11,"clone","solicit::http::session","",24,[[["self"]],["streamstate"]]],[11,"clone","","",26,[[["self"]],["streamdatachunk"]]],[11,"clone","","",23,[[["self"]],["defaultstream"]]],[11,"clone","solicit::http","",3,[[["self"]],["httpscheme"]]],[11,"clone","","",0,[[["self"]],["response"]]],[11,"clone","","",1,[[["self"]],["request"]]],[11,"clone","solicit::client","",42,[[["self"]],["client"]]],[11,"from","solicit::http::frame","",14,[[["vec",["u8"]]],["rawframe"]]],[11,"from","solicit::http::session","",25,[[["e"]],["streamdataerror"]]],[11,"from","solicit::http","",2,[[["e"]],["httperror"]]],[11,"from","solicit::http::client","",46,[[["error"]],["cleartextconnecterror"]]],[11,"from","solicit::http","",2,[[["error"]],["httperror"]]],[11,"drop","solicit::client","",42,[[["self"]]]],[11,"into","solicit::http::frame","",14,[[["self"]],["vec",["u8"]]]],[11,"next","solicit::http::session","",45,[[["self"]],["option"]]],[11,"eq","solicit::http::frame::data","",5,[[["self"],["dataflag"]],["bool"]]],[11,"eq","","",4,[[["self"],["dataframe"]],["bool"]]],[11,"ne","","",4,[[["self"],["dataframe"]],["bool"]]],[11,"eq","solicit::http::frame::headers","",8,[[["self"],["headersflag"]],["bool"]]],[11,"eq","","",6,[[["self"],["streamdependency"]],["bool"]]],[11,"ne","","",6,[[["self"],["streamdependency"]],["bool"]]],[11,"eq","","",7,[[["self"],["headersframe"]],["bool"]]],[11,"ne","","",7,[[["self"],["headersframe"]],["bool"]]],[11,"eq","solicit::http::frame::settings","",10,[[["self"],["httpsetting"]],["bool"]]],[11,"ne","","",10,[[["self"],["httpsetting"]],["bool"]]],[11,"eq","","",11,[[["self"],["settingsflag"]],["bool"]]],[11,"eq","","",9,[[["self"],["settingsframe"]],["bool"]]],[11,"ne","","",9,[[["self"],["settingsframe"]],["bool"]]],[11,"eq","solicit::http::frame","",14,[[["self"],["rawframe"]],["bool"]]],[11,"ne","","",14,[[["self"],["rawframe"]],["bool"]]],[11,"eq","solicit::http::connection","",18,[[["self"],["httpframe"]],["bool"]]],[11,"ne","","",18,[[["self"],["httpframe"]],["bool"]]],[11,"eq","","",19,[[["self"],["sendstatus"]],["bool"]]],[11,"eq","","",20,[[["self"],["endstream"]],["bool"]]],[11,"eq","solicit::http::session","",24,[[["self"],["streamstate"]],["bool"]]],[11,"eq","","",26,[[["self"],["streamdatachunk"]],["bool"]]],[11,"ne","","",26,[[["self"],["streamdatachunk"]],["bool"]]],[11,"eq","solicit::http","",3,[[["self"],["httpscheme"]],["bool"]]],[11,"fmt","solicit::http::client","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::frame::data","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::frame::headers","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::frame::settings","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::frame","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::connection","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::session","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http::client","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","solicit::http","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","solicit::http::client","",46,[[["self"]],["str"]]],[11,"cause","","",46,[[["self"]],["option",["error"]]]],[11,"description","solicit::http","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]]],"paths":[[3,"Response"],[3,"Request"],[4,"HttpError"],[4,"HttpScheme"],[3,"DataFrame"],[4,"DataFlag"],[3,"StreamDependency"],[3,"HeadersFrame"],[4,"HeadersFlag"],[3,"SettingsFrame"],[4,"HttpSetting"],[4,"SettingsFlag"],[8,"Flag"],[8,"Frame"],[3,"RawFrame"],[8,"TransportStream"],[3,"HttpConnection"],[3,"DataChunk"],[4,"HttpFrame"],[4,"SendStatus"],[4,"EndStream"],[8,"SendFrame"],[8,"ReceiveFrame"],[3,"DefaultStream"],[4,"StreamState"],[4,"StreamDataError"],[4,"StreamDataChunk"],[8,"Session"],[8,"SessionState"],[8,"Stream"],[3,"DefaultSessionState"],[8,"DataPrioritizer"],[3,"SimplePrioritizer"],[3,"ClientStream"],[3,"CleartextConnector"],[3,"RequestStream"],[3,"ClientConnection"],[8,"HttpConnect"],[3,"ClientSession"],[3,"ServerConnection"],[3,"ServerSession"],[3,"SimpleClient"],[3,"Client"],[3,"ServerRequest"],[3,"SimpleServer"],[3,"StreamIter"],[3,"CleartextConnectError"]]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",N,N],[13,"DifferentLengthArgs","","",0,N],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",N,[[["str"],["str"]],["hammingresult"]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",N,[[["str"],["str"]],["f64"]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",N,[[["str"],["str"]],["f64"]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",N,[[["str"],["str"]],["usize"]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",N,[[["str"],["str"]],["usize"]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",N,[[["str"],["str"]],["usize"]]],[6,"HammingResult","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"eq","","",0,[[["self"],["strsimerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"StrSimError"]]};
searchIndex["tempdir"]={"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",N,N],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,[[["str"]],["result",["tempdir"]]]],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,[[["p"],["str"]],["result",["tempdir"]]]],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,[[["self"]],["path"]]],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,[[["self"]],["pathbuf"]]],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,[[["self"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"drop","","",0,[[["self"]]]],[11,"as_ref","","",0,[[["self"]],["path"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TempDir"]]};
searchIndex["textwrap"]={"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",N,N],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",N,N],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",N,N],[12,"width","","The width in columns at which the text will be wrapped.",0,N],[12,"initial_indent","","Indentation used for the first line of output.",0,N],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,N],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,N],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,N],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",N,N],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",N,N],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["string"]]],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["vec",["cow"]]]],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["intowrapiter",["hyphensplitter"]]]],[5,"indent","","Add prefix to each non-empty line.",N,[[["str"],["str"]],["string"]]],[5,"dedent","","Removes common leading whitespace from each line.",N,[[["str"]],["string"]]],[8,"WordSplitter","","An interface for splitting words.",N,N],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,[[["self"],["str"]],["vec"]]],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,[[["usize"]],["wrapper",["hyphensplitter"]]]],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,[[["usize"],["s"]],["wrapper"]]],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,[[["self"],["bool"]],["wrapper"]]],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["string"]]],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["vec",["cow"]]]],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["wrapiter"]]],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["intowrapiter"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"split","","",2,[[["self"],["str"]],["vec"]]],[11,"split","","",3,[[["self"],["str"]],["vec"]]],[11,"clone","","",2,[[["self"]],["nohyphenation"]]],[11,"clone","","",3,[[["self"]],["hyphensplitter"]]],[11,"clone","","",0,[[["self"]],["wrapper"]]],[11,"next","","",4,[[["self"]],["option",["cow"]]]],[11,"next","","",5,[[["self"]],["option",["cow"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_id"]={"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",N,[[],["usize"]]]],"paths":[]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",1,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",1,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",1,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",1,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"drop","","",0,[[["self"]]]],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["box"]]]],[11,"size_hint","","",3,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"default","","",1,[[],["cachedthreadlocal"]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"into_iter","","",1,[[["self"]],["cachedintoiter"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",3,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",3,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",3,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",3,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",3,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",3,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",3,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",3,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",3,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",3,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",3,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",3,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",3,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",3,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",3,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",3,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",3,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",4,[[["self"],["precisetime"]],["duration"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,[[],["steadytime"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"clone","","",6,[[["self"]],["outofrangeerror"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["precisetime"]]],[11,"clone","","",5,[[["self"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"partial_cmp","","",3,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["duration"]],["bool"]]],[11,"le","","",3,[[["self"],["duration"]],["bool"]]],[11,"gt","","",3,[[["self"],["duration"]],["bool"]]],[11,"ge","","",3,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"eq","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"eq","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"cmp","","",3,[[["self"],["duration"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["steadytime"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"add","","",3,[[["self"],["duration"]],["duration"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"add","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",3,[[["self"],["duration"]],["duration"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"sub","","",5,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"mul","","",3,[[["self"],["i32"]],["duration"]]],[11,"div","","",3,[[["self"],["i32"]],["duration"]]],[11,"neg","","",3,[[["self"]],["duration"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"OutOfRangeError"],[3,"TmFmt"]]};
searchIndex["toml"]={"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",N,N],[12,"errors","","A list of all errors which have occurred during parsing.",0,N],[3,"ParserError","","A structure representing a parse error.",N,N],[12,"lo","","The low byte at which this error is pointing at.",1,N],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,N],[12,"desc","","A human-readable description explaining what the error is.",1,N],[3,"Encoder","","A structure to transform Rust values into TOML values.",N,N],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces the top-level representation of a structure to be a table.",2,N],[3,"EncoderState","","Internal state of the encoder when encoding transitions",N,N],[3,"Decoder","","A structure to transform TOML values into Rust values.",N,N],[12,"toml","","The TOML value left over after decoding. This can be used to inspect whether fields were decoded or not.",3,N],[3,"DecodeError","","Description for errors which can occur while decoding a type.",N,N],[12,"field","","Field that this error applies to.",4,N],[12,"kind","","The type of error which occurred while decoding,",4,N],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a TOML value.",N,N],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key was previously emitted.",5,N],[13,"NoValue","","Indication that a key was emitted, but no value was emitted.",5,N],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid location.",5,N],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a map key type.",5,N],[13,"Custom","","A custom error type was generated",5,N],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",N,N],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,N],[13,"ExpectedField","","A field was expected, but none was found.",6,N],[13,"UnknownField","","A field was found, but it was not an expected one.",6,N],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,N],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,N],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,N],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,N],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,N],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,N],[13,"CustomError","","A custom error was generated when decoding.",6,N],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,N],[13,"InvalidType","","Produced by serde ...",6,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","",7,N],[13,"Integer","","",7,N],[13,"Float","","",7,N],[13,"Boolean","","",7,N],[13,"Datetime","","",7,N],[13,"Array","","",7,N],[13,"Table","","",7,N],[5,"encode","","Encodes an encodable value into a TOML value.",N,[[["t"]],["value"]]],[5,"encode_str","","Encodes an encodable value into a TOML string.",N,[[["t"]],["string"]]],[5,"decode","","Decodes a TOML value into a decodable type.",N,[[["value"]],["option"]]],[5,"decode_str","","Decodes a string into a toml-encoded value.",N,[[["str"]],["option"]]],[11,"new","","Creates a new parser for a string.",0,[[["str"]],["parser"]]],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,N],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",0,[[["self"],["bool"]]]],[11,"parse","","Executes the parser, parsing the string contained within.",0,[[["self"]],["option",["table"]]]],[11,"lookup","","Parse a path into a vector of paths",0,[[["self"]],["option",["vec"]]]],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,[[],["encoder"]]],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,[[["value"]],["decoder"]]],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[11,"same_type","","Tests whether this and another value have the same type.",7,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,[[["self"]],["str"]]],[11,"as_str","","Extracts the string of this value if it is a string.",7,[[["self"]],["option",["str"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",7,[[["self"]],["option",["i64"]]]],[11,"as_float","","Extracts the float value if it is a float.",7,[[["self"]],["option",["f64"]]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,[[["self"]],["option",["bool"]]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,[[["self"]],["option",["str"]]]],[11,"as_slice","","Extracts the array value if it is an array.",7,[[["self"]],["option"]]],[11,"as_table","","Extracts the table value if it is a table.",7,[[["self"]],["option",["table"]]]],[11,"lookup","","Lookups for value at specified path.",7,[[["self"],["str"]],["option",["value"]]]],[11,"lookup_mut","","Lookups for mutable value at specified path.",7,[[["self"],["str"]],["option",["value"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"emit_from_vec","","",2,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"read_to_vec","","",3,[[["self"],["f"]],["result",["vec"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["parsererror"]]],[11,"clone","","",7,[[["self"]],["value"]]],[11,"default","","",2,[[],["encoder"]]],[11,"eq","","",4,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",4,[[["self"],["decodeerror"]],["bool"]]],[11,"eq","","",6,[[["self"],["decodeerrorkind"]],["bool"]]],[11,"ne","","",6,[[["self"],["decodeerrorkind"]],["bool"]]],[11,"eq","","",7,[[["self"],["value"]],["bool"]]],[11,"ne","","",7,[[["self"],["value"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",7,[[["str"]],["result",["value","vec"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"emit_nil","","",2,[[["self"]],["result",["error"]]]],[11,"emit_usize","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"emit_u8","","",2,[[["self"],["u8"]],["result",["error"]]]],[11,"emit_u16","","",2,[[["self"],["u16"]],["result",["error"]]]],[11,"emit_u32","","",2,[[["self"],["u32"]],["result",["error"]]]],[11,"emit_u64","","",2,[[["self"],["u64"]],["result",["error"]]]],[11,"emit_isize","","",2,[[["self"],["isize"]],["result",["error"]]]],[11,"emit_i8","","",2,[[["self"],["i8"]],["result",["error"]]]],[11,"emit_i16","","",2,[[["self"],["i16"]],["result",["error"]]]],[11,"emit_i32","","",2,[[["self"],["i32"]],["result",["error"]]]],[11,"emit_i64","","",2,[[["self"],["i64"]],["result",["error"]]]],[11,"emit_bool","","",2,[[["self"],["bool"]],["result",["error"]]]],[11,"emit_f32","","",2,[[["self"],["f32"]],["result",["error"]]]],[11,"emit_f64","","",2,[[["self"],["f64"]],["result",["error"]]]],[11,"emit_char","","",2,[[["self"],["char"]],["result",["error"]]]],[11,"emit_str","","",2,[[["self"],["str"]],["result",["error"]]]],[11,"emit_enum","","",2,[[["self"],["str"],["f"]],["result",["error"]]]],[11,"emit_enum_variant","","",2,[[["self"],["str"],["usize"],["usize"],["f"]],["result",["error"]]]],[11,"emit_enum_variant_arg","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_enum_struct_variant","","",2,[[["self"],["str"],["usize"],["usize"],["f"]],["result",["error"]]]],[11,"emit_enum_struct_variant_field","","",2,[[["self"],["str"],["usize"],["f"]],["result",["error"]]]],[11,"emit_struct","","",2,[[["self"],["str"],["usize"],["f"]],["result",["error"]]]],[11,"emit_struct_field","","",2,[[["self"],["str"],["usize"],["f"]],["result",["error"]]]],[11,"emit_tuple","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_tuple_arg","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_tuple_struct","","",2,[[["self"],["str"],["usize"],["f"]],["result",["error"]]]],[11,"emit_tuple_struct_arg","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_option","","",2,[[["self"],["f"]],["result",["error"]]]],[11,"emit_option_none","","",2,[[["self"]],["result",["error"]]]],[11,"emit_option_some","","",2,[[["self"],["f"]],["result",["error"]]]],[11,"emit_seq","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_seq_elt","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_map","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_map_elt_key","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"emit_map_elt_val","","",2,[[["self"],["usize"],["f"]],["result",["error"]]]],[11,"read_nil","","",3,[[["self"]],["result",["decodeerror"]]]],[11,"read_usize","","",3,[[["self"]],["result",["usize","decodeerror"]]]],[11,"read_u64","","",3,[[["self"]],["result",["u64","decodeerror"]]]],[11,"read_u32","","",3,[[["self"]],["result",["u32","decodeerror"]]]],[11,"read_u16","","",3,[[["self"]],["result",["u16","decodeerror"]]]],[11,"read_u8","","",3,[[["self"]],["result",["u8","decodeerror"]]]],[11,"read_isize","","",3,[[["self"]],["result",["isize","decodeerror"]]]],[11,"read_i64","","",3,[[["self"]],["result",["i64","decodeerror"]]]],[11,"read_i32","","",3,[[["self"]],["result",["i32","decodeerror"]]]],[11,"read_i16","","",3,[[["self"]],["result",["i16","decodeerror"]]]],[11,"read_i8","","",3,[[["self"]],["result",["i8","decodeerror"]]]],[11,"read_bool","","",3,[[["self"]],["result",["bool","decodeerror"]]]],[11,"read_f64","","",3,[[["self"]],["result",["f64","decodeerror"]]]],[11,"read_f32","","",3,[[["self"]],["result",["f32","decodeerror"]]]],[11,"read_char","","",3,[[["self"]],["result",["char","decodeerror"]]]],[11,"read_str","","",3,[[["self"]],["result",["string","decodeerror"]]]],[11,"read_enum","","",3,[[["self"],["str"],["f"]],["result",["decodeerror"]]]],[11,"read_enum_variant","","",3,N],[11,"read_enum_variant_arg","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_enum_struct_variant","","",3,N],[11,"read_enum_struct_variant_field","","",3,[[["self"],["str"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_struct","","",3,[[["self"],["str"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_struct_field","","",3,[[["self"],["str"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_tuple","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_tuple_arg","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_tuple_struct","","",3,[[["self"],["str"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_tuple_struct_arg","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_option","","",3,[[["self"],["f"]],["result",["decodeerror"]]]],[11,"read_seq","","",3,[[["self"],["f"]],["result",["decodeerror"]]]],[11,"read_seq_elt","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_map","","",3,[[["self"],["f"]],["result",["decodeerror"]]]],[11,"read_map_elt_key","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"read_map_elt_val","","",3,[[["self"],["usize"],["f"]],["result",["decodeerror"]]]],[11,"error","","",3,[[["self"],["str"]],["decodeerror"]]],[11,"encode","","",7,[[["self"],["e"]],["result"]]]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"],[3,"EncoderState"]]};
searchIndex["traitobject"]={"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",N,N],[5,"data_mut","","Get the data pointer from this trait object, mutably.",N,N]],"paths":[]};
searchIndex["typeable"]={"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",N,N],[11,"get_type","","Get the `TypeId` of this object.",0,[[["self"]],["typeid"]]]],"paths":[[8,"Typeable"]]};
searchIndex["unicase"]={"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",N,N],[12,"0","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["unicase"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"into","","",0,[[["self"]],["str"]]],[11,"into","","",0,[[["self"]],["string"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["s2"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["unicase"]]]],[11,"deref","","",0,[[["self"]],["s"]]],[11,"deref_mut","","",0,[[["self"]],["s"]]]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","unicode_bidi::level","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",5,[[["self"]],["level"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"from","unicode_bidi::level","Create level by number",5,[[["u8"]],["level"]]],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"eq","unicode_bidi","",3,[[["self"],["bidiclass"]],["bool"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"cmp","unicode_bidi::level","",5,[[["self"],["level"]],["ordering"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","unicode_bidi","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",1,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",1,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",1,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",1,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",1,[[["self"]],["streamsafe"]]],[11,"nfd","","",2,[[["self"]],["decompositions"]]],[11,"nfkd","","",2,[[["self"]],["decompositions"]]],[11,"nfc","","",2,[[["self"]],["recompositions"]]],[11,"nfkc","","",2,[[["self"]],["recompositions"]]],[11,"stream_safe","","",2,[[["self"]],["streamsafe"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"nfd","","",3,[[["self"]],["decompositions"]]],[11,"nfkd","","",3,[[["self"]],["decompositions"]]],[11,"nfc","","",3,[[["self"]],["recompositions"]]],[11,"nfkc","","",3,[[["self"]],["recompositions"]]],[11,"stream_safe","","",3,[[["self"]],["streamsafe"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"nfd","","",4,[[["self"]],["decompositions"]]],[11,"nfkd","","",4,[[["self"]],["decompositions"]]],[11,"nfc","","",4,[[["self"]],["recompositions"]]],[11,"nfkc","","",4,[[["self"]],["recompositions"]]],[11,"stream_safe","","",4,[[["self"]],["streamsafe"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["decompositions"]]],[11,"clone","","",3,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["char"]]]],[11,"next","","",4,[[["self"]],["option",["char"]]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"IsNormalized"],[8,"UnicodeNormalization"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",6,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",6,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",6,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",6,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",6,[[["self"],["i"]],["self"]]],[11,"description","","",4,[[["self"]],["str"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",7,[[["self"]],["string"]]],[10,"finish","","",7,N],[16,"Finished","","",7,N],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",8,[[["self"]],["parseintoowned"]]],[11,"new","","Create a new `application/x-www-form-urlencoded` serializer for the given target.",9,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",9,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",9,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",9,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",9,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",9,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",9,N],[11,"base_url","url","Change the base URL",10,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",10,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",10,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",10,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"parse","","Parse an absolute URL from a string.",11,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",11,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",11,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",11,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",11,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",11,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",11,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",11,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",11,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",11,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",11,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",11,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,[[["self"]],["result",["pathbuf"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","url::form_urlencoded","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"as_mut_string","url","",14,[[["self"]],["string"]]],[11,"finish","","",14,[[["self"]],["url"]]],[11,"clone","","",2,[[["self"]],["host"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"clone","","",12,[[["self"]],["opaqueorigin"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"clone","url::form_urlencoded","",8,[[["self"]],["parse"]]],[11,"clone","url","",11,[[["self"]],["url"]]],[11,"clone","","",10,[[["self"]],["parseoptions"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"drop","","",6,[[["self"]]]],[11,"drop","","",14,[[["self"]]]],[11,"next","","",13,[[["self"]],["option",["socketaddr"]]]],[11,"next","url::form_urlencoded","",8,[[["self"]],["option"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"next","","",16,[[["self"]],["option",["str"]]]],[11,"size_hint","","",16,N],[11,"as_ref","url","",11,[[["self"]],["str"]]],[11,"partial_cmp","","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["self"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"eq","","",12,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",12,[[["self"],["opaqueorigin"]],["bool"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"hash","","",2,N],[11,"hash","","",1,N],[11,"hash","","",12,N],[11,"hash","","",11,[[["self"],["h"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","url::form_urlencoded","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","url","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",11,[[["str"]],["result",["url","parseerror"]]]],[11,"index","","",11,[[["self"],["rangefull"]],["str"]]],[11,"index","","",11,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["range",["position"]]],["str"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"to_socket_addrs","","",11,[[["self"]],["result"]]]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"PathSegmentsMut"],[8,"Target"],[3,"Parse"],[3,"Serializer"],[3,"ParseOptions"],[3,"Url"],[3,"OpaqueOrigin"],[3,"SocketAddrs"],[3,"UrlQuery"],[3,"ParseIntoOwned"],[3,"ByteSerialize"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,"VacantEntry","","A vacant Entry.",N,N],[3,"OccupiedEntry","","An occupied Entry.",N,N],[3,"Iter","","An iterator over the key-value pairs of a map.",N,N],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",N,N],[3,"Keys","","An iterator over the keys of a map.",N,N],[3,"Values","","An iterator over the values of a map.",N,N],[3,"ValuesMut","","An iterator over the values of a map.",N,N],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain","","A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant Entry",0,N],[13,"Occupied","","An occupied Entry",0,N],[11,"new","","Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,[[["self"]],["values"]]],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,[[["self"]],["valuesmut"]]],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,[[["self"]],["itermut"]]],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,[[["self"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,[[["self"]],["drain"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,[[["self"],["usize"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,[[["self"],["usize"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["usize"]],["entry"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,[[["self"],["v"]],["v"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"clone","","",4,[[["self"]],["iter"]]],[11,"clone","","",6,[[["self"]],["keys"]]],[11,"clone","","",7,[[["self"]],["values"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next","","",6,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",6,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option",["usize"]]]],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["intoiter"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"from_iter","","",1,[[["i"]],["self"]]]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["websocket"]={"doc":"Rust-WebSocket is a WebSocket (RFC6455) library written in Rust.","items":[[0,"ws","websocket","A module containing the traits and structs that lower layer of Rust-WebSocket is based on.",N,N],[0,"message","websocket::ws","Provides a trait for WebSocket messages",N,N],[8,"Message","websocket::ws::message","A trait for WebSocket messages",N,N],[16,"DataFrameIterator","","The iterator type returned by dataframes",0,N],[10,"from_dataframes","","Attempt to form a message from a slice of data frames.",0,[[["vec"]],["websocketresult"]]],[10,"dataframes","","Turns this message into an iterator over data frames",0,N],[0,"sender","websocket::ws","Provides a trait for sending data frames and messages.",N,N],[8,"Sender","websocket::ws::sender","A trait for sending data frames and messages.",N,N],[10,"send_dataframe","","Sends a single data frame using this sender.",1,[[["self"],["d"]],["websocketresult"]]],[11,"send_message","","Sends a single message using this sender.",1,[[["self"],["m"]],["websocketresult"]]],[0,"receiver","websocket::ws","Provides a trait for receiving data frames and messages.",N,N],[3,"DataFrameIterator","websocket::ws::receiver","An iterator over data frames from a Receiver.",N,N],[3,"MessageIterator","","An iterator over messages from a Receiver.",N,N],[8,"Receiver","","A trait for receiving data frames and messages.",N,N],[10,"recv_dataframe","","Reads a single data frame from this receiver.",2,[[["self"]],["websocketresult"]]],[10,"recv_message_dataframes","","Returns the data frames that constitute one message.",2,[[["self"]],["websocketresult",["vec"]]]],[11,"incoming_dataframes","","Returns an iterator over incoming data frames.",2,[[["self"]],["dataframeiterator"]]],[11,"recv_message","","Reads a single message from this receiver.",2,[[["self"]],["websocketresult"]]],[11,"incoming_messages","","Returns an iterator over incoming messages.",2,[[["self"]],["messageiterator"]]],[0,"util","websocket::ws","Utility functions for various portions of Rust-WebSocket.",N,N],[5,"bytes_to_string","websocket::ws::util","Transforms a u8 slice into an owned String",N,N],[0,"header","","Utility functions for reading and writing data frame headers.",N,N],[3,"DataFrameFlags","websocket::ws::util::header","Flags relevant to a WebSocket data frame.",N,N],[3,"DataFrameHeader","","Represents a data frame header.",N,N],[12,"flags","","The bit flags for the first byte of the header.",3,N],[12,"opcode","","The opcode of the header - must be <= 16.",3,N],[12,"mask","","The masking key, if any.",3,N],[12,"len","","The length of the payload.",3,N],[5,"write_header","","Writes a data frame header.",N,[[["w"],["dataframeheader"]],["websocketresult"]]],[5,"read_header","","Reads a data frame header.",N,[[["r"]],["websocketresult",["dataframeheader"]]]],[17,"FIN","","Marks this dataframe as the last dataframe",N,N],[17,"RSV1","","First reserved bit",N,N],[17,"RSV2","","Second reserved bit",N,N],[17,"RSV3","","Third reserved bit",N,N],[11,"empty","","Returns an empty set of flags.",4,[[],["dataframeflags"]]],[11,"all","","Returns the set containing all flags.",4,[[],["dataframeflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",4,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",4,[[["u8"]],["option",["dataframeflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",4,[[["u8"]],["dataframeflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",4,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",4,[[["self"],["dataframeflags"]]]],[11,"remove","","Removes the specified flags in-place.",4,[[["self"],["dataframeflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",4,[[["self"],["dataframeflags"]]]],[0,"mask","websocket::ws::util","Utility functions for masking data frame payload data",N,N],[3,"Masker","websocket::ws::util::mask","Struct to pipe data into another writer, while masking the data being written",N,N],[5,"gen_mask","","Generates a random masking key",N,N],[5,"mask_data","","Masks data to send to a server and writes",N,N],[11,"new","","Create a new Masker with the key and the endpoint to be writter to.",5,N],[0,"url","websocket::ws::util","Utility functions for dealing with URLs",N,N],[5,"parse_url_str","websocket::ws::util::url","Gets the host, port, resource and secure from the string representation of a url",N,[[["str"]],["websocketresult"]]],[5,"parse_url","","Gets the host, port, resource, and secure flag from a url",N,[[["url"]],["websocketresult"]]],[8,"ToWebSocketUrlComponents","","Trait that gets required WebSocket URL components",N,N],[10,"to_components","","Retrieve the required WebSocket URL components from this",6,[[["self"]],["websocketresult"]]],[0,"dataframe","websocket::ws","Describes the generic DataFrame, defining a trait that all dataframes should share. This is so one can optomize the memory footprint of a dataframe for their own needs, and be able to use custom dataframes quickly",N,N],[8,"DataFrame","websocket::ws::dataframe","A generic DataFrame. Every dataframe should be able to provide these methods. (If the payload is not known in advance then rewrite the write_payload method)",N,N],[10,"is_last","","Is this dataframe the final dataframe of the message?",7,[[["self"]],["bool"]]],[10,"opcode","","What type of data does this dataframe contain?",7,[[["self"]],["u8"]]],[10,"reserved","","Reserved bits of this dataframe",7,N],[10,"payload","","Entire payload of the dataframe. If not known then implement write_payload as that is the actual method used when sending the dataframe over the wire.",7,[[["self"]],["cow"]]],[11,"size","","How long (in bytes) is this dataframe's payload",7,[[["self"]],["usize"]]],[11,"write_payload","","Write the payload to a writer",7,[[["self"],["w"]],["websocketresult"]]],[11,"write_to","","Writes a DataFrame to a Writer.",7,[[["self"],["w"],["bool"]],["websocketresult"]]],[0,"client","websocket","Contains the WebSocket client.",N,N],[3,"Client","websocket::client","Represents a WebSocket client, which can send and receive messages/data frames.",N,N],[0,"request","","Structs for client-side (outbound) WebSocket requests",N,N],[3,"Url","websocket::client::request","A parsed URL record.",N,N],[3,"Request","","Represents a WebSocket request.",N,N],[12,"version","","The HTTP version of this request.",8,N],[12,"headers","","The headers of this request.",8,N],[11,"new","","Creates a new client-side request.",8,[[["t"],["r"],["w"]],["websocketresult",["request"]]]],[11,"key","","Short-cut to obtain the WebSocketKey value.",8,[[["self"]],["option",["websocketkey"]]]],[11,"version","","Short-cut to obtain the WebSocketVersion value.",8,[[["self"]],["option",["websocketversion"]]]],[11,"protocol","","Short-cut to obtain the WebSocketProtocol value.",8,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions","","Short-cut to obtain the WebSocketExtensions value.",8,[[["self"]],["option",["websocketextensions"]]]],[11,"origin","","Short-cut to obtain the Origin value.",8,[[["self"]],["option",["origin"]]]],[11,"key_mut","","Short-cut to obtain a mutable reference to the WebSocketKey value.",8,[[["self"]],["option",["websocketkey"]]]],[11,"version_mut","","Short-cut to obtain a mutable reference to the WebSocketVersion value.",8,[[["self"]],["option",["websocketversion"]]]],[11,"protocol_mut","","Short-cut to obtaina mutable reference to  the WebSocketProtocol value.",8,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions_mut","","Short-cut to obtain a mutable reference to the WebSocketExtensions value.",8,[[["self"]],["option",["websocketextensions"]]]],[11,"origin_mut","","Short-cut to obtain a mutable reference to the Origin value.",8,[[["self"]],["option",["origin"]]]],[11,"get_reader","","Returns a reference to the inner Reader.",8,[[["self"]],["bufreader"]]],[11,"get_writer","","Returns a reference to the inner Writer.",8,[[["self"]],["w"]]],[11,"get_mut_reader","","Returns a mutable reference to the inner Reader.",8,[[["self"]],["bufreader"]]],[11,"get_mut_writer","","Returns a mutable reference to the inner Writer.",8,[[["self"]],["w"]]],[11,"into_inner","","Return the inner Reader and Writer.",8,N],[11,"send","","Sends the request to the server and returns a response.",8,[[["self"]],["websocketresult",["response"]]]],[0,"response","websocket::client","Structs for WebSocket responses",N,N],[3,"Response","websocket::client::response","Represents a WebSocket response.",N,N],[12,"status","","The status of the response",9,N],[12,"headers","","The headers contained in this response",9,N],[12,"version","","The HTTP version of this response",9,N],[11,"read","","Reads a Response off the stream associated with a Request.",9,[[["request"]],["websocketresult",["response"]]]],[11,"accept","","Short-cut to obtain the WebSocketAccept value.",9,[[["self"]],["option",["websocketaccept"]]]],[11,"protocol","","Short-cut to obtain the WebSocketProtocol value.",9,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions","","Short-cut to obtain the WebSocketExtensions value.",9,[[["self"]],["option",["websocketextensions"]]]],[11,"get_reader","","Returns a reference to the inner Reader.",9,[[["self"]],["bufreader"]]],[11,"get_writer","","Returns a reference to the inner Writer.",9,[[["self"]],["w"]]],[11,"get_mut_reader","","Returns a mutable reference to the inner Reader.",9,[[["self"]],["bufreader"]]],[11,"get_mut_writer","","Returns a mutable reference to the inner Writer.",9,[[["self"]],["w"]]],[11,"get_request","","Returns a reference to the request associated with this response.",9,[[["self"]],["request"]]],[11,"into_inner","","Return the inner Reader and Writer.",9,N],[11,"validate","","Check if this response constitutes a successful handshake.",9,[[["self"]],["websocketresult"]]],[11,"begin_with","","Consume this response and return a Client ready to transmit/receive data frames using the data frame type D, Sender B and Receiver C.",9,[[["self"],["b"],["c"]],["client"]]],[11,"begin","","Consume this response and return a Client ready to transmit/receive data frames.",9,[[["self"]],["client",["dataframe","sender","receiver"]]]],[11,"connect","websocket::client","Connects to the given ws:// or wss:// URL and return a Request to be sent.",10,[[["t"]],["websocketresult",["request"]]]],[11,"connect_ssl_context","","Connects to the specified wss:// URL using the given SSL context.",10,[[["t"],["sslcontext"]],["websocketresult",["request"]]]],[11,"shutdown_sender","","Shuts down the sending half of the client connection, will cause all pending and future IO to return immediately with an appropriate value.",10,[[["self"]],["ioresult"]]],[11,"shutdown_receiver","","Shuts down the receiving half of the client connection, will cause all pending and future IO to return immediately with an appropriate value.",10,[[["self"]],["ioresult"]]],[11,"shutdown","","Shuts down the client connection, will cause all pending and future IO to return immediately with an appropriate value.",10,[[["self"]],["ioresult"]]],[11,"new","","Creates a Client from the given Sender and Receiver.",10,[[["s"],["r"]],["client"]]],[11,"send_dataframe","","Sends a single data frame to the remote endpoint.",10,[[["self"],["d"]],["websocketresult"]]],[11,"send_message","","Sends a single message to the remote endpoint.",10,[[["self"],["m"]],["websocketresult"]]],[11,"recv_dataframe","","Reads a single data frame from the remote endpoint.",10,[[["self"]],["websocketresult"]]],[11,"incoming_dataframes","","Returns an iterator over incoming data frames.",10,[[["self"]],["dataframeiterator"]]],[11,"recv_message","","Reads a single message from this receiver.",10,[[["self"]],["websocketresult"]]],[11,"incoming_messages","","Returns an iterator over incoming messages.",10,[[["self"]],["messageiterator"]]],[11,"get_sender","","Returns a reference to the underlying Sender.",10,[[["self"]],["s"]]],[11,"get_receiver","","Returns a reference to the underlying Receiver.",10,[[["self"]],["r"]]],[11,"get_mut_sender","","Returns a mutable reference to the underlying Sender.",10,[[["self"]],["s"]]],[11,"get_mut_receiver","","Returns a mutable reference to the underlying Receiver.",10,[[["self"]],["r"]]],[11,"split","","Split this client into its constituent Sender and Receiver pair.",10,N],[0,"server","websocket","Provides an implementation of a WebSocket server",N,N],[3,"Server","websocket::server","Represents a WebSocket server which can work with either normal (non-secure) connections, or secure WebSocket connections.",N,N],[3,"Connection","","Represents a connection to the server that has not been processed yet.",N,N],[0,"request","","The server-side WebSocket request.",N,N],[4,"RequestUri","websocket::server::request","The Request-URI of a Request's StartLine.",N,N],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",11,N],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",11,N],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",11,N],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",11,N],[3,"Request","","Represents a server-side (incoming) request.",N,N],[12,"method","","The HTTP method used to create the request. All values except `Method::Get` are rejected by `validate()`.",12,N],[12,"url","","The target URI for this request.",12,N],[12,"version","","The HTTP version of this request.",12,N],[12,"headers","","The headers of this request.",12,N],[11,"key","","Short-cut to obtain the WebSocketKey value.",12,[[["self"]],["option",["websocketkey"]]]],[11,"version","","Short-cut to obtain the WebSocketVersion value.",12,[[["self"]],["option",["websocketversion"]]]],[11,"protocol","","Short-cut to obtain the WebSocketProtocol value.",12,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions","","Short-cut to obtain the WebSocketExtensions value.",12,[[["self"]],["option",["websocketextensions"]]]],[11,"origin","","Short-cut to obtain the Origin value.",12,[[["self"]],["option",["origin"]]]],[11,"get_reader","","Returns a reference to the inner Reader.",12,[[["self"]],["r"]]],[11,"get_writer","","Returns a reference to the inner Writer.",12,[[["self"]],["w"]]],[11,"get_mut_reader","","Returns a mutable reference to the inner Reader.",12,[[["self"]],["r"]]],[11,"get_mut_writer","","Returns a mutable reference to the inner Writer.",12,[[["self"]],["w"]]],[11,"into_inner","","Return the inner Reader and Writer",12,N],[11,"read","","Reads an inbound request.",12,[[["r"],["w"]],["websocketresult",["request"]]]],[11,"validate","","Check if this constitutes a valid WebSocket upgrade request.",12,[[["self"]],["websocketresult"]]],[11,"accept","","Accept this request, ready to send a response.",12,[[["self"]],["response"]]],[11,"fail","","Fail this request by generating a Bad Request response",12,[[["self"]],["response"]]],[0,"response","websocket::server","Struct for server-side WebSocket response.",N,N],[3,"Response","websocket::server::response","Represents a server-side (outgoing) response.",N,N],[12,"status","","The status of the response",13,N],[12,"headers","","The headers contained in this response",13,N],[12,"version","","The HTTP version of this response",13,N],[11,"accept","","Short-cut to obtain the WebSocketAccept value",13,[[["self"]],["option",["websocketaccept"]]]],[11,"protocol","","Short-cut to obtain the WebSocketProtocol value",13,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions","","Short-cut to obtain the WebSocketExtensions value",13,[[["self"]],["option",["websocketextensions"]]]],[11,"get_reader","","Returns a reference to the inner Reader.",13,[[["self"]],["r"]]],[11,"get_writer","","Returns a reference to the inner Writer.",13,[[["self"]],["w"]]],[11,"get_mut_reader","","Returns a mutable reference to the inner Reader.",13,[[["self"]],["r"]]],[11,"get_mut_writer","","Returns a mutable reference to the inner Writer.",13,[[["self"]],["w"]]],[11,"get_request","","Returns a reference to the request associated with this response/",13,[[["self"]],["request"]]],[11,"into_inner","","Return the inner Reader and Writer",13,N],[11,"new","","Create a new outbound WebSocket response.",13,[[["request"]],["response"]]],[11,"bad_request","","Create a Bad Request response",13,[[["request"]],["response"]]],[11,"accept_mut","","Short-cut to obtain a mutable reference to the WebSocketAccept value Note that to add a header that does not already exist, `WebSocketResponse.headers.set()` must be used.",13,[[["self"]],["option",["websocketaccept"]]]],[11,"protocol_mut","","Short-cut to obtain a mutable reference to the WebSocketProtocol value Note that to add a header that does not already exist, `WebSocketResponse.headers.set()` must be used.",13,[[["self"]],["option",["websocketprotocol"]]]],[11,"extensions_mut","","Short-cut to obtain a mutable reference to the WebSocketExtensions value Note that to add a header that does not already exist, `WebSocketResponse.headers.set()` must be used.",13,[[["self"]],["option",["websocketextensions"]]]],[11,"send_with","","Send this response with the given data frame type D, Sender B and Receiver C.",13,[[["self"],["b"],["c"]],["websocketresult",["client"]]]],[11,"send_into_inner","","Send this response, retrieving the inner Reader and Writer",13,[[["self"]],["websocketresult"]]],[11,"send","","Send this response, returning a Client ready to transmit/receive data frames",13,[[["self"]],["websocketresult",["client"]]]],[11,"bind","websocket::server","Bind this Server to this socket",14,[[["t"]],["result",["server"]]]],[11,"bind_secure","","Bind this Server to this socket, utilising the given SslContext",14,[[["t"],["sslcontext"]],["result",["server"]]]],[11,"local_addr","","Get the socket address of this server",14,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",14,[[["self"]],["result",["server"]]]],[11,"accept","","Wait for and accept an incoming WebSocket connection, returning a WebSocketRequest",14,[[["self"]],["result",["connection"]]]],[11,"read_request","","Process this connection and read the request.",15,[[["self"]],["result",["request"]]]],[11,"shutdown","","Shuts down the currennt connection in the specified way. All future IO calls to this connection will return immediately with an appropriate return value.",15,[[["self"],["shutdown"]],["result"]]],[0,"dataframe","websocket","Module containing the default implementation of data frames.",N,N],[3,"DataFrame","websocket::dataframe","Represents a WebSocket data frame.",N,N],[12,"finished","","Whether or no this constitutes the end of a message",16,N],[12,"reserved","","The reserved portion of the data frame (RFC6455 5.2)",16,N],[12,"opcode","","The opcode associated with this data frame",16,N],[12,"data","","The payload associated with this data frame",16,N],[4,"Opcode","","Represents a WebSocket data frame opcode",N,N],[13,"Continuation","","A continuation data frame",17,N],[13,"Text","","A UTF-8 text data frame",17,N],[13,"Binary","","A binary data frame",17,N],[13,"NonControl1","","An undefined non-control data frame",17,N],[13,"NonControl2","","An undefined non-control data frame",17,N],[13,"NonControl3","","An undefined non-control data frame",17,N],[13,"NonControl4","","An undefined non-control data frame",17,N],[13,"NonControl5","","An undefined non-control data frame",17,N],[13,"Close","","A close data frame",17,N],[13,"Ping","","A ping data frame",17,N],[13,"Pong","","A pong data frame",17,N],[13,"Control1","","An undefined control data frame",17,N],[13,"Control2","","An undefined control data frame",17,N],[13,"Control3","","An undefined control data frame",17,N],[13,"Control4","","An undefined control data frame",17,N],[13,"Control5","","An undefined control data frame",17,N],[11,"new","","Creates a new DataFrame.",16,[[["bool"],["opcode"],["vec",["u8"]]],["dataframe"]]],[11,"read_dataframe","","Reads a DataFrame from a Reader.",16,[[["r"],["bool"]],["websocketresult"]]],[11,"new","","Attempts to form an Opcode from a nibble.",17,[[["u8"]],["option",["opcode"]]]],[0,"message","websocket","Module containing the default implementation for messages.",N,N],[3,"Message","websocket::message","Represents a WebSocket message.",N,N],[12,"opcode","","Type of WebSocket message",18,N],[12,"cd_status_code","","Optional status code to send when closing a connection. (only used if this message is of Type::Close)",18,N],[12,"payload","","Main payload",18,N],[4,"Type","","Valid types of messages (in the default implementation)",N,N],[13,"Text","","Message with UTF8 test",19,N],[13,"Binary","","Message containing binary data",19,N],[13,"Ping","","Ping message with data",19,N],[13,"Pong","","Pong message with data",19,N],[13,"Close","","Close connection message with optional reason",19,N],[8,"IntoCowBytes","","Trait representing the ability to convert self to a `Cow<'a, [u8]>`",N,N],[10,"into","","Consume `self` and produce a `Cow<'a, [u8]>`",20,[[["self"]],["cow"]]],[11,"text","","Create a new WebSocket message with text data",18,[[["s"]],["self"]]],[11,"binary","","Create a new WebSocket message with binary data",18,[[["b"]],["self"]]],[11,"close","","Create a new WebSocket message that signals the end of a WebSocket connection, although messages can still be sent after sending this",18,[[],["self"]]],[11,"close_because","","Create a new WebSocket message that signals the end of a WebSocket connection and provide a text reason and a status code for why. Messages can still be sent after sending this message.",18,[[["u16"],["s"]],["self"]]],[11,"ping","","Create a ping WebSocket message, a pong is usually sent back after sending this with the same data",18,[[["p"]],["self"]]],[11,"pong","","Create a pong WebSocket message, usually a response to a ping message",18,[[["p"]],["self"]]],[11,"into_pong","","Convert a ping message to a pong, keeping the data. This will fail if the original message is not a ping.",18,[[["self"]],["result"]]],[0,"result","websocket","The result type used within Rust-WebSocket",N,N],[4,"WebSocketError","websocket::result","Represents a WebSocket error",N,N],[13,"ProtocolError","","A WebSocket protocol error",21,N],[13,"RequestError","","Invalid WebSocket request error",21,N],[13,"ResponseError","","Invalid WebSocket response error",21,N],[13,"DataFrameError","","Invalid WebSocket data frame error",21,N],[13,"NoDataAvailable","","No data available",21,N],[13,"IoError","","An input/output error",21,N],[13,"HttpError","","An HTTP parsing error",21,N],[13,"UrlError","","A URL parsing error",21,N],[13,"WebSocketUrlError","","A WebSocket URL error",21,N],[13,"SslError","","An SSL error",21,N],[13,"Utf8Error","","A UTF-8 error",21,N],[4,"WSUrlErrorKind","","Represents a WebSocket URL error",N,N],[13,"CannotSetFragment","","Fragments are not valid in a WebSocket URL",22,N],[13,"InvalidScheme","","The scheme provided is invalid for a WebSocket",22,N],[6,"WebSocketResult","","The type used for WebSocket results",N,N],[0,"stream","websocket","Provides the default stream type for WebSocket connections.",N,N],[4,"SocketAddr","websocket::stream","An internet socket address, either IPv4 or IPv6.",N,N],[13,"V4","","An IPv4 socket address.",23,N],[13,"V6","","An IPv6 socket address.",23,N],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",N,N],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",24,N],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",24,N],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",24,N],[3,"TcpStream","","A TCP stream between a local and a remote socket.",N,N],[4,"WebSocketStream","","A useful stream type for carrying WebSocket connections.",N,N],[13,"Tcp","","A TCP stream.",25,N],[13,"Ssl","","An SSL-backed TCP Stream",25,N],[11,"peer_addr","","See `TcpStream.peer_addr()`.",25,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","See `TcpStream.local_addr()`.",25,[[["self"]],["result",["socketaddr"]]]],[11,"set_nodelay","","See `TcpStream.set_nodelay()`.",25,[[["self"],["bool"]],["result"]]],[11,"set_keepalive","","See `TcpStream.set_keepalive()`.",25,[[["self"],["option",["u32"]]],["result"]]],[11,"shutdown","","See `TcpStream.shutdown()`.",25,[[["self"],["shutdown"]],["result"]]],[11,"try_clone","","See `TcpStream.try_clone()`.",25,[[["self"]],["result",["websocketstream"]]]],[0,"header","websocket","Structs representing headers relevant in a WebSocket context.",N,N],[3,"Headers","websocket::header","A map of header fields on requests and responses.",N,N],[3,"WebSocketKey","","Represents a Sec-WebSocket-Key header.",N,N],[12,"0","","",26,N],[3,"WebSocketAccept","","Represents a Sec-WebSocket-Accept header",N,N],[3,"WebSocketProtocol","","Represents a Sec-WebSocket-Protocol header",N,N],[12,"0","","",27,N],[3,"Origin","","Represents an Origin header",N,N],[12,"0","","",28,N],[4,"WebSocketVersion","","Represents a Sec-WebSocket-Version header",N,N],[13,"WebSocket13","","The version of WebSocket defined in RFC6455",29,N],[13,"Unknown","","An unknown version of WebSocket",29,N],[11,"new","","Create a new WebSocketAccept from the given WebSocketKey",30,[[["websocketkey"]],["websocketaccept"]]],[11,"serialize","","Return the Base64 encoding of this WebSocketAccept",30,[[["self"]],["string"]]],[11,"new","","Generate a new, random WebSocketKey",26,[[],["websocketkey"]]],[11,"serialize","","Return the Base64 encoding of this WebSocketKey",26,[[["self"]],["string"]]],[0,"extensions","","Provides the Sec-WebSocket-Extensions header.",N,N],[3,"WebSocketExtensions","websocket::header::extensions","Represents a Sec-WebSocket-Extensions header",N,N],[12,"0","","",31,N],[3,"Extension","","A WebSocket extension",N,N],[12,"name","","The name of this extension",32,N],[12,"params","","The parameters for this extension",32,N],[3,"Parameter","","A parameter for an Extension",N,N],[12,"name","","The name of this parameter",33,N],[12,"value","","The value of this parameter, if any",33,N],[11,"new","","Creates a new extension with the given name",32,[[["string"]],["extension"]]],[11,"new","","Creates a new parameter with the given name and value",33,[[["string"],["option",["string"]]],["parameter"]]],[0,"receiver","websocket","The default implementation of a WebSocket Receiver.",N,N],[3,"Receiver","websocket::receiver","A Receiver that wraps a Reader and provides a default implementation using DataFrames and Messages.",N,N],[11,"new","","Create a new Receiver using the specified Reader.",34,[[["bufreader"],["bool"]],["receiver"]]],[11,"get_ref","","Returns a reference to the underlying Reader.",34,[[["self"]],["bufreader"]]],[11,"get_mut","","Returns a mutable reference to the underlying Reader.",34,[[["self"]],["bufreader"]]],[11,"shutdown","","Closes the receiver side of the connection, will cause all pending and future IO to return immediately with an appropriate value.",34,[[["self"]],["ioresult"]]],[11,"shutdown_all","","Shuts down both Sender and Receiver, will cause all pending and future IO to return immediately with an appropriate value.",34,[[["self"]],["ioresult"]]],[0,"sender","websocket","The default implementation of a WebSocket Sender.",N,N],[3,"Sender","websocket::sender","A Sender that wraps a Writer and provides a default implementation using DataFrames and Messages.",N,N],[11,"new","","Create a new WebSocketSender using the specified Writer.",35,[[["w"],["bool"]],["sender"]]],[11,"get_ref","","Returns a reference to the underlying Writer.",35,[[["self"]],["w"]]],[11,"get_mut","","Returns a mutable reference to the underlying Writer.",35,[[["self"]],["w"]]],[11,"shutdown","","Closes the sender side of the connection, will cause all pending and future IO to return immediately with an appropriate value.",35,[[["self"]],["ioresult"]]],[11,"shutdown_all","","Shuts down both Sender and Receiver, will cause all pending and future IO to return immediately with an appropriate value.",35,[[["self"]],["ioresult"]]],[11,"from","websocket::ws::receiver","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","websocket::ws::util::header","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","websocket::ws::util::mask","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"send_frame","","",5,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",5,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","websocket::client","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","websocket::client::request","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","websocket::client::response","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","websocket::server","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","websocket::server::request","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","websocket::server::response","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","websocket::dataframe","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","websocket::message","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","websocket::result","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","websocket::stream","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"send_frame","","",39,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",39,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"recv_frame","","",39,[[["self"]],["result",["httpframe","httperror"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"send_frame","","",25,[[["self"],["f"]],["result",["httperror"]]]],[11,"send_raw_frame","","",25,[[["self"],["rawframe"]],["result",["httperror"]]]],[11,"from","websocket::header","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","websocket::header::extensions","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_string","","",32,[[["self"]],["string"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","websocket::receiver","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","websocket::sender","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"read","websocket::stream","",39,N],[11,"initializer","","",39,[[["self"]],["initializer"]]],[11,"from_raw_fd","","",39,[[["i32"]],["tcpstream"]]],[11,"eq","","",23,[[["self"],["socketaddr"]],["bool"]]],[11,"ne","","",23,[[["self"],["socketaddr"]],["bool"]]],[11,"eq","","",24,[[["self"],["shutdown"]],["bool"]]],[11,"from","","Converts a tuple struct (Into<[`IpAddr`]>, `u16`) into a [`SocketAddr`].",23,N],[11,"from","","Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].",23,[[["socketaddrv6"]],["socketaddr"]]],[11,"from","","Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].",23,[[["socketaddrv4"]],["socketaddr"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"to_socket_addrs","","",23,[[["self"]],["result",["intoiter","error"]]]],[11,"hash","","",23,N],[11,"as_raw_fd","","",39,[[["self"]],["i32"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",24,[[["self"]],["shutdown"]]],[11,"clone","","",23,[[["self"]],["socketaddr"]]],[11,"from_str","","",23,[[["str"]],["result",["socketaddr","addrparseerror"]]]],[11,"into_raw_fd","","",39,[[["self"]],["i32"]]],[11,"write","","",39,N],[11,"flush","","",39,[[["self"]],["result",["error"]]]],[11,"clone","websocket::header","",40,[[["self"]],["headers"]]],[11,"clone","websocket::server::request","",11,[[["self"]],["requesturi"]]],[11,"extend","websocket::header","",40,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","websocket::server::request","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","websocket::header","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","websocket::server::request","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_iter","websocket::header","",40,[[["i"]],["headers"]]],[11,"from_str","websocket::server::request","",11,[[["str"]],["result",["requesturi","error"]]]],[11,"eq","websocket::header","",40,[[["self"],["headers"]],["bool"]]],[11,"eq","websocket::server::request","",11,[[["self"],["requesturi"]],["bool"]]],[11,"ne","","",11,[[["self"],["requesturi"]],["bool"]]],[11,"into_url","websocket::client::request","",38,[[["self"]],["result",["url","parseerror"]]]],[11,"clone","","",38,[[["self"]],["url"]]],[11,"partial_cmp","","",38,[[["self"],["url"]],["option",["ordering"]]]],[11,"as_ref","","",38,[[["self"]],["str"]]],[11,"to_socket_addrs","","",38,[[["self"]],["result",["error"]]]],[11,"cmp","","",38,[[["self"],["url"]],["ordering"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","","",38,[[["self"],["range",["position"]]],["str"]]],[11,"index","","",38,[[["self"],["rangefull"]],["str"]]],[11,"index","","",38,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",38,[[["self"],["rangeto",["position"]]],["str"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",38,[[["str"]],["result",["url","parseerror"]]]],[11,"hash","","",38,N],[11,"eq","","",38,[[["self"],["url"]],["bool"]]],[11,"try_split","websocket::stream","",39,[[["self"]],["result",["tcpstream","error"]]]],[11,"close","","",39,[[["self"]],["result",["error"]]]],[11,"set_recv_buffer_size","","",39,[[["self"],["usize"]],["result",["error"]]]],[11,"recv_buffer_size","","",39,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","",39,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","",39,[[["self"]],["result",["usize","error"]]]],[11,"set_nodelay","","",39,[[["self"],["bool"]],["result",["error"]]]],[11,"nodelay","","",39,[[["self"]],["result",["bool","error"]]]],[11,"set_keepalive","","",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"keepalive","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive_ms","","",39,[[["self"],["option",["u32"]]],["result",["error"]]]],[11,"keepalive_ms","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_read_timeout_ms","","",39,[[["self"],["option",["u32"]]],["result",["error"]]]],[11,"read_timeout_ms","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_write_timeout_ms","","",39,[[["self"],["option",["u32"]]],["result",["error"]]]],[11,"write_timeout_ms","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_read_timeout","","",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"read_timeout","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_write_timeout","","",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"write_timeout","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_ttl","","",39,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","",39,[[["self"]],["result",["u32","error"]]]],[11,"set_only_v6","","",39,[[["self"],["bool"]],["result",["error"]]]],[11,"only_v6","","",39,[[["self"]],["result",["bool","error"]]]],[11,"connect","","",39,[[["self"],["t"]],["result",["error"]]]],[11,"take_error","","",39,[[["self"]],["result",["option","error"]]]],[11,"set_nonblocking","","",39,[[["self"],["bool"]],["result",["error"]]]],[11,"set_linger","","",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"linger","","",39,[[["self"]],["result",["option","error"]]]],[11,"dataframes","websocket::message","",18,N],[11,"from_dataframes","","Attempt to form a message from a series of data frames",18,[[["vec"]],["websocketresult"]]],[11,"send_dataframe","websocket::sender","Sends a single data frame to the remote endpoint.",35,[[["self"],["d"]],["websocketresult"]]],[11,"recv_dataframe","websocket::receiver","Reads a single data frame from the remote endpoint.",34,[[["self"]],["websocketresult",["dataframe"]]]],[11,"recv_message_dataframes","","Returns the data frames that constitute one message.",34,[[["self"]],["websocketresult",["vec"]]]],[11,"to_components","websocket::client::request","",38,[[["self"]],["websocketresult"]]],[11,"is_last","websocket::dataframe","",16,[[["self"]],["bool"]]],[11,"opcode","","",16,[[["self"]],["u8"]]],[11,"reserved","","",16,N],[11,"payload","","",16,[[["self"]],["cow"]]],[11,"is_last","websocket::message","",18,[[["self"]],["bool"]]],[11,"opcode","","",18,[[["self"]],["u8"]]],[11,"reserved","","",18,N],[11,"payload","","",18,[[["self"]],["cow"]]],[11,"size","","",18,[[["self"]],["usize"]]],[11,"write_payload","","",18,[[["self"],["w"]],["websocketresult"]]],[11,"clone","websocket::ws::util::header","",4,[[["self"]],["dataframeflags"]]],[11,"clone","","",3,[[["self"]],["dataframeheader"]]],[11,"clone","websocket::dataframe","",16,[[["self"]],["dataframe"]]],[11,"clone","","",17,[[["self"]],["opcode"]]],[11,"clone","websocket::message","",19,[[["self"]],["type"]]],[11,"clone","","",18,[[["self"]],["message"]]],[11,"clone","websocket::header","",30,[[["self"]],["websocketaccept"]]],[11,"clone","","",26,[[["self"]],["websocketkey"]]],[11,"clone","","",27,[[["self"]],["websocketprotocol"]]],[11,"clone","","",29,[[["self"]],["websocketversion"]]],[11,"clone","websocket::header::extensions","",31,[[["self"]],["websocketextensions"]]],[11,"clone","","",32,[[["self"]],["extension"]]],[11,"clone","","",33,[[["self"]],["parameter"]]],[11,"clone","websocket::header","",28,[[["self"]],["origin"]]],[11,"extend","websocket::ws::util::header","",4,[[["self"],["t"]]]],[11,"from","websocket::result","",21,[[["error"]],["websocketerror"]]],[11,"from","","",21,[[["httperror"]],["websocketerror"]]],[11,"from","","",21,[[["parseerror"]],["websocketerror"]]],[11,"from","","",21,[[["sslerror"]],["websocketerror"]]],[11,"from","","",21,[[["utf8error"]],["websocketerror"]]],[11,"from","","",21,[[["wsurlerrorkind"]],["websocketerror"]]],[11,"next","websocket::ws::receiver","Get the next data frame from the receiver. Always returns `Some`.",36,[[["self"]],["option",["websocketresult"]]]],[11,"next","","Get the next message from the receiver. Always returns `Some`.",37,[[["self"]],["option",["websocketresult"]]]],[11,"next","websocket::server","",14,[[["self"]],["option"]]],[11,"partial_cmp","websocket::ws::util::header","",4,[[["self"],["dataframeflags"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"le","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"gt","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"ge","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"eq","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"ne","","",4,[[["self"],["dataframeflags"]],["bool"]]],[11,"eq","","",3,[[["self"],["dataframeheader"]],["bool"]]],[11,"ne","","",3,[[["self"],["dataframeheader"]],["bool"]]],[11,"eq","websocket::dataframe","",16,[[["self"],["dataframe"]],["bool"]]],[11,"ne","","",16,[[["self"],["dataframe"]],["bool"]]],[11,"eq","","",17,[[["self"],["opcode"]],["bool"]]],[11,"eq","websocket::message","",19,[[["self"],["type"]],["bool"]]],[11,"eq","","",18,[[["self"],["message"]],["bool"]]],[11,"ne","","",18,[[["self"],["message"]],["bool"]]],[11,"eq","websocket::header","",30,[[["self"],["websocketaccept"]],["bool"]]],[11,"ne","","",30,[[["self"],["websocketaccept"]],["bool"]]],[11,"eq","","",26,[[["self"],["websocketkey"]],["bool"]]],[11,"ne","","",26,[[["self"],["websocketkey"]],["bool"]]],[11,"eq","","",27,[[["self"],["websocketprotocol"]],["bool"]]],[11,"ne","","",27,[[["self"],["websocketprotocol"]],["bool"]]],[11,"eq","","",29,[[["self"],["websocketversion"]],["bool"]]],[11,"ne","","",29,[[["self"],["websocketversion"]],["bool"]]],[11,"eq","websocket::header::extensions","",31,[[["self"],["websocketextensions"]],["bool"]]],[11,"ne","","",31,[[["self"],["websocketextensions"]],["bool"]]],[11,"eq","","",32,[[["self"],["extension"]],["bool"]]],[11,"ne","","",32,[[["self"],["extension"]],["bool"]]],[11,"eq","","",33,[[["self"],["parameter"]],["bool"]]],[11,"ne","","",33,[[["self"],["parameter"]],["bool"]]],[11,"eq","websocket::header","",28,[[["self"],["origin"]],["bool"]]],[11,"ne","","",28,[[["self"],["origin"]],["bool"]]],[11,"cmp","websocket::ws::util::header","",4,[[["self"],["dataframeflags"]],["ordering"]]],[11,"hash","","",4,N],[11,"fmt","websocket::result","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::header::extensions","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::ws::util::header","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::dataframe","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::message","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::result","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::header","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::header::extensions","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","websocket::header","",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",30,[[["str"]],["websocketresult",["websocketaccept"]]]],[11,"from_str","","",26,[[["str"]],["websocketresult",["websocketkey"]]]],[11,"from_str","websocket::header::extensions","",32,[[["str"]],["websocketresult",["extension"]]]],[11,"sub","websocket::ws::util::header","Returns the set difference of the two sets of flags.",4,[[["self"],["dataframeflags"]],["dataframeflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",4,[[["self"],["dataframeflags"]]]],[11,"not","","Returns the complement of this set of flags.",4,[[["self"]],["dataframeflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",4,[[["self"],["dataframeflags"]],["dataframeflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",4,[[["self"],["dataframeflags"]],["dataframeflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,[[["self"],["dataframeflags"]],["dataframeflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",4,[[["self"],["dataframeflags"]]]],[11,"bitor_assign","","Adds the set of flags.",4,[[["self"],["dataframeflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",4,[[["self"],["dataframeflags"]]]],[11,"deref","websocket::header","",27,[[["self"]],["vec"]]],[11,"deref","websocket::header::extensions","",31,[[["self"]],["vec"]]],[11,"deref","websocket::header","",28,[[["self"]],["string"]]],[11,"from_iter","websocket::ws::util::header","",4,[[["t"]],["dataframeflags"]]],[11,"write","websocket::ws::util::mask","",5,N],[11,"flush","","",5,[[["self"]],["ioresult"]]],[11,"write","websocket::stream","",25,N],[11,"flush","","",25,[[["self"]],["result"]]],[11,"read","","",25,N],[11,"description","websocket::result","",21,[[["self"]],["str"]]],[11,"cause","","",21,[[["self"]],["option",["error"]]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"fmt_header","websocket::header","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","websocket::header::extensions","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","websocket::header","",28,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,N],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"header_name","websocket::header::extensions","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"header_name","websocket::header","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"parse","websocket::client::request","Parse an absolute URL from a string.",38,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",38,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",38,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",38,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",38,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",38,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",38,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",38,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",38,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",38,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",38,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",38,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",38,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",38,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",38,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",38,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",38,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",38,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",38,[[["self"],["f"]],["result",["hostandport","error"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",38,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",38,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",38,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",38,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",38,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",38,N],[11,"set_query","","Change this URL’s query string.",38,N],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",38,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",38,N],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",38,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",38,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",38,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",38,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",38,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",38,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",38,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",38,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",38,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",38,[[["self"]],["result",["pathbuf"]]]],[11,"new","websocket::stream","Creates a new socket address from an [IP address] and a port number.",23,[[["ipaddr"],["u16"]],["socketaddr"]]],[11,"ip","","Returns the IP address associated with this socket address.",23,[[["self"]],["ipaddr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",23,N],[11,"port","","Returns the port number associated with this socket address.",23,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",23,N],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",23,[[["self"]],["bool"]]],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",23,[[["self"]],["bool"]]],[11,"connect","","Opens a TCP connection to a remote host.",39,[[["a"]],["result",["tcpstream","error"]]]],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",39,[[["socketaddr"],["duration"]],["result",["tcpstream","error"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",39,[[["self"]],["result",["socketaddr","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",39,[[["self"]],["result",["socketaddr","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",39,[[["self"],["shutdown"]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",39,[[["self"]],["result",["tcpstream","error"]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",39,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"read_timeout","","Returns the read timeout of this socket.",39,[[["self"]],["result",["option","error"]]]],[11,"write_timeout","","Returns the write timeout of this socket.",39,[[["self"]],["result",["option","error"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",39,N],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",39,[[["self"],["bool"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",39,[[["self"]],["result",["bool","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",39,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",39,[[["self"]],["result",["u32","error"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",39,[[["self"]],["result",["option","error"]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",39,[[["self"],["bool"]],["result",["error"]]]],[11,"new","websocket::header","Creates a new, empty headers map.",40,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",40,N],[11,"get_raw","","Access the raw value of a header.",40,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",40,N],[11,"remove_raw","","Remove a header set by set_raw",40,N],[11,"get","","Get a reference to the header field's value, if it exists.",40,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",40,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",40,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",40,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",40,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",40,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",40,N]],"paths":[[8,"Message"],[8,"Sender"],[8,"Receiver"],[3,"DataFrameHeader"],[3,"DataFrameFlags"],[3,"Masker"],[8,"ToWebSocketUrlComponents"],[8,"DataFrame"],[3,"Request"],[3,"Response"],[3,"Client"],[4,"RequestUri"],[3,"Request"],[3,"Response"],[3,"Server"],[3,"Connection"],[3,"DataFrame"],[4,"Opcode"],[3,"Message"],[4,"Type"],[8,"IntoCowBytes"],[4,"WebSocketError"],[4,"WSUrlErrorKind"],[4,"SocketAddr"],[4,"Shutdown"],[4,"WebSocketStream"],[3,"WebSocketKey"],[3,"WebSocketProtocol"],[3,"Origin"],[4,"WebSocketVersion"],[3,"WebSocketAccept"],[3,"WebSocketExtensions"],[3,"Extension"],[3,"Parameter"],[3,"Receiver"],[3,"Sender"],[3,"DataFrameIterator"],[3,"MessageIterator"],[3,"Url"],[3,"TcpStream"],[3,"Headers"]]};
searchIndex["winapi"]={"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
